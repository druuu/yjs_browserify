(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],2:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (ArrayBuffer.isView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (ArrayBuffer.isView(buf)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":1,"ieee754":3}],3:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],4:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],5:[function(require,module,exports){
(function (process,global,Buffer){

/**
 * y-webrtc3 - 
 * @version v2.4.0
 * @license MIT
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.ywebrtc = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

	var parseuri = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    return uri;
	};

	var parseuri$1 = /*#__PURE__*/Object.freeze({
		default: parseuri,
		__moduleExports: parseuri
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};

	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

	var inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms = function ms(val, options) {
	  options = options || {};
	  var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

	var ms$1 = /*#__PURE__*/Object.freeze({
		default: ms,
		__moduleExports: ms
	});

	var require$$0 = ( ms$1 && ms ) || ms$1;

	var debug = createCommonjsModule(function (module, exports) {
	  /**
	   * This is the common logic for both the Node.js and web browser
	   * implementations of `debug()`.
	   *
	   * Expose `debug()` as the module.
	   */

	  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
	  exports.coerce = coerce;
	  exports.disable = disable;
	  exports.enable = enable;
	  exports.enabled = enabled;
	  exports.humanize = require$$0;

	  /**
	   * Active `debug` instances.
	   */
	  exports.instances = [];

	  /**
	   * The currently active debug mode names, and names to skip.
	   */

	  exports.names = [];
	  exports.skips = [];

	  /**
	   * Map of special "%n" handling functions, for the debug "format" argument.
	   *
	   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	   */

	  exports.formatters = {};

	  /**
	   * Select a color.
	   * @param {String} namespace
	   * @return {Number}
	   * @api private
	   */

	  function selectColor(namespace) {
	    var hash = 0,
	        i;

	    for (i in namespace) {
	      hash = (hash << 5) - hash + namespace.charCodeAt(i);
	      hash |= 0; // Convert to 32bit integer
	    }

	    return exports.colors[Math.abs(hash) % exports.colors.length];
	  }

	  /**
	   * Create a debugger with the given `namespace`.
	   *
	   * @param {String} namespace
	   * @return {Function}
	   * @api public
	   */

	  function createDebug(namespace) {

	    var prevTime;

	    function debug() {
	      // disabled?
	      if (!debug.enabled) return;

	      var self = debug;

	      // set `diff` timestamp
	      var curr = +new Date();
	      var ms = curr - (prevTime || curr);
	      self.diff = ms;
	      self.prev = prevTime;
	      self.curr = curr;
	      prevTime = curr;

	      // turn the `arguments` into a proper Array
	      var args = new Array(arguments.length);
	      for (var i = 0; i < args.length; i++) {
	        args[i] = arguments[i];
	      }

	      args[0] = exports.coerce(args[0]);

	      if ('string' !== typeof args[0]) {
	        // anything else let's inspect with %O
	        args.unshift('%O');
	      }

	      // apply any `formatters` transformations
	      var index = 0;
	      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
	        // if we encounter an escaped % then don't increase the array index
	        if (match === '%%') return match;
	        index++;
	        var formatter = exports.formatters[format];
	        if ('function' === typeof formatter) {
	          var val = args[index];
	          match = formatter.call(self, val);

	          // now we need to remove `args[index]` since it's inlined in the `format`
	          args.splice(index, 1);
	          index--;
	        }
	        return match;
	      });

	      // apply env-specific formatting (colors, etc.)
	      exports.formatArgs.call(self, args);

	      var logFn = debug.log || exports.log || console.log.bind(console);
	      logFn.apply(self, args);
	    }

	    debug.namespace = namespace;
	    debug.enabled = exports.enabled(namespace);
	    debug.useColors = exports.useColors();
	    debug.color = selectColor(namespace);
	    debug.destroy = destroy;

	    // env-specific initialization logic for debug instances
	    if ('function' === typeof exports.init) {
	      exports.init(debug);
	    }

	    exports.instances.push(debug);

	    return debug;
	  }

	  function destroy() {
	    var index = exports.instances.indexOf(this);
	    if (index !== -1) {
	      exports.instances.splice(index, 1);
	      return true;
	    } else {
	      return false;
	    }
	  }

	  /**
	   * Enables a debug mode by namespaces. This can include modes
	   * separated by a colon and wildcards.
	   *
	   * @param {String} namespaces
	   * @api public
	   */

	  function enable(namespaces) {
	    exports.save(namespaces);

	    exports.names = [];
	    exports.skips = [];

	    var i;
	    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	    var len = split.length;

	    for (i = 0; i < len; i++) {
	      if (!split[i]) continue; // ignore empty strings
	      namespaces = split[i].replace(/\*/g, '.*?');
	      if (namespaces[0] === '-') {
	        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	      } else {
	        exports.names.push(new RegExp('^' + namespaces + '$'));
	      }
	    }

	    for (i = 0; i < exports.instances.length; i++) {
	      var instance = exports.instances[i];
	      instance.enabled = exports.enabled(instance.namespace);
	    }
	  }

	  /**
	   * Disable debug output.
	   *
	   * @api public
	   */

	  function disable() {
	    exports.enable('');
	  }

	  /**
	   * Returns true if the given mode name is enabled, false otherwise.
	   *
	   * @param {String} name
	   * @return {Boolean}
	   * @api public
	   */

	  function enabled(name) {
	    if (name[name.length - 1] === '*') {
	      return true;
	    }
	    var i, len;
	    for (i = 0, len = exports.skips.length; i < len; i++) {
	      if (exports.skips[i].test(name)) {
	        return false;
	      }
	    }
	    for (i = 0, len = exports.names.length; i < len; i++) {
	      if (exports.names[i].test(name)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Coerce `val`.
	   *
	   * @param {Mixed} val
	   * @return {Mixed}
	   * @api private
	   */

	  function coerce(val) {
	    if (val instanceof Error) return val.stack || val.message;
	    return val;
	  }
	});
	var debug_1 = debug.coerce;
	var debug_2 = debug.disable;
	var debug_3 = debug.enable;
	var debug_4 = debug.enabled;
	var debug_5 = debug.humanize;
	var debug_6 = debug.instances;
	var debug_7 = debug.names;
	var debug_8 = debug.skips;
	var debug_9 = debug.formatters;

	var debug$1 = /*#__PURE__*/Object.freeze({
		default: debug,
		__moduleExports: debug,
		coerce: debug_1,
		disable: debug_2,
		enable: debug_3,
		enabled: debug_4,
		humanize: debug_5,
		instances: debug_6,
		names: debug_7,
		skips: debug_8,
		formatters: debug_9
	});

	var require$$0$1 = ( debug$1 && debug ) || debug$1;

	var browser = createCommonjsModule(function (module, exports) {
	  /**
	   * This is the web browser implementation of `debug()`.
	   *
	   * Expose `debug()` as the module.
	   */

	  exports = module.exports = require$$0$1;
	  exports.log = log;
	  exports.formatArgs = formatArgs;
	  exports.save = save;
	  exports.load = load;
	  exports.useColors = useColors;
	  exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

	  /**
	   * Colors.
	   */

	  exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

	  /**
	   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	   * and the Firebug extension (any Firefox version) are known
	   * to support "%c" CSS customizations.
	   *
	   * TODO: add a `localStorage` variable to explicitly enable/disable colors
	   */

	  function useColors() {
	    // NB: In an Electron preload script, document will be defined but not fully
	    // initialized. Since we know we're in Chrome, we'll just detect this case
	    // explicitly
	    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
	      return true;
	    }

	    // Internet Explorer and Edge do not support colors.
	    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
	      return false;
	    }

	    // is webkit? http://stackoverflow.com/a/16459606/376773
	    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
	    // double check webkit in userAgent just in case we are in a worker
	    typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
	  }

	  /**
	   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	   */

	  exports.formatters.j = function (v) {
	    try {
	      return JSON.stringify(v);
	    } catch (err) {
	      return '[UnexpectedJSONParseError]: ' + err.message;
	    }
	  };

	  /**
	   * Colorize log arguments if enabled.
	   *
	   * @api public
	   */

	  function formatArgs(args) {
	    var useColors = this.useColors;

	    args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

	    if (!useColors) return;

	    var c = 'color: ' + this.color;
	    args.splice(1, 0, c, 'color: inherit');

	    // the final "%c" is somewhat tricky, because there could be other
	    // arguments passed either before or after the %c, so we need to
	    // figure out the correct index to insert the CSS into
	    var index = 0;
	    var lastC = 0;
	    args[0].replace(/%[a-zA-Z%]/g, function (match) {
	      if ('%%' === match) return;
	      index++;
	      if ('%c' === match) {
	        // we only are interested in the *last* %c
	        // (the user may have provided their own)
	        lastC = index;
	      }
	    });

	    args.splice(lastC, 0, c);
	  }

	  /**
	   * Invokes `console.log()` when available.
	   * No-op when `console.log` is not a "function".
	   *
	   * @api public
	   */

	  function log() {
	    // this hackery is required for IE8/9, where
	    // the `console.log` function doesn't have 'apply'
	    return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
	  }

	  /**
	   * Save `namespaces`.
	   *
	   * @param {String} namespaces
	   * @api private
	   */

	  function save(namespaces) {
	    try {
	      if (null == namespaces) {
	        exports.storage.removeItem('debug');
	      } else {
	        exports.storage.debug = namespaces;
	      }
	    } catch (e) {}
	  }

	  /**
	   * Load `namespaces`.
	   *
	   * @return {String} returns the previously persisted debug modes
	   * @api private
	   */

	  function load() {
	    var r;
	    try {
	      r = exports.storage.debug;
	    } catch (e) {}

	    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	    if (!r && typeof process !== 'undefined' && 'env' in process) {
	      r = process.env.DEBUG;
	    }

	    return r;
	  }

	  /**
	   * Enable namespaces listed in `localStorage.debug` initially.
	   */

	  exports.enable(load());

	  /**
	   * Localstorage attempts to return the localstorage.
	   *
	   * This is necessary because safari throws
	   * when a user disables cookies/localstorage
	   * and you attempt to access it.
	   *
	   * @return {LocalStorage}
	   * @api private
	   */

	  function localstorage() {
	    try {
	      return window.localStorage;
	    } catch (e) {}
	  }
	});
	var browser_1 = browser.log;
	var browser_2 = browser.formatArgs;
	var browser_3 = browser.save;
	var browser_4 = browser.load;
	var browser_5 = browser.useColors;
	var browser_6 = browser.storage;
	var browser_7 = browser.colors;

	var browser$1 = /*#__PURE__*/Object.freeze({
		default: browser,
		__moduleExports: browser,
		log: browser_1,
		formatArgs: browser_2,
		save: browser_3,
		load: browser_4,
		useColors: browser_5,
		storage: browser_6,
		colors: browser_7
	});

	var parseuri$2 = ( parseuri$1 && parseuri ) || parseuri$1;

	var require$$0$2 = ( browser$1 && browser ) || browser$1;

	/**
	 * Module dependencies.
	 */

	var debug$2 = require$$0$2('socket.io-client:url');

	/**
	 * Module exports.
	 */

	var url_1 = url;

	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */

	function url(uri, loc) {
	  var obj = uri;

	  // default to window.location
	  loc = loc || commonjsGlobal.location;
	  if (null == uri) uri = loc.protocol + '//' + loc.host;

	  // relative path support
	  if ('string' === typeof uri) {
	    if ('/' === uri.charAt(0)) {
	      if ('/' === uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.host + uri;
	      }
	    }

	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug$2('protocol-less url %s', uri);
	      if ('undefined' !== typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }

	    // parse
	    debug$2('parse %s', uri);
	    obj = parseuri$2(uri);
	  }

	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    } else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }

	  obj.path = obj.path || '/';

	  var ipv6 = obj.host.indexOf(':') !== -1;
	  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

	  // define unique id
	  obj.id = obj.protocol + '://' + host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);

	  return obj;
	}

	var url$1 = /*#__PURE__*/Object.freeze({
		default: url_1,
		__moduleExports: url_1
	});

	var componentEmitter = createCommonjsModule(function (module) {
	  /**
	   * Expose `Emitter`.
	   */

	  {
	    module.exports = Emitter;
	  }

	  /**
	   * Initialize a new `Emitter`.
	   *
	   * @api public
	   */

	  function Emitter(obj) {
	    if (obj) return mixin(obj);
	  }
	  /**
	   * Mixin the emitter properties.
	   *
	   * @param {Object} obj
	   * @return {Object}
	   * @api private
	   */

	  function mixin(obj) {
	    for (var key in Emitter.prototype) {
	      obj[key] = Emitter.prototype[key];
	    }
	    return obj;
	  }

	  /**
	   * Listen on the given `event` with `fn`.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */

	  Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
	    this._callbacks = this._callbacks || {};
	    (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
	    return this;
	  };

	  /**
	   * Adds an `event` listener that will be invoked a single
	   * time then automatically removed.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */

	  Emitter.prototype.once = function (event, fn) {
	    function on() {
	      this.off(event, on);
	      fn.apply(this, arguments);
	    }

	    on.fn = fn;
	    this.on(event, on);
	    return this;
	  };

	  /**
	   * Remove the given callback for `event` or all
	   * registered callbacks.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */

	  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
	    this._callbacks = this._callbacks || {};

	    // all
	    if (0 == arguments.length) {
	      this._callbacks = {};
	      return this;
	    }

	    // specific event
	    var callbacks = this._callbacks['$' + event];
	    if (!callbacks) return this;

	    // remove all handlers
	    if (1 == arguments.length) {
	      delete this._callbacks['$' + event];
	      return this;
	    }

	    // remove specific handler
	    var cb;
	    for (var i = 0; i < callbacks.length; i++) {
	      cb = callbacks[i];
	      if (cb === fn || cb.fn === fn) {
	        callbacks.splice(i, 1);
	        break;
	      }
	    }
	    return this;
	  };

	  /**
	   * Emit `event` with the given args.
	   *
	   * @param {String} event
	   * @param {Mixed} ...
	   * @return {Emitter}
	   */

	  Emitter.prototype.emit = function (event) {
	    this._callbacks = this._callbacks || {};
	    var args = [].slice.call(arguments, 1),
	        callbacks = this._callbacks['$' + event];

	    if (callbacks) {
	      callbacks = callbacks.slice(0);
	      for (var i = 0, len = callbacks.length; i < len; ++i) {
	        callbacks[i].apply(this, args);
	      }
	    }

	    return this;
	  };

	  /**
	   * Return array of callbacks for `event`.
	   *
	   * @param {String} event
	   * @return {Array}
	   * @api public
	   */

	  Emitter.prototype.listeners = function (event) {
	    this._callbacks = this._callbacks || {};
	    return this._callbacks['$' + event] || [];
	  };

	  /**
	   * Check if this emitter has `event` handlers.
	   *
	   * @param {String} event
	   * @return {Boolean}
	   * @api public
	   */

	  Emitter.prototype.hasListeners = function (event) {
	    return !!this.listeners(event).length;
	  };
	});

	var componentEmitter$1 = /*#__PURE__*/Object.freeze({
		default: componentEmitter,
		__moduleExports: componentEmitter
	});

	var toString = {}.toString;

	var isarray = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};

	var isarray$1 = /*#__PURE__*/Object.freeze({
		default: isarray,
		__moduleExports: isarray
	});

	var isBuffer = isBuf;

	var withNativeBuffer = typeof commonjsGlobal.Buffer === 'function' && typeof commonjsGlobal.Buffer.isBuffer === 'function';
	var withNativeArrayBuffer = typeof commonjsGlobal.ArrayBuffer === 'function';

	var isView = function () {
	  if (withNativeArrayBuffer && typeof commonjsGlobal.ArrayBuffer.isView === 'function') {
	    return commonjsGlobal.ArrayBuffer.isView;
	  } else {
	    return function (obj) {
	      return obj.buffer instanceof commonjsGlobal.ArrayBuffer;
	    };
	  }
	}();

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf(obj) {
	  return withNativeBuffer && commonjsGlobal.Buffer.isBuffer(obj) || withNativeArrayBuffer && (obj instanceof commonjsGlobal.ArrayBuffer || isView(obj));
	}

	var isBuffer$1 = /*#__PURE__*/Object.freeze({
		default: isBuffer,
		__moduleExports: isBuffer
	});

	var isArray = ( isarray$1 && isarray ) || isarray$1;

	var isBuf$1 = ( isBuffer$1 && isBuffer ) || isBuffer$1;

	/*global Blob,File*/

	/**
	 * Module requirements
	 */

	var toString$1 = Object.prototype.toString;
	var withNativeBlob = typeof commonjsGlobal.Blob === 'function' || toString$1.call(commonjsGlobal.Blob) === '[object BlobConstructor]';
	var withNativeFile = typeof commonjsGlobal.File === 'function' || toString$1.call(commonjsGlobal.File) === '[object FileConstructor]';

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	var deconstructPacket = function deconstructPacket(packet) {
	  var buffers = [];
	  var packetData = packet.data;
	  var pack = packet;
	  pack.data = _deconstructPacket(packetData, buffers);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return { packet: pack, buffers: buffers };
	};

	function _deconstructPacket(data, buffers) {
	  if (!data) return data;

	  if (isBuf$1(data)) {
	    var placeholder = { _placeholder: true, num: buffers.length };
	    buffers.push(data);
	    return placeholder;
	  } else if (isArray(data)) {
	    var newData = new Array(data.length);
	    for (var i = 0; i < data.length; i++) {
	      newData[i] = _deconstructPacket(data[i], buffers);
	    }
	    return newData;
	  } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && !(data instanceof Date)) {
	    var newData = {};
	    for (var key in data) {
	      newData[key] = _deconstructPacket(data[key], buffers);
	    }
	    return newData;
	  }
	  return data;
	}

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	var reconstructPacket = function reconstructPacket(packet, buffers) {
	  packet.data = _reconstructPacket(packet.data, buffers);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	function _reconstructPacket(data, buffers) {
	  if (!data) return data;

	  if (data && data._placeholder) {
	    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
	  } else if (isArray(data)) {
	    for (var i = 0; i < data.length; i++) {
	      data[i] = _reconstructPacket(data[i], buffers);
	    }
	  } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
	    for (var key in data) {
	      data[key] = _reconstructPacket(data[key], buffers);
	    }
	  }

	  return data;
	}

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	var removeBlobs = function removeBlobs(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if (withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function () {
	        // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        } else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if (! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) {
	      // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !isBuf$1(obj)) {
	      // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};

	var binary = {
	  deconstructPacket: deconstructPacket,
	  reconstructPacket: reconstructPacket,
	  removeBlobs: removeBlobs
	};

	var binary$1 = /*#__PURE__*/Object.freeze({
		default: binary,
		__moduleExports: binary,
		deconstructPacket: deconstructPacket,
		reconstructPacket: reconstructPacket,
		removeBlobs: removeBlobs
	});

	var Emitter = ( componentEmitter$1 && componentEmitter ) || componentEmitter$1;

	var binary$2 = ( binary$1 && binary ) || binary$1;

	var socket_ioParser = createCommonjsModule(function (module, exports) {
	  /**
	   * Module dependencies.
	   */

	  var debug = require$$0$2('socket.io-parser');

	  /**
	   * Protocol version.
	   *
	   * @api public
	   */

	  exports.protocol = 4;

	  /**
	   * Packet types.
	   *
	   * @api public
	   */

	  exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];

	  /**
	   * Packet type `connect`.
	   *
	   * @api public
	   */

	  exports.CONNECT = 0;

	  /**
	   * Packet type `disconnect`.
	   *
	   * @api public
	   */

	  exports.DISCONNECT = 1;

	  /**
	   * Packet type `event`.
	   *
	   * @api public
	   */

	  exports.EVENT = 2;

	  /**
	   * Packet type `ack`.
	   *
	   * @api public
	   */

	  exports.ACK = 3;

	  /**
	   * Packet type `error`.
	   *
	   * @api public
	   */

	  exports.ERROR = 4;

	  /**
	   * Packet type 'binary event'
	   *
	   * @api public
	   */

	  exports.BINARY_EVENT = 5;

	  /**
	   * Packet type `binary ack`. For acks with binary arguments.
	   *
	   * @api public
	   */

	  exports.BINARY_ACK = 6;

	  /**
	   * Encoder constructor.
	   *
	   * @api public
	   */

	  exports.Encoder = Encoder;

	  /**
	   * Decoder constructor.
	   *
	   * @api public
	   */

	  exports.Decoder = Decoder;

	  /**
	   * A socket.io Encoder instance
	   *
	   * @api public
	   */

	  function Encoder() {}

	  var ERROR_PACKET = exports.ERROR + '"encode error"';

	  /**
	   * Encode a packet as a single string if non-binary, or as a
	   * buffer sequence, depending on packet type.
	   *
	   * @param {Object} obj - packet object
	   * @param {Function} callback - function to handle encodings (likely engine.write)
	   * @return Calls callback with Array of encodings
	   * @api public
	   */

	  Encoder.prototype.encode = function (obj, callback) {
	    debug('encoding packet %j', obj);

	    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
	      encodeAsBinary(obj, callback);
	    } else {
	      var encoding = encodeAsString(obj);
	      callback([encoding]);
	    }
	  };

	  /**
	   * Encode packet as string.
	   *
	   * @param {Object} packet
	   * @return {String} encoded
	   * @api private
	   */

	  function encodeAsString(obj) {

	    // first is type
	    var str = '' + obj.type;

	    // attachments if we have them
	    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
	      str += obj.attachments + '-';
	    }

	    // if we have a namespace other than `/`
	    // we append it followed by a comma `,`
	    if (obj.nsp && '/' !== obj.nsp) {
	      str += obj.nsp + ',';
	    }

	    // immediately followed by the id
	    if (null != obj.id) {
	      str += obj.id;
	    }

	    // json data
	    if (null != obj.data) {
	      var payload = tryStringify(obj.data);
	      if (payload !== false) {
	        str += payload;
	      } else {
	        return ERROR_PACKET;
	      }
	    }

	    debug('encoded %j as %s', obj, str);
	    return str;
	  }

	  function tryStringify(str) {
	    try {
	      return JSON.stringify(str);
	    } catch (e) {
	      return false;
	    }
	  }

	  /**
	   * Encode packet as 'buffer sequence' by removing blobs, and
	   * deconstructing packet into object with placeholders and
	   * a list of buffers.
	   *
	   * @param {Object} packet
	   * @return {Buffer} encoded
	   * @api private
	   */

	  function encodeAsBinary(obj, callback) {

	    function writeEncoding(bloblessData) {
	      var deconstruction = binary$2.deconstructPacket(bloblessData);
	      var pack = encodeAsString(deconstruction.packet);
	      var buffers = deconstruction.buffers;

	      buffers.unshift(pack); // add packet info to beginning of data list
	      callback(buffers); // write all the buffers
	    }

	    binary$2.removeBlobs(obj, writeEncoding);
	  }

	  /**
	   * A socket.io Decoder instance
	   *
	   * @return {Object} decoder
	   * @api public
	   */

	  function Decoder() {
	    this.reconstructor = null;
	  }

	  /**
	   * Mix in `Emitter` with Decoder.
	   */

	  Emitter(Decoder.prototype);

	  /**
	   * Decodes an ecoded packet string into packet JSON.
	   *
	   * @param {String} obj - encoded packet
	   * @return {Object} packet
	   * @api public
	   */

	  Decoder.prototype.add = function (obj) {
	    var packet;
	    if (typeof obj === 'string') {
	      packet = decodeString(obj);
	      if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {
	        // binary packet's json
	        this.reconstructor = new BinaryReconstructor(packet);

	        // no attachments, labeled binary but no binary data to follow
	        if (this.reconstructor.reconPack.attachments === 0) {
	          this.emit('decoded', packet);
	        }
	      } else {
	        // non-binary full packet
	        this.emit('decoded', packet);
	      }
	    } else if (isBuf$1(obj) || obj.base64) {
	      // raw binary data
	      if (!this.reconstructor) {
	        throw new Error('got binary data when not reconstructing a packet');
	      } else {
	        packet = this.reconstructor.takeBinaryData(obj);
	        if (packet) {
	          // received final buffer
	          this.reconstructor = null;
	          this.emit('decoded', packet);
	        }
	      }
	    } else {
	      throw new Error('Unknown type: ' + obj);
	    }
	  };

	  /**
	   * Decode a packet String (JSON data)
	   *
	   * @param {String} str
	   * @return {Object} packet
	   * @api private
	   */

	  function decodeString(str) {
	    var i = 0;
	    // look up type
	    var p = {
	      type: Number(str.charAt(0))
	    };

	    if (null == exports.types[p.type]) {
	      return error('unknown packet type ' + p.type);
	    }

	    // look up attachments if type binary
	    if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
	      var buf = '';
	      while (str.charAt(++i) !== '-') {
	        buf += str.charAt(i);
	        if (i == str.length) break;
	      }
	      if (buf != Number(buf) || str.charAt(i) !== '-') {
	        throw new Error('Illegal attachments');
	      }
	      p.attachments = Number(buf);
	    }

	    // look up namespace (if any)
	    if ('/' === str.charAt(i + 1)) {
	      p.nsp = '';
	      while (++i) {
	        var c = str.charAt(i);
	        if (',' === c) break;
	        p.nsp += c;
	        if (i === str.length) break;
	      }
	    } else {
	      p.nsp = '/';
	    }

	    // look up id
	    var next = str.charAt(i + 1);
	    if ('' !== next && Number(next) == next) {
	      p.id = '';
	      while (++i) {
	        var c = str.charAt(i);
	        if (null == c || Number(c) != c) {
	          --i;
	          break;
	        }
	        p.id += str.charAt(i);
	        if (i === str.length) break;
	      }
	      p.id = Number(p.id);
	    }

	    // look up json data
	    if (str.charAt(++i)) {
	      var payload = tryParse(str.substr(i));
	      var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
	      if (isPayloadValid) {
	        p.data = payload;
	      } else {
	        return error('invalid payload');
	      }
	    }

	    debug('decoded %s as %j', str, p);
	    return p;
	  }

	  function tryParse(str) {
	    try {
	      return JSON.parse(str);
	    } catch (e) {
	      return false;
	    }
	  }

	  /**
	   * Deallocates a parser's resources
	   *
	   * @api public
	   */

	  Decoder.prototype.destroy = function () {
	    if (this.reconstructor) {
	      this.reconstructor.finishedReconstruction();
	    }
	  };

	  /**
	   * A manager of a binary event's 'buffer sequence'. Should
	   * be constructed whenever a packet of type BINARY_EVENT is
	   * decoded.
	   *
	   * @param {Object} packet
	   * @return {BinaryReconstructor} initialized reconstructor
	   * @api private
	   */

	  function BinaryReconstructor(packet) {
	    this.reconPack = packet;
	    this.buffers = [];
	  }

	  /**
	   * Method to be called when binary data received from connection
	   * after a BINARY_EVENT packet.
	   *
	   * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	   * @return {null | Object} returns null if more binary data is expected or
	   *   a reconstructed packet object if all buffers have been received.
	   * @api private
	   */

	  BinaryReconstructor.prototype.takeBinaryData = function (binData) {
	    this.buffers.push(binData);
	    if (this.buffers.length === this.reconPack.attachments) {
	      // done with buffer list
	      var packet = binary$2.reconstructPacket(this.reconPack, this.buffers);
	      this.finishedReconstruction();
	      return packet;
	    }
	    return null;
	  };

	  /**
	   * Cleans up binary packet reconstruction variables.
	   *
	   * @api private
	   */

	  BinaryReconstructor.prototype.finishedReconstruction = function () {
	    this.reconPack = null;
	    this.buffers = [];
	  };

	  function error(msg) {
	    return {
	      type: exports.ERROR,
	      data: 'parser error: ' + msg
	    };
	  }
	});
	var socket_ioParser_1 = socket_ioParser.protocol;
	var socket_ioParser_2 = socket_ioParser.types;
	var socket_ioParser_3 = socket_ioParser.CONNECT;
	var socket_ioParser_4 = socket_ioParser.DISCONNECT;
	var socket_ioParser_5 = socket_ioParser.EVENT;
	var socket_ioParser_6 = socket_ioParser.ACK;
	var socket_ioParser_7 = socket_ioParser.ERROR;
	var socket_ioParser_8 = socket_ioParser.BINARY_EVENT;
	var socket_ioParser_9 = socket_ioParser.BINARY_ACK;
	var socket_ioParser_10 = socket_ioParser.Encoder;
	var socket_ioParser_11 = socket_ioParser.Decoder;

	var socket_ioParser$1 = /*#__PURE__*/Object.freeze({
		default: socket_ioParser,
		__moduleExports: socket_ioParser,
		protocol: socket_ioParser_1,
		types: socket_ioParser_2,
		CONNECT: socket_ioParser_3,
		DISCONNECT: socket_ioParser_4,
		EVENT: socket_ioParser_5,
		ACK: socket_ioParser_6,
		ERROR: socket_ioParser_7,
		BINARY_EVENT: socket_ioParser_8,
		BINARY_ACK: socket_ioParser_9,
		Encoder: socket_ioParser_10,
		Decoder: socket_ioParser_11
	});

	var hasCors = createCommonjsModule(function (module) {
	  /**
	   * Module exports.
	   *
	   * Logic borrowed from Modernizr:
	   *
	   *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	   */

	  try {
	    module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
	  } catch (err) {
	    // if XMLHttp support is disabled in IE then it will throw
	    // when trying to create
	    module.exports = false;
	  }
	});

	var hasCors$1 = /*#__PURE__*/Object.freeze({
		default: hasCors,
		__moduleExports: hasCors
	});

	var hasCORS = ( hasCors$1 && hasCors ) || hasCors$1;

	// browser shim for xmlhttprequest module


	var xmlhttprequest = function xmlhttprequest(opts) {
	  var xdomain = opts.xdomain;

	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;

	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;

	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) {}

	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) {}

	  if (!xdomain) {
	    try {
	      return new commonjsGlobal[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
	    } catch (e) {}
	  }
	};

	var xmlhttprequest$1 = /*#__PURE__*/Object.freeze({
		default: xmlhttprequest,
		__moduleExports: xmlhttprequest
	});

	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */

	var keys = Object.keys || function keys(obj) {
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;

	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};

	var keys$1 = /*#__PURE__*/Object.freeze({
		default: keys,
		__moduleExports: keys
	});

	/* global Blob File */

	/*
	 * Module requirements.
	 */

	var toString$2 = Object.prototype.toString;
	var withNativeBlob$1 = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString$2.call(Blob) === '[object BlobConstructor]';
	var withNativeFile$1 = typeof File === 'function' || typeof File !== 'undefined' && toString$2.call(File) === '[object FileConstructor]';

	/**
	 * Module exports.
	 */

	var hasBinary2 = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Supports Buffer, ArrayBuffer, Blob and File.
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary(obj) {
	  if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
	    return false;
	  }

	  if (isArray(obj)) {
	    for (var i = 0, l = obj.length; i < l; i++) {
	      if (hasBinary(obj[i])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  if (typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj) || typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer || withNativeBlob$1 && obj instanceof Blob || withNativeFile$1 && obj instanceof File) {
	    return true;
	  }

	  // see: https://github.com/Automattic/has-binary/pull/4
	  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
	    return hasBinary(obj.toJSON(), true);
	  }

	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
	      return true;
	    }
	  }

	  return false;
	}

	var hasBinary2$1 = /*#__PURE__*/Object.freeze({
		default: hasBinary2,
		__moduleExports: hasBinary2
	});

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */

	var arraybuffer_slice = function arraybuffer_slice(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;

	  if (arraybuffer.slice) {
	    return arraybuffer.slice(start, end);
	  }

	  if (start < 0) {
	    start += bytes;
	  }
	  if (end < 0) {
	    end += bytes;
	  }
	  if (end > bytes) {
	    end = bytes;
	  }

	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }

	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};

	var arraybuffer_slice$1 = /*#__PURE__*/Object.freeze({
		default: arraybuffer_slice,
		__moduleExports: arraybuffer_slice
	});

	var after_1 = after;

	function after(count, callback, err_cb) {
	    var bail = false;
	    err_cb = err_cb || noop;
	    proxy.count = count;

	    return count === 0 ? callback() : proxy;

	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times');
	        }
	        --proxy.count;

	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true;
	            callback(err);
	            // future error callbacks will go to error handler
	            callback = err_cb;
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result);
	        }
	    }
	}

	function noop() {}

	var after$1 = /*#__PURE__*/Object.freeze({
		default: after_1,
		__moduleExports: after_1
	});

	var utf8 = createCommonjsModule(function (module, exports) {
	(function (root) {

			// Detect free variables `exports`
			var freeExports = exports;

			// Detect free variable `module`
			var freeModule = module && module.exports == freeExports && module;

			// Detect free variable `global`, from Node.js or Browserified code,
			// and use it as `root`
			var freeGlobal = _typeof(commonjsGlobal) == 'object' && commonjsGlobal;
			if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
				root = freeGlobal;
			}

			/*--------------------------------------------------------------------------*/

			var stringFromCharCode = String.fromCharCode;

			// Taken from https://mths.be/punycode
			function ucs2decode(string) {
				var output = [];
				var counter = 0;
				var length = string.length;
				var value;
				var extra;
				while (counter < length) {
					value = string.charCodeAt(counter++);
					if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
						// high surrogate, and there is a next character
						extra = string.charCodeAt(counter++);
						if ((extra & 0xFC00) == 0xDC00) {
							// low surrogate
							output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
						} else {
							// unmatched surrogate; only append this code unit, in case the next
							// code unit is the high surrogate of a surrogate pair
							output.push(value);
							counter--;
						}
					} else {
						output.push(value);
					}
				}
				return output;
			}

			// Taken from https://mths.be/punycode
			function ucs2encode(array) {
				var length = array.length;
				var index = -1;
				var value;
				var output = '';
				while (++index < length) {
					value = array[index];
					if (value > 0xFFFF) {
						value -= 0x10000;
						output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
						value = 0xDC00 | value & 0x3FF;
					}
					output += stringFromCharCode(value);
				}
				return output;
			}

			function checkScalarValue(codePoint, strict) {
				if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
					if (strict) {
						throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
					}
					return false;
				}
				return true;
			}
			/*--------------------------------------------------------------------------*/

			function createByte(codePoint, shift) {
				return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
			}

			function encodeCodePoint(codePoint, strict) {
				if ((codePoint & 0xFFFFFF80) == 0) {
					// 1-byte sequence
					return stringFromCharCode(codePoint);
				}
				var symbol = '';
				if ((codePoint & 0xFFFFF800) == 0) {
					// 2-byte sequence
					symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
				} else if ((codePoint & 0xFFFF0000) == 0) {
					// 3-byte sequence
					if (!checkScalarValue(codePoint, strict)) {
						codePoint = 0xFFFD;
					}
					symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
					symbol += createByte(codePoint, 6);
				} else if ((codePoint & 0xFFE00000) == 0) {
					// 4-byte sequence
					symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
					symbol += createByte(codePoint, 12);
					symbol += createByte(codePoint, 6);
				}
				symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
				return symbol;
			}

			function utf8encode(string, opts) {
				opts = opts || {};
				var strict = false !== opts.strict;

				var codePoints = ucs2decode(string);
				var length = codePoints.length;
				var index = -1;
				var codePoint;
				var byteString = '';
				while (++index < length) {
					codePoint = codePoints[index];
					byteString += encodeCodePoint(codePoint, strict);
				}
				return byteString;
			}

			/*--------------------------------------------------------------------------*/

			function readContinuationByte() {
				if (byteIndex >= byteCount) {
					throw Error('Invalid byte index');
				}

				var continuationByte = byteArray[byteIndex] & 0xFF;
				byteIndex++;

				if ((continuationByte & 0xC0) == 0x80) {
					return continuationByte & 0x3F;
				}

				// If we end up here, it’s not a continuation byte
				throw Error('Invalid continuation byte');
			}

			function decodeSymbol(strict) {
				var byte1;
				var byte2;
				var byte3;
				var byte4;
				var codePoint;

				if (byteIndex > byteCount) {
					throw Error('Invalid byte index');
				}

				if (byteIndex == byteCount) {
					return false;
				}

				// Read first byte
				byte1 = byteArray[byteIndex] & 0xFF;
				byteIndex++;

				// 1-byte sequence (no continuation bytes)
				if ((byte1 & 0x80) == 0) {
					return byte1;
				}

				// 2-byte sequence
				if ((byte1 & 0xE0) == 0xC0) {
					byte2 = readContinuationByte();
					codePoint = (byte1 & 0x1F) << 6 | byte2;
					if (codePoint >= 0x80) {
						return codePoint;
					} else {
						throw Error('Invalid continuation byte');
					}
				}

				// 3-byte sequence (may include unpaired surrogates)
				if ((byte1 & 0xF0) == 0xE0) {
					byte2 = readContinuationByte();
					byte3 = readContinuationByte();
					codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;
					if (codePoint >= 0x0800) {
						return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
					} else {
						throw Error('Invalid continuation byte');
					}
				}

				// 4-byte sequence
				if ((byte1 & 0xF8) == 0xF0) {
					byte2 = readContinuationByte();
					byte3 = readContinuationByte();
					byte4 = readContinuationByte();
					codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;
					if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
						return codePoint;
					}
				}

				throw Error('Invalid UTF-8 detected');
			}

			var byteArray;
			var byteCount;
			var byteIndex;
			function utf8decode(byteString, opts) {
				opts = opts || {};
				var strict = false !== opts.strict;

				byteArray = ucs2decode(byteString);
				byteCount = byteArray.length;
				byteIndex = 0;
				var codePoints = [];
				var tmp;
				while ((tmp = decodeSymbol(strict)) !== false) {
					codePoints.push(tmp);
				}
				return ucs2encode(codePoints);
			}

			/*--------------------------------------------------------------------------*/

			var utf8 = {
				'version': '2.1.2',
				'encode': utf8encode,
				'decode': utf8decode
			};

			// Some AMD build optimizers, like r.js, check for specific condition patterns
			// like the following:
			if (typeof undefined == 'function' && _typeof(undefined.amd) == 'object' && undefined.amd) {
				undefined(function () {
					return utf8;
				});
			} else if (freeExports && !freeExports.nodeType) {
				if (freeModule) {
					// in Node.js or RingoJS v0.8.0+
					freeModule.exports = utf8;
				} else {
					// in Narwhal or RingoJS v0.7.0-
					var object = {};
					var hasOwnProperty = object.hasOwnProperty;
					for (var key in utf8) {
						hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
					}
				}
			} else {
				// in Rhino or a web browser
				root.utf8 = utf8;
			}
		})(commonjsGlobal);
	});

	var utf8$1 = /*#__PURE__*/Object.freeze({
		default: utf8,
		__moduleExports: utf8
	});

	var base64Arraybuffer = createCommonjsModule(function (module, exports) {
	  /*
	   * base64-arraybuffer
	   * https://github.com/niklasvh/base64-arraybuffer
	   *
	   * Copyright (c) 2012 Niklas von Hertzen
	   * Licensed under the MIT license.
	   */
	  (function () {

	    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

	    // Use a lookup table to find the index.
	    var lookup = new Uint8Array(256);
	    for (var i = 0; i < chars.length; i++) {
	      lookup[chars.charCodeAt(i)] = i;
	    }

	    exports.encode = function (arraybuffer) {
	      var bytes = new Uint8Array(arraybuffer),
	          i,
	          len = bytes.length,
	          base64 = "";

	      for (i = 0; i < len; i += 3) {
	        base64 += chars[bytes[i] >> 2];
	        base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
	        base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
	        base64 += chars[bytes[i + 2] & 63];
	      }

	      if (len % 3 === 2) {
	        base64 = base64.substring(0, base64.length - 1) + "=";
	      } else if (len % 3 === 1) {
	        base64 = base64.substring(0, base64.length - 2) + "==";
	      }

	      return base64;
	    };

	    exports.decode = function (base64) {
	      var bufferLength = base64.length * 0.75,
	          len = base64.length,
	          i,
	          p = 0,
	          encoded1,
	          encoded2,
	          encoded3,
	          encoded4;

	      if (base64[base64.length - 1] === "=") {
	        bufferLength--;
	        if (base64[base64.length - 2] === "=") {
	          bufferLength--;
	        }
	      }

	      var arraybuffer = new ArrayBuffer(bufferLength),
	          bytes = new Uint8Array(arraybuffer);

	      for (i = 0; i < len; i += 4) {
	        encoded1 = lookup[base64.charCodeAt(i)];
	        encoded2 = lookup[base64.charCodeAt(i + 1)];
	        encoded3 = lookup[base64.charCodeAt(i + 2)];
	        encoded4 = lookup[base64.charCodeAt(i + 3)];

	        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
	        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
	        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
	      }

	      return arraybuffer;
	    };
	  })();
	});
	var base64Arraybuffer_1 = base64Arraybuffer.encode;
	var base64Arraybuffer_2 = base64Arraybuffer.decode;

	var base64Arraybuffer$1 = /*#__PURE__*/Object.freeze({
		default: base64Arraybuffer,
		__moduleExports: base64Arraybuffer,
		encode: base64Arraybuffer_1,
		decode: base64Arraybuffer_2
	});

	/**
	 * Create a blob builder even when vendor prefixes exist
	 */

	var BlobBuilder = commonjsGlobal.BlobBuilder || commonjsGlobal.WebKitBlobBuilder || commonjsGlobal.MSBlobBuilder || commonjsGlobal.MozBlobBuilder;

	/**
	 * Check if Blob constructor is supported
	 */

	var blobSupported = function () {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch (e) {
	    return false;
	  }
	}();

	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */

	var blobSupportsArrayBufferView = blobSupported && function () {
	  try {
	    var b = new Blob([new Uint8Array([1, 2])]);
	    return b.size === 2;
	  } catch (e) {
	    return false;
	  }
	}();

	/**
	 * Check if BlobBuilder is supported
	 */

	var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;

	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */

	function mapArrayBufferViews(ary) {
	  for (var i = 0; i < ary.length; i++) {
	    var chunk = ary[i];
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;

	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }

	      ary[i] = buf;
	    }
	  }
	}

	function BlobBuilderConstructor(ary, options) {
	  options = options || {};

	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary);

	  for (var i = 0; i < ary.length; i++) {
	    bb.append(ary[i]);
	  }

	  return options.type ? bb.getBlob(options.type) : bb.getBlob();
	}
	function BlobConstructor(ary, options) {
	  mapArrayBufferViews(ary);
	  return new Blob(ary, options || {});
	}
	var blob = function () {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? commonjsGlobal.Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	}();

	var blob$1 = /*#__PURE__*/Object.freeze({
		default: blob,
		__moduleExports: blob
	});

	var keys$2 = ( keys$1 && keys ) || keys$1;

	var hasBinary$1 = ( hasBinary2$1 && hasBinary2 ) || hasBinary2$1;

	var sliceBuffer = ( arraybuffer_slice$1 && arraybuffer_slice ) || arraybuffer_slice$1;

	var after$2 = ( after$1 && after_1 ) || after$1;

	var utf8$2 = ( utf8$1 && utf8 ) || utf8$1;

	var require$$0$3 = ( base64Arraybuffer$1 && base64Arraybuffer ) || base64Arraybuffer$1;

	var Blob$1 = ( blob$1 && blob ) || blob$1;

	var browser$2 = createCommonjsModule(function (module, exports) {
	  /**
	   * Module dependencies.
	   */

	  var base64encoder;
	  if (commonjsGlobal && commonjsGlobal.ArrayBuffer) {
	    base64encoder = require$$0$3;
	  }

	  /**
	   * Check if we are running an android browser. That requires us to use
	   * ArrayBuffer with polling transports...
	   *
	   * http://ghinda.net/jpeg-blob-ajax-android/
	   */

	  var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

	  /**
	   * Check if we are running in PhantomJS.
	   * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	   * https://github.com/ariya/phantomjs/issues/11395
	   * @type boolean
	   */
	  var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

	  /**
	   * When true, avoids using Blobs to encode payloads.
	   * @type boolean
	   */
	  var dontSendBlobs = isAndroid || isPhantomJS;

	  /**
	   * Current protocol version.
	   */

	  exports.protocol = 3;

	  /**
	   * Packet types.
	   */

	  var packets = exports.packets = {
	    open: 0 // non-ws
	    , close: 1 // non-ws
	    , ping: 2,
	    pong: 3,
	    message: 4,
	    upgrade: 5,
	    noop: 6
	  };

	  var packetslist = keys$2(packets);

	  /**
	   * Premade error packet.
	   */

	  var err = { type: 'error', data: 'parser error' };

	  /**
	   * Create a blob api even for blob builder when vendor prefixes exist
	   */

	  /**
	   * Encodes a packet.
	   *
	   *     <packet type id> [ <data> ]
	   *
	   * Example:
	   *
	   *     5hello world
	   *     3
	   *     4
	   *
	   * Binary is encoded in an identical principle
	   *
	   * @api private
	   */

	  exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	    if (typeof supportsBinary === 'function') {
	      callback = supportsBinary;
	      supportsBinary = false;
	    }

	    if (typeof utf8encode === 'function') {
	      callback = utf8encode;
	      utf8encode = null;
	    }

	    var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;

	    if (commonjsGlobal.ArrayBuffer && data instanceof ArrayBuffer) {
	      return encodeArrayBuffer(packet, supportsBinary, callback);
	    } else if (Blob$1 && data instanceof commonjsGlobal.Blob) {
	      return encodeBlob(packet, supportsBinary, callback);
	    }

	    // might be an object with { base64: true, data: dataAsBase64String }
	    if (data && data.base64) {
	      return encodeBase64Object(packet, callback);
	    }

	    // Sending data as a utf-8 string
	    var encoded = packets[packet.type];

	    // data fragment is optional
	    if (undefined !== packet.data) {
	      encoded += utf8encode ? utf8$2.encode(String(packet.data), { strict: false }) : String(packet.data);
	    }

	    return callback('' + encoded);
	  };

	  function encodeBase64Object(packet, callback) {
	    // packet data is an object { base64: true, data: dataAsBase64String }
	    var message = 'b' + exports.packets[packet.type] + packet.data.data;
	    return callback(message);
	  }

	  /**
	   * Encode packet helpers for binary types
	   */

	  function encodeArrayBuffer(packet, supportsBinary, callback) {
	    if (!supportsBinary) {
	      return exports.encodeBase64Packet(packet, callback);
	    }

	    var data = packet.data;
	    var contentArray = new Uint8Array(data);
	    var resultBuffer = new Uint8Array(1 + data.byteLength);

	    resultBuffer[0] = packets[packet.type];
	    for (var i = 0; i < contentArray.length; i++) {
	      resultBuffer[i + 1] = contentArray[i];
	    }

	    return callback(resultBuffer.buffer);
	  }

	  function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	    if (!supportsBinary) {
	      return exports.encodeBase64Packet(packet, callback);
	    }

	    var fr = new FileReader();
	    fr.onload = function () {
	      packet.data = fr.result;
	      exports.encodePacket(packet, supportsBinary, true, callback);
	    };
	    return fr.readAsArrayBuffer(packet.data);
	  }

	  function encodeBlob(packet, supportsBinary, callback) {
	    if (!supportsBinary) {
	      return exports.encodeBase64Packet(packet, callback);
	    }

	    if (dontSendBlobs) {
	      return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	    }

	    var length = new Uint8Array(1);
	    length[0] = packets[packet.type];
	    var blob = new Blob$1([length.buffer, packet.data]);

	    return callback(blob);
	  }

	  /**
	   * Encodes a packet with binary data in a base64 string
	   *
	   * @param {Object} packet, has `type` and `data`
	   * @return {String} base64 encoded message
	   */

	  exports.encodeBase64Packet = function (packet, callback) {
	    var message = 'b' + exports.packets[packet.type];
	    if (Blob$1 && packet.data instanceof commonjsGlobal.Blob) {
	      var fr = new FileReader();
	      fr.onload = function () {
	        var b64 = fr.result.split(',')[1];
	        callback(message + b64);
	      };
	      return fr.readAsDataURL(packet.data);
	    }

	    var b64data;
	    try {
	      b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	    } catch (e) {
	      // iPhone Safari doesn't let you apply with typed arrays
	      var typed = new Uint8Array(packet.data);
	      var basic = new Array(typed.length);
	      for (var i = 0; i < typed.length; i++) {
	        basic[i] = typed[i];
	      }
	      b64data = String.fromCharCode.apply(null, basic);
	    }
	    message += commonjsGlobal.btoa(b64data);
	    return callback(message);
	  };

	  /**
	   * Decodes a packet. Changes format to Blob if requested.
	   *
	   * @return {Object} with `type` and `data` (if any)
	   * @api private
	   */

	  exports.decodePacket = function (data, binaryType, utf8decode) {
	    if (data === undefined) {
	      return err;
	    }
	    // String data
	    if (typeof data === 'string') {
	      if (data.charAt(0) === 'b') {
	        return exports.decodeBase64Packet(data.substr(1), binaryType);
	      }

	      if (utf8decode) {
	        data = tryDecode(data);
	        if (data === false) {
	          return err;
	        }
	      }
	      var type = data.charAt(0);

	      if (Number(type) != type || !packetslist[type]) {
	        return err;
	      }

	      if (data.length > 1) {
	        return { type: packetslist[type], data: data.substring(1) };
	      } else {
	        return { type: packetslist[type] };
	      }
	    }

	    var asArray = new Uint8Array(data);
	    var type = asArray[0];
	    var rest = sliceBuffer(data, 1);
	    if (Blob$1 && binaryType === 'blob') {
	      rest = new Blob$1([rest]);
	    }
	    return { type: packetslist[type], data: rest };
	  };

	  function tryDecode(data) {
	    try {
	      data = utf8$2.decode(data, { strict: false });
	    } catch (e) {
	      return false;
	    }
	    return data;
	  }

	  /**
	   * Decodes a packet encoded in a base64 string
	   *
	   * @param {String} base64 encoded message
	   * @return {Object} with `type` and `data` (if any)
	   */

	  exports.decodeBase64Packet = function (msg, binaryType) {
	    var type = packetslist[msg.charAt(0)];
	    if (!base64encoder) {
	      return { type: type, data: { base64: true, data: msg.substr(1) } };
	    }

	    var data = base64encoder.decode(msg.substr(1));

	    if (binaryType === 'blob' && Blob$1) {
	      data = new Blob$1([data]);
	    }

	    return { type: type, data: data };
	  };

	  /**
	   * Encodes multiple messages (payload).
	   *
	   *     <length>:data
	   *
	   * Example:
	   *
	   *     11:hello world2:hi
	   *
	   * If any contents are binary, they will be encoded as base64 strings. Base64
	   * encoded strings are marked with a b before the length specifier
	   *
	   * @param {Array} packets
	   * @api private
	   */

	  exports.encodePayload = function (packets, supportsBinary, callback) {
	    if (typeof supportsBinary === 'function') {
	      callback = supportsBinary;
	      supportsBinary = null;
	    }

	    var isBinary = hasBinary$1(packets);

	    if (supportsBinary && isBinary) {
	      if (Blob$1 && !dontSendBlobs) {
	        return exports.encodePayloadAsBlob(packets, callback);
	      }

	      return exports.encodePayloadAsArrayBuffer(packets, callback);
	    }

	    if (!packets.length) {
	      return callback('0:');
	    }

	    function setLengthHeader(message) {
	      return message.length + ':' + message;
	    }

	    function encodeOne(packet, doneCallback) {
	      exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function (message) {
	        doneCallback(null, setLengthHeader(message));
	      });
	    }

	    map(packets, encodeOne, function (err, results) {
	      return callback(results.join(''));
	    });
	  };

	  /**
	   * Async array map using after
	   */

	  function map(ary, each, done) {
	    var result = new Array(ary.length);
	    var next = after$2(ary.length, done);

	    var eachWithIndex = function eachWithIndex(i, el, cb) {
	      each(el, function (error, msg) {
	        result[i] = msg;
	        cb(error, result);
	      });
	    };

	    for (var i = 0; i < ary.length; i++) {
	      eachWithIndex(i, ary[i], next);
	    }
	  }

	  /*
	   * Decodes data when a payload is maybe expected. Possible binary contents are
	   * decoded from their base64 representation
	   *
	   * @param {String} data, callback method
	   * @api public
	   */

	  exports.decodePayload = function (data, binaryType, callback) {
	    if (typeof data !== 'string') {
	      return exports.decodePayloadAsBinary(data, binaryType, callback);
	    }

	    if (typeof binaryType === 'function') {
	      callback = binaryType;
	      binaryType = null;
	    }

	    var packet;
	    if (data === '') {
	      // parser error - ignoring payload
	      return callback(err, 0, 1);
	    }

	    var length = '',
	        n,
	        msg;

	    for (var i = 0, l = data.length; i < l; i++) {
	      var chr = data.charAt(i);

	      if (chr !== ':') {
	        length += chr;
	        continue;
	      }

	      if (length === '' || length != (n = Number(length))) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      msg = data.substr(i + 1, n);

	      if (length != msg.length) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      if (msg.length) {
	        packet = exports.decodePacket(msg, binaryType, false);

	        if (err.type === packet.type && err.data === packet.data) {
	          // parser error in individual packet - ignoring payload
	          return callback(err, 0, 1);
	        }

	        var ret = callback(packet, i + n, l);
	        if (false === ret) return;
	      }

	      // advance cursor
	      i += n;
	      length = '';
	    }

	    if (length !== '') {
	      // parser error - ignoring payload
	      return callback(err, 0, 1);
	    }
	  };

	  /**
	   * Encodes multiple messages (payload) as binary.
	   *
	   * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	   * 255><data>
	   *
	   * Example:
	   * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	   *
	   * @param {Array} packets
	   * @return {ArrayBuffer} encoded payload
	   * @api private
	   */

	  exports.encodePayloadAsArrayBuffer = function (packets, callback) {
	    if (!packets.length) {
	      return callback(new ArrayBuffer(0));
	    }

	    function encodeOne(packet, doneCallback) {
	      exports.encodePacket(packet, true, true, function (data) {
	        return doneCallback(null, data);
	      });
	    }

	    map(packets, encodeOne, function (err, encodedPackets) {
	      var totalLength = encodedPackets.reduce(function (acc, p) {
	        var len;
	        if (typeof p === 'string') {
	          len = p.length;
	        } else {
	          len = p.byteLength;
	        }
	        return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	      }, 0);

	      var resultArray = new Uint8Array(totalLength);

	      var bufferIndex = 0;
	      encodedPackets.forEach(function (p) {
	        var isString = typeof p === 'string';
	        var ab = p;
	        if (isString) {
	          var view = new Uint8Array(p.length);
	          for (var i = 0; i < p.length; i++) {
	            view[i] = p.charCodeAt(i);
	          }
	          ab = view.buffer;
	        }

	        if (isString) {
	          // not true binary
	          resultArray[bufferIndex++] = 0;
	        } else {
	          // true binary
	          resultArray[bufferIndex++] = 1;
	        }

	        var lenStr = ab.byteLength.toString();
	        for (var i = 0; i < lenStr.length; i++) {
	          resultArray[bufferIndex++] = parseInt(lenStr[i]);
	        }
	        resultArray[bufferIndex++] = 255;

	        var view = new Uint8Array(ab);
	        for (var i = 0; i < view.length; i++) {
	          resultArray[bufferIndex++] = view[i];
	        }
	      });

	      return callback(resultArray.buffer);
	    });
	  };

	  /**
	   * Encode as Blob
	   */

	  exports.encodePayloadAsBlob = function (packets, callback) {
	    function encodeOne(packet, doneCallback) {
	      exports.encodePacket(packet, true, true, function (encoded) {
	        var binaryIdentifier = new Uint8Array(1);
	        binaryIdentifier[0] = 1;
	        if (typeof encoded === 'string') {
	          var view = new Uint8Array(encoded.length);
	          for (var i = 0; i < encoded.length; i++) {
	            view[i] = encoded.charCodeAt(i);
	          }
	          encoded = view.buffer;
	          binaryIdentifier[0] = 0;
	        }

	        var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;

	        var lenStr = len.toString();
	        var lengthAry = new Uint8Array(lenStr.length + 1);
	        for (var i = 0; i < lenStr.length; i++) {
	          lengthAry[i] = parseInt(lenStr[i]);
	        }
	        lengthAry[lenStr.length] = 255;

	        if (Blob$1) {
	          var blob = new Blob$1([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	          doneCallback(null, blob);
	        }
	      });
	    }

	    map(packets, encodeOne, function (err, results) {
	      return callback(new Blob$1(results));
	    });
	  };

	  /*
	   * Decodes data when a payload is maybe expected. Strings are decoded by
	   * interpreting each byte as a key code for entries marked to start with 0. See
	   * description of encodePayloadAsBinary
	   *
	   * @param {ArrayBuffer} data, callback method
	   * @api public
	   */

	  exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	    if (typeof binaryType === 'function') {
	      callback = binaryType;
	      binaryType = null;
	    }

	    var bufferTail = data;
	    var buffers = [];

	    while (bufferTail.byteLength > 0) {
	      var tailArray = new Uint8Array(bufferTail);
	      var isString = tailArray[0] === 0;
	      var msgLength = '';

	      for (var i = 1;; i++) {
	        if (tailArray[i] === 255) break;

	        // 310 = char length of Number.MAX_VALUE
	        if (msgLength.length > 310) {
	          return callback(err, 0, 1);
	        }

	        msgLength += tailArray[i];
	      }

	      bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
	      msgLength = parseInt(msgLength);

	      var msg = sliceBuffer(bufferTail, 0, msgLength);
	      if (isString) {
	        try {
	          msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	        } catch (e) {
	          // iPhone Safari doesn't let you apply to typed arrays
	          var typed = new Uint8Array(msg);
	          msg = '';
	          for (var i = 0; i < typed.length; i++) {
	            msg += String.fromCharCode(typed[i]);
	          }
	        }
	      }

	      buffers.push(msg);
	      bufferTail = sliceBuffer(bufferTail, msgLength);
	    }

	    var total = buffers.length;
	    buffers.forEach(function (buffer, i) {
	      callback(exports.decodePacket(buffer, binaryType, true), i, total);
	    });
	  };
	});
	var browser_1$1 = browser$2.protocol;
	var browser_2$1 = browser$2.packets;
	var browser_3$1 = browser$2.encodePacket;
	var browser_4$1 = browser$2.encodeBase64Packet;
	var browser_5$1 = browser$2.decodePacket;
	var browser_6$1 = browser$2.decodeBase64Packet;
	var browser_7$1 = browser$2.encodePayload;
	var browser_8 = browser$2.decodePayload;
	var browser_9 = browser$2.encodePayloadAsArrayBuffer;
	var browser_10 = browser$2.encodePayloadAsBlob;
	var browser_11 = browser$2.decodePayloadAsBinary;

	var browser$3 = /*#__PURE__*/Object.freeze({
		default: browser$2,
		__moduleExports: browser$2,
		protocol: browser_1$1,
		packets: browser_2$1,
		encodePacket: browser_3$1,
		encodeBase64Packet: browser_4$1,
		decodePacket: browser_5$1,
		decodeBase64Packet: browser_6$1,
		encodePayload: browser_7$1,
		decodePayload: browser_8,
		encodePayloadAsArrayBuffer: browser_9,
		encodePayloadAsBlob: browser_10,
		decodePayloadAsBinary: browser_11
	});

	var parser = ( browser$3 && browser$2 ) || browser$3;

	/**
	 * Module dependencies.
	 */

	/**
	 * Module exports.
	 */

	var transport = Transport;

	/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */

	function Transport(opts) {
	  this.path = opts.path;
	  this.hostname = opts.hostname;
	  this.port = opts.port;
	  this.secure = opts.secure;
	  this.query = opts.query;
	  this.timestampParam = opts.timestampParam;
	  this.timestampRequests = opts.timestampRequests;
	  this.readyState = '';
	  this.agent = opts.agent || false;
	  this.socket = opts.socket;
	  this.enablesXDR = opts.enablesXDR;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	  this.forceNode = opts.forceNode;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;
	  this.localAddress = opts.localAddress;
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Transport.prototype);

	/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */

	Transport.prototype.onError = function (msg, desc) {
	  var err = new Error(msg);
	  err.type = 'TransportError';
	  err.description = desc;
	  this.emit('error', err);
	  return this;
	};

	/**
	 * Opens the transport.
	 *
	 * @api public
	 */

	Transport.prototype.open = function () {
	  if ('closed' === this.readyState || '' === this.readyState) {
	    this.readyState = 'opening';
	    this.doOpen();
	  }

	  return this;
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	Transport.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.doClose();
	    this.onClose();
	  }

	  return this;
	};

	/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */

	Transport.prototype.send = function (packets) {
	  if ('open' === this.readyState) {
	    this.write(packets);
	  } else {
	    throw new Error('Transport not open');
	  }
	};

	/**
	 * Called upon open
	 *
	 * @api private
	 */

	Transport.prototype.onOpen = function () {
	  this.readyState = 'open';
	  this.writable = true;
	  this.emit('open');
	};

	/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */

	Transport.prototype.onData = function (data) {
	  var packet = parser.decodePacket(data, this.socket.binaryType);
	  this.onPacket(packet);
	};

	/**
	 * Called with a decoded packet.
	 */

	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon close.
	 *
	 * @api private
	 */

	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};

	var transport$1 = /*#__PURE__*/Object.freeze({
		default: transport,
		__moduleExports: transport
	});

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	var encode = function encode(obj) {
	  var str = '';

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }

	  return str;
	};

	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */

	var decode = function decode(qs) {
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};

	var parseqs = {
	  encode: encode,
	  decode: decode
	};

	var parseqs$1 = /*#__PURE__*/Object.freeze({
		default: parseqs,
		__moduleExports: parseqs,
		encode: encode,
		decode: decode
	});

	var componentInherit = function componentInherit(a, b) {
	  var fn = function fn() {};
	  fn.prototype = b.prototype;
	  a.prototype = new fn();
	  a.prototype.constructor = a;
	};

	var componentInherit$1 = /*#__PURE__*/Object.freeze({
		default: componentInherit,
		__moduleExports: componentInherit
	});

	var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
	    length = 64,
	    map = {},
	    seed = 0,
	    i = 0,
	    prev;

	/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */
	function encode$1(num) {
	  var encoded = '';

	  do {
	    encoded = alphabet[num % length] + encoded;
	    num = Math.floor(num / length);
	  } while (num > 0);

	  return encoded;
	}

	/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */
	function decode$1(str) {
	  var decoded = 0;

	  for (i = 0; i < str.length; i++) {
	    decoded = decoded * length + map[str.charAt(i)];
	  }

	  return decoded;
	}

	/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */
	function yeast() {
	  var now = encode$1(+new Date());

	  if (now !== prev) return seed = 0, prev = now;
	  return now + '.' + encode$1(seed++);
	}

	//
	// Map each character to its index.
	//
	for (; i < length; i++) {
	  map[alphabet[i]] = i;
	} //
	// Expose the `yeast`, `encode` and `decode` functions.
	//
	yeast.encode = encode$1;
	yeast.decode = decode$1;
	var yeast_1 = yeast;

	var yeast$1 = /*#__PURE__*/Object.freeze({
		default: yeast_1,
		__moduleExports: yeast_1
	});

	var Transport$1 = ( transport$1 && transport ) || transport$1;

	var parseqs$2 = ( parseqs$1 && parseqs ) || parseqs$1;

	var inherit = ( componentInherit$1 && componentInherit ) || componentInherit$1;

	var yeast$2 = ( yeast$1 && yeast_1 ) || yeast$1;

	var require$$1 = ( xmlhttprequest$1 && xmlhttprequest ) || xmlhttprequest$1;

	/**
	 * Module dependencies.
	 */

	var debug$3 = require$$0$2('engine.io-client:polling');

	/**
	 * Module exports.
	 */

	var polling = Polling;

	/**
	 * Is XHR2 supported?
	 */

	var hasXHR2 = function () {
	  var XMLHttpRequest = require$$1;
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	}();

	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */

	function Polling(opts) {
	  var forceBase64 = opts && opts.forceBase64;
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport$1.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(Polling, Transport$1);

	/**
	 * Transport name.
	 */

	Polling.prototype.name = 'polling';

	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */

	Polling.prototype.doOpen = function () {
	  this.poll();
	};

	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */

	Polling.prototype.pause = function (onPause) {
	  var self = this;

	  this.readyState = 'pausing';

	  function pause() {
	    debug$3('paused');
	    self.readyState = 'paused';
	    onPause();
	  }

	  if (this.polling || !this.writable) {
	    var total = 0;

	    if (this.polling) {
	      debug$3('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function () {
	        debug$3('pre-pause polling complete');
	        --total || pause();
	      });
	    }

	    if (!this.writable) {
	      debug$3('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function () {
	        debug$3('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};

	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */

	Polling.prototype.poll = function () {
	  debug$3('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};

	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */

	Polling.prototype.onData = function (data) {
	  var self = this;
	  debug$3('polling got data %s', data);
	  var callback = function callback(packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' === self.readyState) {
	      self.onOpen();
	    }

	    // if its a close packet, we close the ongoing requests
	    if ('close' === packet.type) {
	      self.onClose();
	      return false;
	    }

	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };

	  // decode payload
	  parser.decodePayload(data, this.socket.binaryType, callback);

	  // if an event did not trigger closing
	  if ('closed' !== this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');

	    if ('open' === this.readyState) {
	      this.poll();
	    } else {
	      debug$3('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};

	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */

	Polling.prototype.doClose = function () {
	  var self = this;

	  function close() {
	    debug$3('writing close packet');
	    self.write([{ type: 'close' }]);
	  }

	  if ('open' === this.readyState) {
	    debug$3('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug$3('transport not open - deferring close');
	    this.once('open', close);
	  }
	};

	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */

	Polling.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;
	  var callbackfn = function callbackfn() {
	    self.writable = true;
	    self.emit('drain');
	  };

	  parser.encodePayload(packets, this.supportsBinary, function (data) {
	    self.doWrite(data, callbackfn);
	  });
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	Polling.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';

	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = yeast$2();
	  }

	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }

	  query = parseqs$2.encode(query);

	  // avoid port if default for schema
	  if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
	    port = ':' + this.port;
	  }

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

	var polling$1 = /*#__PURE__*/Object.freeze({
		default: polling,
		__moduleExports: polling
	});

	var Polling$1 = ( polling$1 && polling ) || polling$1;

	/**
	 * Module requirements.
	 */

	var debug$4 = require$$0$2('engine.io-client:polling-xhr');

	/**
	 * Module exports.
	 */

	var pollingXhr = XHR;
	var Request_1 = Request;

	/**
	 * Empty function
	 */

	function empty() {}

	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function XHR(opts) {
	  Polling$1.call(this, opts);
	  this.requestTimeout = opts.requestTimeout;
	  this.extraHeaders = opts.extraHeaders;

	  if (commonjsGlobal.location) {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    this.xd = opts.hostname !== commonjsGlobal.location.hostname || port !== opts.port;
	    this.xs = opts.secure !== isSSL;
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(XHR, Polling$1);

	/**
	 * XHR supports binary
	 */

	XHR.prototype.supportsBinary = true;

	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */

	XHR.prototype.request = function (opts) {
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  opts.requestTimeout = this.requestTimeout;

	  // other options for Node.js client
	  opts.extraHeaders = this.extraHeaders;

	  return new Request(opts);
	};

	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */

	XHR.prototype.doWrite = function (data, fn) {
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function (err) {
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	XHR.prototype.doPoll = function () {
	  debug$4('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function (data) {
	    self.onData(data);
	  });
	  req.on('error', function (err) {
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};

	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Request(opts) {
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined !== opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;
	  this.requestTimeout = opts.requestTimeout;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;

	  this.create();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Request.prototype);

	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */

	Request.prototype.create = function () {
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  var xhr = this.xhr = new require$$1(opts);
	  var self = this;

	  try {
	    debug$4('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    try {
	      if (this.extraHeaders) {
	        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
	        for (var i in this.extraHeaders) {
	          if (this.extraHeaders.hasOwnProperty(i)) {
	            xhr.setRequestHeader(i, this.extraHeaders[i]);
	          }
	        }
	      }
	    } catch (e) {}

	    if ('POST' === this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }

	    try {
	      xhr.setRequestHeader('Accept', '*/*');
	    } catch (e) {}

	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = true;
	    }

	    if (this.requestTimeout) {
	      xhr.timeout = this.requestTimeout;
	    }

	    if (this.hasXDR()) {
	      xhr.onload = function () {
	        self.onLoad();
	      };
	      xhr.onerror = function () {
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function () {
	        if (xhr.readyState === 2) {
	          try {
	            var contentType = xhr.getResponseHeader('Content-Type');
	            if (self.supportsBinary && contentType === 'application/octet-stream') {
	              xhr.responseType = 'arraybuffer';
	            }
	          } catch (e) {}
	        }
	        if (4 !== xhr.readyState) return;
	        if (200 === xhr.status || 1223 === xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function () {
	            self.onError(xhr.status);
	          }, 0);
	        }
	      };
	    }

	    debug$4('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function () {
	      self.onError(e);
	    }, 0);
	    return;
	  }

	  if (commonjsGlobal.document) {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};

	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */

	Request.prototype.onSuccess = function () {
	  this.emit('success');
	  this.cleanup();
	};

	/**
	 * Called if we have data.
	 *
	 * @api private
	 */

	Request.prototype.onData = function (data) {
	  this.emit('data', data);
	  this.onSuccess();
	};

	/**
	 * Called upon error.
	 *
	 * @api private
	 */

	Request.prototype.onError = function (err) {
	  this.emit('error', err);
	  this.cleanup(true);
	};

	/**
	 * Cleans up house.
	 *
	 * @api private
	 */

	Request.prototype.cleanup = function (fromError) {
	  if ('undefined' === typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty;
	  } else {
	    this.xhr.onreadystatechange = empty;
	  }

	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch (e) {}
	  }

	  if (commonjsGlobal.document) {
	    delete Request.requests[this.index];
	  }

	  this.xhr = null;
	};

	/**
	 * Called upon load.
	 *
	 * @api private
	 */

	Request.prototype.onLoad = function () {
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type');
	    } catch (e) {}
	    if (contentType === 'application/octet-stream') {
	      data = this.xhr.response || this.xhr.responseText;
	    } else {
	      data = this.xhr.responseText;
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};

	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */

	Request.prototype.hasXDR = function () {
	  return 'undefined' !== typeof commonjsGlobal.XDomainRequest && !this.xs && this.enablesXDR;
	};

	/**
	 * Aborts the request.
	 *
	 * @api public
	 */

	Request.prototype.abort = function () {
	  this.cleanup();
	};

	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */

	Request.requestsCount = 0;
	Request.requests = {};

	if (commonjsGlobal.document) {
	  if (commonjsGlobal.attachEvent) {
	    commonjsGlobal.attachEvent('onunload', unloadHandler);
	  } else if (commonjsGlobal.addEventListener) {
	    commonjsGlobal.addEventListener('beforeunload', unloadHandler, false);
	  }
	}

	function unloadHandler() {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}
	pollingXhr.Request = Request_1;

	var pollingXhr$1 = /*#__PURE__*/Object.freeze({
		default: pollingXhr,
		__moduleExports: pollingXhr,
		Request: Request_1
	});

	/**
	 * Module requirements.
	 */

	/**
	 * Module exports.
	 */

	var pollingJsonp = JSONPPolling;

	/**
	 * Cached regular expressions.
	 */

	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;

	/**
	 * Global JSONP callbacks.
	 */

	var callbacks;

	/**
	 * Noop.
	 */

	function empty$1() {}

	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */

	function JSONPPolling(opts) {
	  Polling$1.call(this, opts);

	  this.query = this.query || {};

	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    if (!commonjsGlobal.___eio) commonjsGlobal.___eio = [];
	    callbacks = commonjsGlobal.___eio;
	  }

	  // callback identifier
	  this.index = callbacks.length;

	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });

	  // append to query string
	  this.query.j = this.index;

	  // prevent spurious errors from being emitted when the window is unloaded
	  if (commonjsGlobal.document && commonjsGlobal.addEventListener) {
	    commonjsGlobal.addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty$1;
	    }, false);
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(JSONPPolling, Polling$1);

	/*
	 * JSONP only supports binary as base64 encoded strings
	 */

	JSONPPolling.prototype.supportsBinary = false;

	/**
	 * Closes the socket.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }

	  Polling$1.prototype.doClose.call(this);
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');

	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function (e) {
	    self.onError('jsonp poll error', e);
	  };

	  var insertAt = document.getElementsByTagName('script')[0];
	  if (insertAt) {
	    insertAt.parentNode.insertBefore(script, insertAt);
	  } else {
	    (document.head || document.body).appendChild(script);
	  }
	  this.script = script;

	  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};

	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */

	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;

	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;

	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);

	    this.form = form;
	    this.area = area;
	  }

	  this.form.action = this.uri();

	  function complete() {
	    initIframe();
	    fn();
	  }

	  function initIframe() {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }

	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }

	    iframe.id = self.iframeId;

	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }

	  initIframe();

	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');

	  try {
	    this.form.submit();
	  } catch (e) {}

	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function () {
	      if (self.iframe.readyState === 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};

	var pollingJsonp$1 = /*#__PURE__*/Object.freeze({
		default: pollingJsonp,
		__moduleExports: pollingJsonp
	});

	var empty$2 = {};

	var empty$3 = /*#__PURE__*/Object.freeze({
		default: empty$2
	});

	var require$$1$1 = ( empty$3 && empty$2 ) || empty$3;

	/**
	 * Module dependencies.
	 */

	var debug$5 = require$$0$2('engine.io-client:websocket');
	var BrowserWebSocket = commonjsGlobal.WebSocket || commonjsGlobal.MozWebSocket;
	var NodeWebSocket;
	if (typeof window === 'undefined') {
	  try {
	    NodeWebSocket = require$$1$1;
	  } catch (e) {}
	}

	/**
	 * Get either the `WebSocket` or `MozWebSocket` globals
	 * in the browser or try to resolve WebSocket-compatible
	 * interface exposed by `ws` for Node-like environment.
	 */

	var WebSocket = BrowserWebSocket;
	if (!WebSocket && typeof window === 'undefined') {
	  WebSocket = NodeWebSocket;
	}

	/**
	 * Module exports.
	 */

	var websocket = WS;

	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */

	function WS(opts) {
	  var forceBase64 = opts && opts.forceBase64;
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  this.perMessageDeflate = opts.perMessageDeflate;
	  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
	  this.protocols = opts.protocols;
	  if (!this.usingBrowserWebSocket) {
	    WebSocket = NodeWebSocket;
	  }
	  Transport$1.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(WS, Transport$1);

	/**
	 * Transport name.
	 *
	 * @api public
	 */

	WS.prototype.name = 'websocket';

	/*
	 * WebSockets support binary
	 */

	WS.prototype.supportsBinary = true;

	/**
	 * Opens socket.
	 *
	 * @api private
	 */

	WS.prototype.doOpen = function () {
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }

	  var uri = this.uri();
	  var protocols = this.protocols;
	  var opts = {
	    agent: this.agent,
	    perMessageDeflate: this.perMessageDeflate
	  };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  if (this.extraHeaders) {
	    opts.headers = this.extraHeaders;
	  }
	  if (this.localAddress) {
	    opts.localAddress = this.localAddress;
	  }

	  try {
	    this.ws = this.usingBrowserWebSocket ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
	  } catch (err) {
	    return this.emit('error', err);
	  }

	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }

	  if (this.ws.supports && this.ws.supports.binary) {
	    this.supportsBinary = true;
	    this.ws.binaryType = 'nodebuffer';
	  } else {
	    this.ws.binaryType = 'arraybuffer';
	  }

	  this.addEventListeners();
	};

	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */

	WS.prototype.addEventListeners = function () {
	  var self = this;

	  this.ws.onopen = function () {
	    self.onOpen();
	  };
	  this.ws.onclose = function () {
	    self.onClose();
	  };
	  this.ws.onmessage = function (ev) {
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function (e) {
	    self.onError('websocket error', e);
	  };
	};

	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */

	WS.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;

	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  var total = packets.length;
	  for (var i = 0, l = total; i < l; i++) {
	    (function (packet) {
	      parser.encodePacket(packet, self.supportsBinary, function (data) {
	        if (!self.usingBrowserWebSocket) {
	          // always create a new object (GH-437)
	          var opts = {};
	          if (packet.options) {
	            opts.compress = packet.options.compress;
	          }

	          if (self.perMessageDeflate) {
	            var len = 'string' === typeof data ? commonjsGlobal.Buffer.byteLength(data) : data.length;
	            if (len < self.perMessageDeflate.threshold) {
	              opts.compress = false;
	            }
	          }
	        }

	        // Sometimes the websocket has already been closed but the browser didn't
	        // have a chance of informing us about it yet, in that case send will
	        // throw an error
	        try {
	          if (self.usingBrowserWebSocket) {
	            // TypeError is thrown when passing the second argument on Safari
	            self.ws.send(data);
	          } else {
	            self.ws.send(data, opts);
	          }
	        } catch (e) {
	          debug$5('websocket closed before onclose event');
	        }

	        --total || done();
	      });
	    })(packets[i]);
	  }

	  function done() {
	    self.emit('flush');

	    // fake drain
	    // defer to next tick to allow Socket to clear writeBuffer
	    setTimeout(function () {
	      self.writable = true;
	      self.emit('drain');
	    }, 0);
	  }
	};

	/**
	 * Called upon close
	 *
	 * @api private
	 */

	WS.prototype.onClose = function () {
	  Transport$1.prototype.onClose.call(this);
	};

	/**
	 * Closes socket.
	 *
	 * @api private
	 */

	WS.prototype.doClose = function () {
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	WS.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';

	  // avoid port if default for schema
	  if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
	    port = ':' + this.port;
	  }

	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = yeast$2();
	  }

	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }

	  query = parseqs$2.encode(query);

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */

	WS.prototype.check = function () {
	  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
	};

	var websocket$1 = /*#__PURE__*/Object.freeze({
		default: websocket,
		__moduleExports: websocket
	});

	var XHR$1 = ( pollingXhr$1 && pollingXhr ) || pollingXhr$1;

	var JSONP = ( pollingJsonp$1 && pollingJsonp ) || pollingJsonp$1;

	var websocket$2 = ( websocket$1 && websocket ) || websocket$1;

	/**
	 * Module dependencies
	 */

	/**
	 * Export transports.
	 */

	var polling_1 = polling$2;
	var websocket_1 = websocket$2;

	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */

	function polling$2(opts) {
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;

	  if (commonjsGlobal.location) {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    xd = opts.hostname !== location.hostname || port !== opts.port;
	    xs = opts.secure !== isSSL;
	  }

	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new require$$1(opts);

	  if ('open' in xhr && !opts.forceJSONP) {
	    return new XHR$1(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new JSONP(opts);
	  }
	}

	var transports = {
	  polling: polling_1,
	  websocket: websocket_1
	};

	var transports$1 = /*#__PURE__*/Object.freeze({
		default: transports,
		__moduleExports: transports,
		polling: polling_1,
		websocket: websocket_1
	});

	var indexOf = [].indexOf;

	var indexof = function indexof(arr, obj) {
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

	var indexof$1 = /*#__PURE__*/Object.freeze({
		default: indexof,
		__moduleExports: indexof
	});

	var transports$2 = ( transports$1 && transports ) || transports$1;

	var index = ( indexof$1 && indexof ) || indexof$1;

	/**
	 * Module dependencies.
	 */

	var debug$6 = require$$0$2('engine.io-client:socket');

	/**
	 * Module exports.
	 */

	var socket = Socket;

	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */

	function Socket(uri, opts) {
	  if (!(this instanceof Socket)) return new Socket(uri, opts);

	  opts = opts || {};

	  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {
	    opts = uri;
	    uri = null;
	  }

	  if (uri) {
	    uri = parseuri$2(uri);
	    opts.hostname = uri.host;
	    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  } else if (opts.host) {
	    opts.hostname = parseuri$2(opts.host).host;
	  }

	  this.secure = null != opts.secure ? opts.secure : commonjsGlobal.location && 'https:' === location.protocol;

	  if (opts.hostname && !opts.port) {
	    // if no port is specified manually, use the protocol default
	    opts.port = this.secure ? '443' : '80';
	  }

	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname || (commonjsGlobal.location ? location.hostname : 'localhost');
	  this.port = opts.port || (commonjsGlobal.location && location.port ? location.port : this.secure ? 443 : 80);
	  this.query = opts.query || {};
	  if ('string' === typeof this.query) this.query = parseqs$2.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.transportOptions = opts.transportOptions || {};
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.prevBufferLen = 0;
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
	  this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;

	  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
	  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
	    this.perMessageDeflate.threshold = 1024;
	  }

	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
	  this.forceNode = !!opts.forceNode;

	  // other options for Node.js client
	  var freeGlobal = _typeof(commonjsGlobal) === 'object' && commonjsGlobal;
	  if (freeGlobal.global === freeGlobal) {
	    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
	      this.extraHeaders = opts.extraHeaders;
	    }

	    if (opts.localAddress) {
	      this.localAddress = opts.localAddress;
	    }
	  }

	  // set on handshake
	  this.id = null;
	  this.upgrades = null;
	  this.pingInterval = null;
	  this.pingTimeout = null;

	  // set on heartbeat
	  this.pingIntervalTimer = null;
	  this.pingTimeoutTimer = null;

	  this.open();
	}

	Socket.priorWebsocketSuccess = false;

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	Socket.protocol = parser.protocol; // this is an int

	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */

	Socket.Socket = Socket;
	Socket.Transport = Transport$1;
	Socket.transports = transports$2;
	Socket.parser = parser;

	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */

	Socket.prototype.createTransport = function (name) {
	  debug$6('creating transport "%s"', name);
	  var query = clone(this.query);

	  // append engine.io protocol identifier
	  query.EIO = parser.protocol;

	  // transport name
	  query.transport = name;

	  // per-transport options
	  var options = this.transportOptions[name] || {};

	  // session id if we already have one
	  if (this.id) query.sid = this.id;

	  var transport = new transports$2[name]({
	    query: query,
	    socket: this,
	    agent: options.agent || this.agent,
	    hostname: options.hostname || this.hostname,
	    port: options.port || this.port,
	    secure: options.secure || this.secure,
	    path: options.path || this.path,
	    forceJSONP: options.forceJSONP || this.forceJSONP,
	    jsonp: options.jsonp || this.jsonp,
	    forceBase64: options.forceBase64 || this.forceBase64,
	    enablesXDR: options.enablesXDR || this.enablesXDR,
	    timestampRequests: options.timestampRequests || this.timestampRequests,
	    timestampParam: options.timestampParam || this.timestampParam,
	    policyPort: options.policyPort || this.policyPort,
	    pfx: options.pfx || this.pfx,
	    key: options.key || this.key,
	    passphrase: options.passphrase || this.passphrase,
	    cert: options.cert || this.cert,
	    ca: options.ca || this.ca,
	    ciphers: options.ciphers || this.ciphers,
	    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
	    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
	    extraHeaders: options.extraHeaders || this.extraHeaders,
	    forceNode: options.forceNode || this.forceNode,
	    localAddress: options.localAddress || this.localAddress,
	    requestTimeout: options.requestTimeout || this.requestTimeout,
	    protocols: options.protocols || void 0
	  });

	  return transport;
	};

	function clone(obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}

	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
	    transport = 'websocket';
	  } else if (0 === this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function () {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';

	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }

	  transport.open();
	  this.setTransport(transport);
	};

	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */

	Socket.prototype.setTransport = function (transport) {
	  debug$6('setting transport %s', transport.name);
	  var self = this;

	  if (this.transport) {
	    debug$6('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }

	  // set up transport
	  this.transport = transport;

	  // set up transport listeners
	  transport.on('drain', function () {
	    self.onDrain();
	  }).on('packet', function (packet) {
	    self.onPacket(packet);
	  }).on('error', function (e) {
	    self.onError(e);
	  }).on('close', function () {
	    self.onClose('transport close');
	  });
	};

	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */

	Socket.prototype.probe = function (name) {
	  debug$6('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 });
	  var failed = false;
	  var self = this;

	  Socket.priorWebsocketSuccess = false;

	  function onTransportOpen() {
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;

	    debug$6('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' === msg.type && 'probe' === msg.data) {
	        debug$6('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

	        debug$6('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' === self.readyState) return;
	          debug$6('changing transport and sending upgrade packet');

	          cleanup();

	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug$6('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }

	  function freezeTransport() {
	    if (failed) return;

	    // Any callback called by transport should be ignored since now
	    failed = true;

	    cleanup();

	    transport.close();
	    transport = null;
	  }

	  // Handle any error that happens while probing
	  function onerror(err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;

	    freezeTransport();

	    debug$6('probe transport "%s" failed because of error: %s', name, err);

	    self.emit('upgradeError', error);
	  }

	  function onTransportClose() {
	    onerror('transport closed');
	  }

	  // When the socket is closed while we're probing
	  function onclose() {
	    onerror('socket closed');
	  }

	  // When the socket is upgraded while we're probing
	  function onupgrade(to) {
	    if (transport && to.name !== transport.name) {
	      debug$6('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }

	  // Remove all listeners on the transport and on self
	  function cleanup() {
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }

	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);

	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);

	  transport.open();
	};

	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */

	Socket.prototype.onOpen = function () {
	  debug$6('socket open');
	  this.readyState = 'open';
	  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
	  this.emit('open');
	  this.flush();

	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
	    debug$6('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};

	/**
	 * Handles a packet.
	 *
	 * @api private
	 */

	Socket.prototype.onPacket = function (packet) {
	  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
	    debug$6('socket receive: type "%s", data "%s"', packet.type, packet.data);

	    this.emit('packet', packet);

	    // Socket is live - any packet counts
	    this.emit('heartbeat');

	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(JSON.parse(packet.data));
	        break;

	      case 'pong':
	        this.setPing();
	        this.emit('pong');
	        break;

	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.onError(err);
	        break;

	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug$6('packet received with socket readyState "%s"', this.readyState);
	  }
	};

	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */

	Socket.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if ('closed' === this.readyState) return;
	  this.setPing();

	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};

	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */

	Socket.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' === self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || self.pingInterval + self.pingTimeout);
	};

	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */

	Socket.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug$6('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};

	/**
	* Sends a ping packet.
	*
	* @api private
	*/

	Socket.prototype.ping = function () {
	  var self = this;
	  this.sendPacket('ping', function () {
	    self.emit('ping');
	  });
	};

	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */

	Socket.prototype.onDrain = function () {
	  this.writeBuffer.splice(0, this.prevBufferLen);

	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;

	  if (0 === this.writeBuffer.length) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};

	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */

	Socket.prototype.flush = function () {
	  if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
	    debug$6('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};

	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @param {Object} options.
	 * @return {Socket} for chaining.
	 * @api public
	 */

	Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
	  this.sendPacket('message', msg, options, fn);
	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Object} options.
	 * @param {Function} callback function.
	 * @api private
	 */

	Socket.prototype.sendPacket = function (type, data, options, fn) {
	  if ('function' === typeof data) {
	    fn = data;
	    data = undefined;
	  }

	  if ('function' === typeof options) {
	    fn = options;
	    options = null;
	  }

	  if ('closing' === this.readyState || 'closed' === this.readyState) {
	    return;
	  }

	  options = options || {};
	  options.compress = false !== options.compress;

	  var packet = {
	    type: type,
	    data: data,
	    options: options
	  };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  if (fn) this.once('flush', fn);
	  this.flush();
	};

	/**
	 * Closes the connection.
	 *
	 * @api private
	 */

	Socket.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.readyState = 'closing';

	    var self = this;

	    if (this.writeBuffer.length) {
	      this.once('drain', function () {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }

	  function close() {
	    self.onClose('forced close');
	    debug$6('socket closing - telling transport to close');
	    self.transport.close();
	  }

	  function cleanupAndClose() {
	    self.removeListener('upgrade', cleanupAndClose);
	    self.removeListener('upgradeError', cleanupAndClose);
	    close();
	  }

	  function waitForUpgrade() {
	    // wait for upgrade to finish since we can't send packets while pausing a transport
	    self.once('upgrade', cleanupAndClose);
	    self.once('upgradeError', cleanupAndClose);
	  }

	  return this;
	};

	/**
	 * Called upon transport error
	 *
	 * @api private
	 */

	Socket.prototype.onError = function (err) {
	  debug$6('socket error %j', err);
	  Socket.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};

	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */

	Socket.prototype.onClose = function (reason, desc) {
	  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
	    debug$6('socket close with reason: "%s"', reason);
	    var self = this;

	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);

	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');

	    // ensure transport won't stay open
	    this.transport.close();

	    // ignore further transport communication
	    this.transport.removeAllListeners();

	    // set ready state
	    this.readyState = 'closed';

	    // clear session id
	    this.id = null;

	    // emit close event
	    this.emit('close', reason, desc);

	    // clean buffers after, so users can still
	    // grab the buffers on `close` event
	    self.writeBuffer = [];
	    self.prevBufferLen = 0;
	  }
	};

	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */

	Socket.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i < j; i++) {
	    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};

	var socket$1 = /*#__PURE__*/Object.freeze({
		default: socket,
		__moduleExports: socket
	});

	var require$$0$4 = ( socket$1 && socket ) || socket$1;

	var lib = require$$0$4;

	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	var parser$1 = parser;
	lib.parser = parser$1;

	var lib$1 = /*#__PURE__*/Object.freeze({
		default: lib,
		__moduleExports: lib,
		parser: parser$1
	});

	var toArray_1 = toArray$1;

	function toArray$1(list, index) {
	    var array = [];

	    index = index || 0;

	    for (var i = index || 0; i < list.length; i++) {
	        array[i - index] = list[i];
	    }

	    return array;
	}

	var toArray$2 = /*#__PURE__*/Object.freeze({
		default: toArray_1,
		__moduleExports: toArray_1
	});

	/**
	 * Module exports.
	 */

	var on_1 = on;

	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */

	function on(obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function destroy() {
	      obj.removeListener(ev, fn);
	    }
	  };
	}

	var on$1 = /*#__PURE__*/Object.freeze({
		default: on_1,
		__moduleExports: on_1
	});

	/**
	 * Slice reference.
	 */

	var slice = [].slice;

	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */

	var componentBind = function componentBind(obj, fn) {
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice.call(arguments, 2);
	  return function () {
	    return fn.apply(obj, args.concat(slice.call(arguments)));
	  };
	};

	var componentBind$1 = /*#__PURE__*/Object.freeze({
		default: componentBind,
		__moduleExports: componentBind
	});

	var parser$2 = ( socket_ioParser$1 && socket_ioParser ) || socket_ioParser$1;

	var toArray$3 = ( toArray$2 && toArray_1 ) || toArray$2;

	var on$2 = ( on$1 && on_1 ) || on$1;

	var bind = ( componentBind$1 && componentBind ) || componentBind$1;

	var socket$2 = createCommonjsModule(function (module, exports) {
	  /**
	   * Module dependencies.
	   */

	  var debug = require$$0$2('socket.io-client:socket');

	  /**
	   * Module exports.
	   */

	  module.exports = exports = Socket;

	  /**
	   * Internal events (blacklisted).
	   * These events can't be emitted by the user.
	   *
	   * @api private
	   */

	  var events = {
	    connect: 1,
	    connect_error: 1,
	    connect_timeout: 1,
	    connecting: 1,
	    disconnect: 1,
	    error: 1,
	    reconnect: 1,
	    reconnect_attempt: 1,
	    reconnect_failed: 1,
	    reconnect_error: 1,
	    reconnecting: 1,
	    ping: 1,
	    pong: 1
	  };

	  /**
	   * Shortcut to `Emitter#emit`.
	   */

	  var emit = Emitter.prototype.emit;

	  /**
	   * `Socket` constructor.
	   *
	   * @api public
	   */

	  function Socket(io, nsp, opts) {
	    this.io = io;
	    this.nsp = nsp;
	    this.json = this; // compat
	    this.ids = 0;
	    this.acks = {};
	    this.receiveBuffer = [];
	    this.sendBuffer = [];
	    this.connected = false;
	    this.disconnected = true;
	    this.flags = {};
	    if (opts && opts.query) {
	      this.query = opts.query;
	    }
	    if (this.io.autoConnect) this.open();
	  }

	  /**
	   * Mix in `Emitter`.
	   */

	  Emitter(Socket.prototype);

	  /**
	   * Subscribe to open, close and packet events
	   *
	   * @api private
	   */

	  Socket.prototype.subEvents = function () {
	    if (this.subs) return;

	    var io = this.io;
	    this.subs = [on$2(io, 'open', bind(this, 'onopen')), on$2(io, 'packet', bind(this, 'onpacket')), on$2(io, 'close', bind(this, 'onclose'))];
	  };

	  /**
	   * "Opens" the socket.
	   *
	   * @api public
	   */

	  Socket.prototype.open = Socket.prototype.connect = function () {
	    if (this.connected) return this;

	    this.subEvents();
	    this.io.open(); // ensure open
	    if ('open' === this.io.readyState) this.onopen();
	    this.emit('connecting');
	    return this;
	  };

	  /**
	   * Sends a `message` event.
	   *
	   * @return {Socket} self
	   * @api public
	   */

	  Socket.prototype.send = function () {
	    var args = toArray$3(arguments);
	    args.unshift('message');
	    this.emit.apply(this, args);
	    return this;
	  };

	  /**
	   * Override `emit`.
	   * If the event is in `events`, it's emitted normally.
	   *
	   * @param {String} event name
	   * @return {Socket} self
	   * @api public
	   */

	  Socket.prototype.emit = function (ev) {
	    if (events.hasOwnProperty(ev)) {
	      emit.apply(this, arguments);
	      return this;
	    }

	    var args = toArray$3(arguments);
	    var packet = {
	      type: (this.flags.binary !== undefined ? this.flags.binary : hasBinary$1(args)) ? parser$2.BINARY_EVENT : parser$2.EVENT,
	      data: args
	    };

	    packet.options = {};
	    packet.options.compress = !this.flags || false !== this.flags.compress;

	    // event ack callback
	    if ('function' === typeof args[args.length - 1]) {
	      debug('emitting packet with ack id %d', this.ids);
	      this.acks[this.ids] = args.pop();
	      packet.id = this.ids++;
	    }

	    if (this.connected) {
	      this.packet(packet);
	    } else {
	      this.sendBuffer.push(packet);
	    }

	    this.flags = {};

	    return this;
	  };

	  /**
	   * Sends a packet.
	   *
	   * @param {Object} packet
	   * @api private
	   */

	  Socket.prototype.packet = function (packet) {
	    packet.nsp = this.nsp;
	    this.io.packet(packet);
	  };

	  /**
	   * Called upon engine `open`.
	   *
	   * @api private
	   */

	  Socket.prototype.onopen = function () {
	    debug('transport is open - connecting');

	    // write connect packet if necessary
	    if ('/' !== this.nsp) {
	      if (this.query) {
	        var query = _typeof(this.query) === 'object' ? parseqs$2.encode(this.query) : this.query;
	        debug('sending connect packet with query %s', query);
	        this.packet({ type: parser$2.CONNECT, query: query });
	      } else {
	        this.packet({ type: parser$2.CONNECT });
	      }
	    }
	  };

	  /**
	   * Called upon engine `close`.
	   *
	   * @param {String} reason
	   * @api private
	   */

	  Socket.prototype.onclose = function (reason) {
	    debug('close (%s)', reason);
	    this.connected = false;
	    this.disconnected = true;
	    delete this.id;
	    this.emit('disconnect', reason);
	  };

	  /**
	   * Called with socket packet.
	   *
	   * @param {Object} packet
	   * @api private
	   */

	  Socket.prototype.onpacket = function (packet) {
	    var sameNamespace = packet.nsp === this.nsp;
	    var rootNamespaceError = packet.type === parser$2.ERROR && packet.nsp === '/';

	    if (!sameNamespace && !rootNamespaceError) return;

	    switch (packet.type) {
	      case parser$2.CONNECT:
	        this.onconnect();
	        break;

	      case parser$2.EVENT:
	        this.onevent(packet);
	        break;

	      case parser$2.BINARY_EVENT:
	        this.onevent(packet);
	        break;

	      case parser$2.ACK:
	        this.onack(packet);
	        break;

	      case parser$2.BINARY_ACK:
	        this.onack(packet);
	        break;

	      case parser$2.DISCONNECT:
	        this.ondisconnect();
	        break;

	      case parser$2.ERROR:
	        this.emit('error', packet.data);
	        break;
	    }
	  };

	  /**
	   * Called upon a server event.
	   *
	   * @param {Object} packet
	   * @api private
	   */

	  Socket.prototype.onevent = function (packet) {
	    var args = packet.data || [];
	    debug('emitting event %j', args);

	    if (null != packet.id) {
	      debug('attaching ack callback to event');
	      args.push(this.ack(packet.id));
	    }

	    if (this.connected) {
	      emit.apply(this, args);
	    } else {
	      this.receiveBuffer.push(args);
	    }
	  };

	  /**
	   * Produces an ack callback to emit with an event.
	   *
	   * @api private
	   */

	  Socket.prototype.ack = function (id) {
	    var self = this;
	    var sent = false;
	    return function () {
	      // prevent double callbacks
	      if (sent) return;
	      sent = true;
	      var args = toArray$3(arguments);
	      debug('sending ack %j', args);

	      self.packet({
	        type: hasBinary$1(args) ? parser$2.BINARY_ACK : parser$2.ACK,
	        id: id,
	        data: args
	      });
	    };
	  };

	  /**
	   * Called upon a server acknowlegement.
	   *
	   * @param {Object} packet
	   * @api private
	   */

	  Socket.prototype.onack = function (packet) {
	    var ack = this.acks[packet.id];
	    if ('function' === typeof ack) {
	      debug('calling ack %s with %j', packet.id, packet.data);
	      ack.apply(this, packet.data);
	      delete this.acks[packet.id];
	    } else {
	      debug('bad ack %s', packet.id);
	    }
	  };

	  /**
	   * Called upon server connect.
	   *
	   * @api private
	   */

	  Socket.prototype.onconnect = function () {
	    this.connected = true;
	    this.disconnected = false;
	    this.emit('connect');
	    this.emitBuffered();
	  };

	  /**
	   * Emit buffered events (received and emitted).
	   *
	   * @api private
	   */

	  Socket.prototype.emitBuffered = function () {
	    var i;
	    for (i = 0; i < this.receiveBuffer.length; i++) {
	      emit.apply(this, this.receiveBuffer[i]);
	    }
	    this.receiveBuffer = [];

	    for (i = 0; i < this.sendBuffer.length; i++) {
	      this.packet(this.sendBuffer[i]);
	    }
	    this.sendBuffer = [];
	  };

	  /**
	   * Called upon server disconnect.
	   *
	   * @api private
	   */

	  Socket.prototype.ondisconnect = function () {
	    debug('server disconnect (%s)', this.nsp);
	    this.destroy();
	    this.onclose('io server disconnect');
	  };

	  /**
	   * Called upon forced client/server side disconnections,
	   * this method ensures the manager stops tracking us and
	   * that reconnections don't get triggered for this.
	   *
	   * @api private.
	   */

	  Socket.prototype.destroy = function () {
	    if (this.subs) {
	      // clean subscriptions to avoid reconnections
	      for (var i = 0; i < this.subs.length; i++) {
	        this.subs[i].destroy();
	      }
	      this.subs = null;
	    }

	    this.io.destroy(this);
	  };

	  /**
	   * Disconnects the socket manually.
	   *
	   * @return {Socket} self
	   * @api public
	   */

	  Socket.prototype.close = Socket.prototype.disconnect = function () {
	    if (this.connected) {
	      debug('performing disconnect (%s)', this.nsp);
	      this.packet({ type: parser$2.DISCONNECT });
	    }

	    // remove socket from pool
	    this.destroy();

	    if (this.connected) {
	      // fire events
	      this.onclose('io client disconnect');
	    }
	    return this;
	  };

	  /**
	   * Sets the compress flag.
	   *
	   * @param {Boolean} if `true`, compresses the sending data
	   * @return {Socket} self
	   * @api public
	   */

	  Socket.prototype.compress = function (compress) {
	    this.flags.compress = compress;
	    return this;
	  };

	  /**
	   * Sets the binary flag
	   *
	   * @param {Boolean} whether the emitted data contains binary
	   * @return {Socket} self
	   * @api public
	   */

	  Socket.prototype.binary = function (binary) {
	    this.flags.binary = binary;
	    return this;
	  };
	});

	var socket$3 = /*#__PURE__*/Object.freeze({
		default: socket$2,
		__moduleExports: socket$2
	});

	/**
	 * Expose `Backoff`.
	 */

	var backo2 = Backoff;

	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}

	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */

	Backoff.prototype.duration = function () {
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand = Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};

	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */

	Backoff.prototype.reset = function () {
	  this.attempts = 0;
	};

	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMin = function (min) {
	  this.ms = min;
	};

	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMax = function (max) {
	  this.max = max;
	};

	/**
	 * Set the jitter
	 *
	 * @api public
	 */

	Backoff.prototype.setJitter = function (jitter) {
	  this.jitter = jitter;
	};

	var backo2$1 = /*#__PURE__*/Object.freeze({
		default: backo2,
		__moduleExports: backo2
	});

	var eio = ( lib$1 && lib ) || lib$1;

	var Socket$1 = ( socket$3 && socket$2 ) || socket$3;

	var Backoff$1 = ( backo2$1 && backo2 ) || backo2$1;

	/**
	 * Module dependencies.
	 */

	var debug$7 = require$$0$2('socket.io-client:manager');

	/**
	 * IE6+ hasOwnProperty
	 */

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Module exports
	 */

	var manager = Manager;

	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */

	function Manager(uri, opts) {
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};

	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new Backoff$1({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connecting = [];
	  this.lastPing = null;
	  this.encoding = false;
	  this.packetBuffer = [];
	  var _parser = opts.parser || parser$2;
	  this.encoder = new _parser.Encoder();
	  this.decoder = new _parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}

	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */

	Manager.prototype.emitAll = function () {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	    }
	  }
	};

	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */

	Manager.prototype.updateSocketIds = function () {
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].id = this.generateId(nsp);
	    }
	  }
	};

	/**
	 * generate `socket.id` for the given `nsp`
	 *
	 * @param {String} nsp
	 * @return {String}
	 * @api private
	 */

	Manager.prototype.generateId = function (nsp) {
	  return (nsp === '/' ? '' : nsp + '#') + this.engine.id;
	};

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Manager.prototype);

	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnection = function (v) {
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};

	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionAttempts = function (v) {
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};

	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelay = function (v) {
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};

	Manager.prototype.randomizationFactor = function (v) {
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};

	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelayMax = function (v) {
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};

	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.timeout = function (v) {
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};

	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */

	Manager.prototype.maybeReconnectOnOpen = function () {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};

	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */

	Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
	  debug$7('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;

	  debug$7('opening %s', this.uri);
	  this.engine = eio(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;

	  // emit `open`
	  var openSub = on$2(socket, 'open', function () {
	    self.onopen();
	    fn && fn();
	  });

	  // emit `connect_error`
	  var errorSub = on$2(socket, 'error', function (data) {
	    debug$7('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });

	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug$7('connect attempt will timeout after %d', timeout);

	    // set timer
	    var timer = setTimeout(function () {
	      debug$7('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);

	    this.subs.push({
	      destroy: function destroy() {
	        clearTimeout(timer);
	      }
	    });
	  }

	  this.subs.push(openSub);
	  this.subs.push(errorSub);

	  return this;
	};

	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */

	Manager.prototype.onopen = function () {
	  debug$7('open');

	  // clear old subs
	  this.cleanup();

	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');

	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on$2(socket, 'data', bind(this, 'ondata')));
	  this.subs.push(on$2(socket, 'ping', bind(this, 'onping')));
	  this.subs.push(on$2(socket, 'pong', bind(this, 'onpong')));
	  this.subs.push(on$2(socket, 'error', bind(this, 'onerror')));
	  this.subs.push(on$2(socket, 'close', bind(this, 'onclose')));
	  this.subs.push(on$2(this.decoder, 'decoded', bind(this, 'ondecoded')));
	};

	/**
	 * Called upon a ping.
	 *
	 * @api private
	 */

	Manager.prototype.onping = function () {
	  this.lastPing = new Date();
	  this.emitAll('ping');
	};

	/**
	 * Called upon a packet.
	 *
	 * @api private
	 */

	Manager.prototype.onpong = function () {
	  this.emitAll('pong', new Date() - this.lastPing);
	};

	/**
	 * Called with data.
	 *
	 * @api private
	 */

	Manager.prototype.ondata = function (data) {
	  this.decoder.add(data);
	};

	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */

	Manager.prototype.ondecoded = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */

	Manager.prototype.onerror = function (err) {
	  debug$7('error', err);
	  this.emitAll('error', err);
	};

	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */

	Manager.prototype.socket = function (nsp, opts) {
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new Socket$1(this, nsp, opts);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connecting', onConnecting);
	    socket.on('connect', function () {
	      socket.id = self.generateId(nsp);
	    });

	    if (this.autoConnect) {
	      // manually call here since connecting event is fired before listening
	      onConnecting();
	    }
	  }

	  function onConnecting() {
	    if (!~index(self.connecting, socket)) {
	      self.connecting.push(socket);
	    }
	  }

	  return socket;
	};

	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */

	Manager.prototype.destroy = function (socket) {
	  var index$$1 = index(this.connecting, socket);
	  if (~index$$1) this.connecting.splice(index$$1, 1);
	  if (this.connecting.length) return;

	  this.close();
	};

	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Manager.prototype.packet = function (packet) {
	  debug$7('writing packet %j', packet);
	  var self = this;
	  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function (encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i], packet.options);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else {
	    // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};

	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */

	Manager.prototype.processPacketQueue = function () {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};

	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */

	Manager.prototype.cleanup = function () {
	  debug$7('cleanup');

	  var subsLength = this.subs.length;
	  for (var i = 0; i < subsLength; i++) {
	    var sub = this.subs.shift();
	    sub.destroy();
	  }

	  this.packetBuffer = [];
	  this.encoding = false;
	  this.lastPing = null;

	  this.decoder.destroy();
	};

	/**
	 * Close the current socket.
	 *
	 * @api private
	 */

	Manager.prototype.close = Manager.prototype.disconnect = function () {
	  debug$7('disconnect');
	  this.skipReconnect = true;
	  this.reconnecting = false;
	  if ('opening' === this.readyState) {
	    // `onclose` will not fire because
	    // an open event never happened
	    this.cleanup();
	  }
	  this.backoff.reset();
	  this.readyState = 'closed';
	  if (this.engine) this.engine.close();
	};

	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */

	Manager.prototype.onclose = function (reason) {
	  debug$7('onclose');

	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);

	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};

	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */

	Manager.prototype.reconnect = function () {
	  if (this.reconnecting || this.skipReconnect) return this;

	  var self = this;

	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug$7('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug$7('will wait %dms before reconnect attempt', delay);

	    this.reconnecting = true;
	    var timer = setTimeout(function () {
	      if (self.skipReconnect) return;

	      debug$7('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);

	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;

	      self.open(function (err) {
	        if (err) {
	          debug$7('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug$7('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);

	    this.subs.push({
	      destroy: function destroy() {
	        clearTimeout(timer);
	      }
	    });
	  }
	};

	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */

	Manager.prototype.onreconnect = function () {
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};

	var manager$1 = /*#__PURE__*/Object.freeze({
		default: manager,
		__moduleExports: manager
	});

	var url$2 = ( url$1 && url_1 ) || url$1;

	var Manager$1 = ( manager$1 && manager ) || manager$1;

	var lib$2 = createCommonjsModule(function (module, exports) {
	  /**
	   * Module dependencies.
	   */

	  var debug = require$$0$2('socket.io-client');

	  /**
	   * Module exports.
	   */

	  module.exports = exports = lookup;

	  /**
	   * Managers cache.
	   */

	  var cache = exports.managers = {};

	  /**
	   * Looks up an existing `Manager` for multiplexing.
	   * If the user summons:
	   *
	   *   `io('http://localhost/a');`
	   *   `io('http://localhost/b');`
	   *
	   * We reuse the existing instance based on same scheme/port/host,
	   * and we initialize sockets for each namespace.
	   *
	   * @api public
	   */

	  function lookup(uri, opts) {
	    if ((typeof uri === 'undefined' ? 'undefined' : _typeof(uri)) === 'object') {
	      opts = uri;
	      uri = undefined;
	    }

	    opts = opts || {};

	    var parsed = url$2(uri);
	    var source = parsed.source;
	    var id = parsed.id;
	    var path = parsed.path;
	    var sameNamespace = cache[id] && path in cache[id].nsps;
	    var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;

	    var io;

	    if (newConnection) {
	      debug('ignoring socket cache for %s', source);
	      io = Manager$1(source, opts);
	    } else {
	      if (!cache[id]) {
	        debug('new io instance for %s', source);
	        cache[id] = Manager$1(source, opts);
	      }
	      io = cache[id];
	    }
	    if (parsed.query && !opts.query) {
	      opts.query = parsed.query;
	    }
	    return io.socket(parsed.path, opts);
	  }

	  /**
	   * Protocol version.
	   *
	   * @api public
	   */

	  exports.protocol = parser$2.protocol;

	  /**
	   * `connect`.
	   *
	   * @param {String} uri
	   * @api public
	   */

	  exports.connect = lookup;

	  /**
	   * Expose constructors for standalone build.
	   *
	   * @api public
	   */

	  exports.Manager = Manager$1;
	  exports.Socket = Socket$1;
	});
	var lib_1 = lib$2.managers;
	var lib_2 = lib$2.protocol;
	var lib_3 = lib$2.connect;
	var lib_4 = lib$2.Manager;
	var lib_5 = lib$2.Socket;

	function extend(Y) {
	    var Connector = function (_Y$AbstractConnector) {
	        inherits(Connector, _Y$AbstractConnector);

	        function Connector(y, options) {
	            classCallCheck(this, Connector);

	            if (options === undefined) {
	                throw new Error('Options must not be undefined!');
	            }
	            options.preferUntransformed = true;
	            options.generateUserId = options.generateUserId || false;
	            if (options.initSync !== false) {
	                options.initSync = true;
	            }

	            var _this = possibleConstructorReturn(this, (Connector.__proto__ || Object.getPrototypeOf(Connector)).call(this, y, options));

	            _this._sentSync = false;
	            _this.options = options;
	            options.url = options.url || 'https://yjs.dbis.rwth-aachen.de:5072';
	            var socket = options.socket || lib$2(options.url, options.options);
	            _this.socket = socket;
	            var self = _this;

	            /****************** start minimal webrtc **********************/
	            var signaling_socket = socket;
	            var DEFAULT_CHANNEL = options.room;
	            var ICE_SERVERS = [{ urls: "stun:stun.l.google.com:19302" }, { urls: "turn:try.refactored.ai:3478", username: "test99", credential: "test" }];
	            var dcs = {};
	            _this.dcs = dcs;
	            _this.sdcs = dcs;
	            var peers = {};
	            var peer_media_elements = {};
	            var sockets;
	            _this.sockets = sockets;

	            function receiveData(ywebrtc, peer_id) {
	                var buf, count;
	                return function onmessage(event) {
	                    if (typeof event.data === 'string') {
	                        buf = new Uint8Array(parseInt(event.data));
	                        count = 0;
	                        return;
	                    }
	                    var data = new Uint8Array(event.data);
	                    buf.set(data, count);
	                    count += data.byteLength;
	                    if (count === buf.byteLength) {
	                        ywebrtc.receiveMessage(peer_id, buf);
	                    }
	                };
	            }

	            function init(ywebrtc) {
	                signaling_socket.on('connect', function () {
	                    join_chat_channel(DEFAULT_CHANNEL, { 'whatever-you-want-here': 'stuff' });
	                });

	                signaling_socket.on('sockets', function (sockets) {
	                    ywebrtc.sockets = sockets;
	                });

	                signaling_socket.on('disconnect', function () {
	                    /* Tear down all of our peer connections and remove all the
	                     * media divs when we disconnect */
	                    for (peer_id in peer_media_elements) {
	                        peer_media_elements[peer_id].remove();
	                    }
	                    for (peer_id in peers) {
	                        peers[peer_id].close();
	                    }

	                    peers = {};
	                    peer_media_elements = {};
	                });

	                function join_chat_channel(channel, userdata) {
	                    signaling_socket.emit('join', { "channel": channel, "userdata": userdata });
	                    ywebrtc.userID = signaling_socket.id;
	                }

	                signaling_socket.on('addPeer', function (config) {
	                    var peer_id = config.peer_id;

	                    if (peer_id in peers) {
	                        /* This could happen if the user joins multiple channels where the other peer is also in. */
	                        return;
	                    }

	                    var peer_connection = new RTCPeerConnection({ "iceServers": ICE_SERVERS });
	                    peers[peer_id] = peer_connection;

	                    var dataChannel = peer_connection.createDataChannel('data');
	                    var syncDataChannel = peer_connection.createDataChannel('sync_data');

	                    dataChannel.binaryType = 'arraybuffer';
	                    syncDataChannel.binaryType = 'arraybuffer';

	                    ywebrtc.dcs[peer_id] = dataChannel;
	                    ywebrtc.sdcs[peer_id] = syncDataChannel;

	                    ywebrtc.userJoined(peer_id, 'master');

	                    dataChannel.onmessage = receiveData(ywebrtc, peer_id);
	                    syncDataChannel.onmessage = function (e) {
	                        ywebrtc.receivebuffer(peer_id, e.data);
	                    };

	                    peer_connection.onicecandidate = function (event) {
	                        if (event.candidate) {
	                            signaling_socket.emit('relayICECandidate', {
	                                'peer_id': peer_id,
	                                'ice_candidate': {
	                                    'sdpMLineIndex': event.candidate.sdpMLineIndex,
	                                    'candidate': event.candidate.candidate
	                                }
	                            });
	                        }
	                    };

	                    if (config.should_create_offer) {
	                        peer_connection.createOffer(function (local_description) {
	                            peer_connection.setLocalDescription(local_description, function () {
	                                signaling_socket.emit('relaySessionDescription', { 'peer_id': peer_id, 'session_description': local_description });
	                            }, function () {
	                                Alert("Offer setLocalDescription failed!");
	                            });
	                        }, function (error) {
	                            console.log("Error sending offer: ", error);
	                        });
	                    }
	                });

	                /** 
	                 * Peers exchange session descriptions which contains information
	                 * about their audio / video settings and that sort of stuff. First
	                 * the 'offerer' sends a description to the 'answerer' (with type
	                 * "offer"), then the answerer sends one back (with type "answer").  
	                 */
	                signaling_socket.on('sessionDescription', function (config) {
	                    var peer_id = config.peer_id;
	                    var peer = peers[peer_id];

	                    peer.ondatachannel = function (event) {
	                        var dataChannel = event.channel;
	                        dataChannel.binaryType = 'arraybuffer';
	                        if (dataChannel.label == 'sync_data') {
	                            dataChannel.onmessage = receiveData(ywebrtc, peer_id);
	                        } else {
	                            dataChannel.onmessage = function (e) {
	                                ywebrtc.receivebuffer(peer_id, e.data);
	                            };
	                        }
	                    };

	                    var remote_description = config.session_description;

	                    var desc = new RTCSessionDescription(remote_description);
	                    var stuff = peer.setRemoteDescription(desc, function () {
	                        if (remote_description.type == "offer") {
	                            peer.createAnswer(function (local_description) {
	                                peer.setLocalDescription(local_description, function () {
	                                    signaling_socket.emit('relaySessionDescription', { 'peer_id': peer_id, 'session_description': local_description });
	                                }, function () {
	                                    Alert("Answer setLocalDescription failed!");
	                                });
	                            }, function (error) {
	                                console.log("Error creating answer: ", error);
	                            });
	                        }
	                    }, function (error) {
	                        console.log("setRemoteDescription error: ", error);
	                    });
	                });

	                signaling_socket.on('iceCandidate', function (config) {
	                    var peer = peers[config.peer_id];
	                    var ice_candidate = config.ice_candidate;
	                    peer.addIceCandidate(new RTCIceCandidate(ice_candidate));
	                });

	                signaling_socket.on('removePeer', function (config) {
	                    var peer_id = config.peer_id;
	                    ywebrtc.userLeft(peer_id);
	                    if (peer_id in peer_media_elements) {
	                        peer_media_elements[peer_id].remove();
	                    }
	                    if (peer_id in peers) {
	                        peers[peer_id].close();
	                    }

	                    delete peers[peer_id];
	                    delete peer_media_elements[config.peer_id];
	                });
	            }
	            init(self);
	            /************************ end minimal_webrtc ****************************/
	            return _this;
	        }

	        createClass(Connector, [{
	            key: 'disconnect',
	            value: function disconnect() {}
	        }, {
	            key: 'destroy',
	            value: function destroy() {}
	        }, {
	            key: 'reconnect',
	            value: function reconnect() {}
	        }, {
	            key: 'send',
	            value: function send(uid, message) {
	                console.log('$$$$$$$$$$$$$$$$ syncing...... $$$$$$$$$$$$$$$$$');
	                function send2(dataChannel, data2) {
	                    if (dataChannel.readyState === 'open') {
	                        var CHUNK_LEN = 64000;
	                        var len = data2.byteLength;
	                        var n = len / CHUNK_LEN | 0;
	                        dataChannel.send(len);
	                        // split the photo and send in chunks of about 64KB
	                        for (var i = 0; i < n; i++) {
	                            var start = i * CHUNK_LEN,
	                                end = (i + 1) * CHUNK_LEN;
	                            dataChannel.send(data2.subarray(start, end));
	                        }
	                        // send the reminder, if any
	                        if (len % CHUNK_LEN) {
	                            dataChannel.send(data2.subarray(n * CHUNK_LEN));
	                        }
	                    } else {
	                        setTimeout(send2, 500, dataChannel, data2);
	                    }
	                }
	                send2(this.sdcs[uid], new Uint8Array(message));
	            }
	        }, {
	            key: 'broadcast',
	            value: function broadcast(message) {
	                for (var peer_id in this.dcs) {
	                    var send2 = function send2(dataChannel, data2) {
	                        if (dataChannel.readyState === 'open') {
	                            var CHUNK_LEN = 64000;
	                            var len = data2.byteLength;
	                            var n = len / CHUNK_LEN | 0;
	                            dataChannel.send(len);
	                            // split the photo and send in chunks of about 64KB
	                            for (var i = 0; i < n; i++) {
	                                var start = i * CHUNK_LEN,
	                                    end = (i + 1) * CHUNK_LEN;
	                                dataChannel.send(data2.subarray(start, end));
	                            }
	                            // send the reminder, if any
	                            if (len % CHUNK_LEN) {
	                                dataChannel.send(data2.subarray(n * CHUNK_LEN));
	                            }
	                        } else {
	                            console.log('Errrrrrrrrrrrrrrrrrrrrrrrrrrrrrr', peer_id);
	                        }
	                    };

	                    send2(this.dcs[peer_id], new Uint8Array(message));
	                }
	            }
	        }, {
	            key: 'isDisconnected',
	            value: function isDisconnected() {
	                return this.socket.disconnected;
	            }
	        }]);
	        return Connector;
	    }(Y.AbstractConnector);

	    Connector.io = lib$2;
	    Y['webrtc'] = Connector;
	}

	if (typeof Y !== 'undefined') {
	    extend(Y); // eslint-disable-line
	}

	return extend;

})));


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"_process":4,"buffer":2}],6:[function(require,module,exports){
(function (process,Buffer){

/**
 * yjs - A framework for real-time p2p shared editing on any data
 * @version v13.0.0-62
 * @license MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.Y = factory());
}(this, (function () { 'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  function rotate(tree, parent, newParent, n) {
    if (parent === null) {
      tree.root = newParent;
      newParent._parent = null;
    } else if (parent.left === n) {
      parent.left = newParent;
    } else if (parent.right === n) {
      parent.right = newParent;
    } else {
      throw new Error('The elements are wrongly connected!');
    }
  }

  var N = function () {
    // A created node is always red!
    function N(val) {
      classCallCheck(this, N);

      this.val = val;
      this.color = true;
      this._left = null;
      this._right = null;
      this._parent = null;
    }

    createClass(N, [{
      key: 'isRed',
      value: function isRed() {
        return this.color;
      }
    }, {
      key: 'isBlack',
      value: function isBlack() {
        return !this.color;
      }
    }, {
      key: 'redden',
      value: function redden() {
        this.color = true;return this;
      }
    }, {
      key: 'blacken',
      value: function blacken() {
        this.color = false;return this;
      }
    }, {
      key: 'rotateLeft',
      value: function rotateLeft(tree) {
        var parent = this.parent;
        var newParent = this.right;
        var newRight = this.right.left;
        newParent.left = this;
        this.right = newRight;
        rotate(tree, parent, newParent, this);
      }
    }, {
      key: 'next',
      value: function next() {
        if (this.right !== null) {
          // search the most left node in the right tree
          var o = this.right;
          while (o.left !== null) {
            o = o.left;
          }
          return o;
        } else {
          var p = this;
          while (p.parent !== null && p !== p.parent.left) {
            p = p.parent;
          }
          return p.parent;
        }
      }
    }, {
      key: 'prev',
      value: function prev() {
        if (this.left !== null) {
          // search the most right node in the left tree
          var o = this.left;
          while (o.right !== null) {
            o = o.right;
          }
          return o;
        } else {
          var p = this;
          while (p.parent !== null && p !== p.parent.right) {
            p = p.parent;
          }
          return p.parent;
        }
      }
    }, {
      key: 'rotateRight',
      value: function rotateRight(tree) {
        var parent = this.parent;
        var newParent = this.left;
        var newLeft = this.left.right;
        newParent.right = this;
        this.left = newLeft;
        rotate(tree, parent, newParent, this);
      }
    }, {
      key: 'getUncle',
      value: function getUncle() {
        // we can assume that grandparent exists when this is called!
        if (this.parent === this.parent.parent.left) {
          return this.parent.parent.right;
        } else {
          return this.parent.parent.left;
        }
      }
    }, {
      key: 'grandparent',
      get: function get$$1() {
        return this.parent.parent;
      }
    }, {
      key: 'parent',
      get: function get$$1() {
        return this._parent;
      }
    }, {
      key: 'sibling',
      get: function get$$1() {
        return this === this.parent.left ? this.parent.right : this.parent.left;
      }
    }, {
      key: 'left',
      get: function get$$1() {
        return this._left;
      },
      set: function set$$1(n) {
        if (n !== null) {
          n._parent = this;
        }
        this._left = n;
      }
    }, {
      key: 'right',
      get: function get$$1() {
        return this._right;
      },
      set: function set$$1(n) {
        if (n !== null) {
          n._parent = this;
        }
        this._right = n;
      }
    }]);
    return N;
  }();

  /*
   * This is a Red Black Tree implementation
   */


  var Tree = function () {
    function Tree() {
      classCallCheck(this, Tree);

      this.root = null;
      this.length = 0;
    }

    createClass(Tree, [{
      key: 'findNext',
      value: function findNext(id) {
        var nextID = id.clone();
        nextID.clock += 1;
        return this.findWithLowerBound(nextID);
      }
    }, {
      key: 'findPrev',
      value: function findPrev(id) {
        var prevID = id.clone();
        prevID.clock -= 1;
        return this.findWithUpperBound(prevID);
      }
    }, {
      key: 'findNodeWithLowerBound',
      value: function findNodeWithLowerBound(from) {
        var o = this.root;
        if (o === null) {
          return null;
        } else {
          while (true) {
            if (from === null || from.lessThan(o.val._id) && o.left !== null) {
              // o is included in the bound
              // try to find an element that is closer to the bound
              o = o.left;
            } else if (from !== null && o.val._id.lessThan(from)) {
              // o is not within the bound, maybe one of the right elements is..
              if (o.right !== null) {
                o = o.right;
              } else {
                // there is no right element. Search for the next bigger element,
                // this should be within the bounds
                return o.next();
              }
            } else {
              return o;
            }
          }
        }
      }
    }, {
      key: 'findNodeWithUpperBound',
      value: function findNodeWithUpperBound(to) {
        if (to === void 0) {
          throw new Error('You must define from!');
        }
        var o = this.root;
        if (o === null) {
          return null;
        } else {
          while (true) {
            if ((to === null || o.val._id.lessThan(to)) && o.right !== null) {
              // o is included in the bound
              // try to find an element that is closer to the bound
              o = o.right;
            } else if (to !== null && to.lessThan(o.val._id)) {
              // o is not within the bound, maybe one of the left elements is..
              if (o.left !== null) {
                o = o.left;
              } else {
                // there is no left element. Search for the prev smaller element,
                // this should be within the bounds
                return o.prev();
              }
            } else {
              return o;
            }
          }
        }
      }
    }, {
      key: 'findSmallestNode',
      value: function findSmallestNode() {
        var o = this.root;
        while (o != null && o.left != null) {
          o = o.left;
        }
        return o;
      }
    }, {
      key: 'findWithLowerBound',
      value: function findWithLowerBound(from) {
        var n = this.findNodeWithLowerBound(from);
        return n == null ? null : n.val;
      }
    }, {
      key: 'findWithUpperBound',
      value: function findWithUpperBound(to) {
        var n = this.findNodeWithUpperBound(to);
        return n == null ? null : n.val;
      }
    }, {
      key: 'iterate',
      value: function iterate(from, to, f) {
        var o;
        if (from === null) {
          o = this.findSmallestNode();
        } else {
          o = this.findNodeWithLowerBound(from);
        }
        while (o !== null && (to === null || // eslint-disable-line no-unmodified-loop-condition
        o.val._id.lessThan(to) || o.val._id.equals(to))) {
          f(o.val);
          o = o.next();
        }
      }
    }, {
      key: 'find',
      value: function find(id) {
        var n = this.findNode(id);
        if (n !== null) {
          return n.val;
        } else {
          return null;
        }
      }
    }, {
      key: 'findNode',
      value: function findNode(id) {
        var o = this.root;
        if (o === null) {
          return null;
        } else {
          while (true) {
            if (o === null) {
              return null;
            }
            if (id.lessThan(o.val._id)) {
              o = o.left;
            } else if (o.val._id.lessThan(id)) {
              o = o.right;
            } else {
              return o;
            }
          }
        }
      }
    }, {
      key: 'delete',
      value: function _delete(id) {
        var d = this.findNode(id);
        if (d == null) {
          // throw new Error('Element does not exist!')
          return;
        }
        this.length--;
        if (d.left !== null && d.right !== null) {
          // switch d with the greates element in the left subtree.
          // o should have at most one child.
          var o = d.left;
          // find
          while (o.right !== null) {
            o = o.right;
          }
          // switch
          d.val = o.val;
          d = o;
        }
        // d has at most one child
        // let n be the node that replaces d
        var isFakeChild;
        var child = d.left || d.right;
        if (child === null) {
          isFakeChild = true;
          child = new N(null);
          child.blacken();
          d.right = child;
        } else {
          isFakeChild = false;
        }

        if (d.parent === null) {
          if (!isFakeChild) {
            this.root = child;
            child.blacken();
            child._parent = null;
          } else {
            this.root = null;
          }
          return;
        } else if (d.parent.left === d) {
          d.parent.left = child;
        } else if (d.parent.right === d) {
          d.parent.right = child;
        } else {
          throw new Error('Impossible!');
        }
        if (d.isBlack()) {
          if (child.isRed()) {
            child.blacken();
          } else {
            this._fixDelete(child);
          }
        }
        this.root.blacken();
        if (isFakeChild) {
          if (child.parent.left === child) {
            child.parent.left = null;
          } else if (child.parent.right === child) {
            child.parent.right = null;
          } else {
            throw new Error('Impossible #3');
          }
        }
      }
    }, {
      key: '_fixDelete',
      value: function _fixDelete(n) {
        function isBlack(node) {
          return node !== null ? node.isBlack() : true;
        }
        function isRed(node) {
          return node !== null ? node.isRed() : false;
        }
        if (n.parent === null) {
          // this can only be called after the first iteration of fixDelete.
          return;
        }
        // d was already replaced by the child
        // d is not the root
        // d and child are black
        var sibling = n.sibling;
        if (isRed(sibling)) {
          // make sibling the grandfather
          n.parent.redden();
          sibling.blacken();
          if (n === n.parent.left) {
            n.parent.rotateLeft(this);
          } else if (n === n.parent.right) {
            n.parent.rotateRight(this);
          } else {
            throw new Error('Impossible #2');
          }
          sibling = n.sibling;
        }
        // parent, sibling, and children of n are black
        if (n.parent.isBlack() && sibling.isBlack() && isBlack(sibling.left) && isBlack(sibling.right)) {
          sibling.redden();
          this._fixDelete(n.parent);
        } else if (n.parent.isRed() && sibling.isBlack() && isBlack(sibling.left) && isBlack(sibling.right)) {
          sibling.redden();
          n.parent.blacken();
        } else {
          if (n === n.parent.left && sibling.isBlack() && isRed(sibling.left) && isBlack(sibling.right)) {
            sibling.redden();
            sibling.left.blacken();
            sibling.rotateRight(this);
            sibling = n.sibling;
          } else if (n === n.parent.right && sibling.isBlack() && isRed(sibling.right) && isBlack(sibling.left)) {
            sibling.redden();
            sibling.right.blacken();
            sibling.rotateLeft(this);
            sibling = n.sibling;
          }
          sibling.color = n.parent.color;
          n.parent.blacken();
          if (n === n.parent.left) {
            sibling.right.blacken();
            n.parent.rotateLeft(this);
          } else {
            sibling.left.blacken();
            n.parent.rotateRight(this);
          }
        }
      }
    }, {
      key: 'put',
      value: function put(v) {
        var node = new N(v);
        if (this.root !== null) {
          var p = this.root; // p abbrev. parent
          while (true) {
            if (node.val._id.lessThan(p.val._id)) {
              if (p.left === null) {
                p.left = node;
                break;
              } else {
                p = p.left;
              }
            } else if (p.val._id.lessThan(node.val._id)) {
              if (p.right === null) {
                p.right = node;
                break;
              } else {
                p = p.right;
              }
            } else {
              p.val = node.val;
              return p;
            }
          }
          this._fixInsert(node);
        } else {
          this.root = node;
        }
        this.length++;
        this.root.blacken();
        return node;
      }
    }, {
      key: '_fixInsert',
      value: function _fixInsert(n) {
        if (n.parent === null) {
          n.blacken();
          return;
        } else if (n.parent.isBlack()) {
          return;
        }
        var uncle = n.getUncle();
        if (uncle !== null && uncle.isRed()) {
          // Note: parent: red, uncle: red
          n.parent.blacken();
          uncle.blacken();
          n.grandparent.redden();
          this._fixInsert(n.grandparent);
        } else {
          // Note: parent: red, uncle: black or null
          // Now we transform the tree in such a way that
          // either of these holds:
          //   1) grandparent.left.isRed
          //     and grandparent.left.left.isRed
          //   2) grandparent.right.isRed
          //     and grandparent.right.right.isRed
          if (n === n.parent.right && n.parent === n.grandparent.left) {
            n.parent.rotateLeft(this);
            // Since we rotated and want to use the previous
            // cases, we need to set n in such a way that
            // n.parent.isRed again
            n = n.left;
          } else if (n === n.parent.left && n.parent === n.grandparent.right) {
            n.parent.rotateRight(this);
            // see above
            n = n.right;
          }
          // Case 1) or 2) hold from here on.
          // Now traverse grandparent, make parent a black node
          // on the highest level which holds two red nodes.
          n.parent.blacken();
          n.grandparent.redden();
          if (n === n.parent.left) {
            // Case 1
            n.grandparent.rotateRight(this);
          } else {
            // Case 2
            n.grandparent.rotateLeft(this);
          }
        }
      }
    }]);
    return Tree;
  }();

  var ID = function () {
    function ID(user, clock) {
      classCallCheck(this, ID);

      this.user = user; // TODO: rename to client
      this.clock = clock;
    }

    createClass(ID, [{
      key: "clone",
      value: function clone() {
        return new ID(this.user, this.clock);
      }
    }, {
      key: "equals",
      value: function equals(id) {
        return id !== null && id.user === this.user && id.clock === this.clock;
      }
    }, {
      key: "lessThan",
      value: function lessThan(id) {
        if (id.constructor === ID) {
          return this.user < id.user || this.user === id.user && this.clock < id.clock;
        } else {
          return false;
        }
      }
    }]);
    return ID;
  }();

  var DSNode = function () {
    function DSNode(id, len, gc) {
      classCallCheck(this, DSNode);

      this._id = id;
      this.len = len;
      this.gc = gc;
    }

    createClass(DSNode, [{
      key: 'clone',
      value: function clone() {
        return new DSNode(this._id, this.len, this.gc);
      }
    }]);
    return DSNode;
  }();

  var DeleteStore = function (_Tree) {
    inherits(DeleteStore, _Tree);

    function DeleteStore() {
      classCallCheck(this, DeleteStore);
      return possibleConstructorReturn(this, (DeleteStore.__proto__ || Object.getPrototypeOf(DeleteStore)).apply(this, arguments));
    }

    createClass(DeleteStore, [{
      key: 'logTable',
      value: function logTable() {
        var deletes = [];
        this.iterate(null, null, function (n) {
          deletes.push({
            user: n._id.user,
            clock: n._id.clock,
            len: n.len,
            gc: n.gc
          });
        });
        console.table(deletes);
      }
    }, {
      key: 'isDeleted',
      value: function isDeleted(id) {
        var n = this.findWithUpperBound(id);
        return n !== null && n._id.user === id.user && id.clock < n._id.clock + n.len;
      }
    }, {
      key: 'mark',
      value: function mark(id, length, gc) {
        if (length === 0) return;
        // Step 1. Unmark range
        var leftD = this.findWithUpperBound(new ID(id.user, id.clock - 1));
        // Resize left DSNode if necessary
        if (leftD !== null && leftD._id.user === id.user) {
          if (leftD._id.clock < id.clock && id.clock < leftD._id.clock + leftD.len) {
            // node is overlapping. need to resize
            if (id.clock + length < leftD._id.clock + leftD.len) {
              // overlaps new mark range and some more
              // create another DSNode to the right of new mark
              this.put(new DSNode(new ID(id.user, id.clock + length), leftD._id.clock + leftD.len - id.clock - length, leftD.gc));
            }
            // resize left DSNode
            leftD.len = id.clock - leftD._id.clock;
          } // Otherwise there is no overlapping
        }
        // Resize right DSNode if necessary
        var upper = new ID(id.user, id.clock + length - 1);
        var rightD = this.findWithUpperBound(upper);
        if (rightD !== null && rightD._id.user === id.user) {
          if (rightD._id.clock < id.clock + length && id.clock <= rightD._id.clock && id.clock + length < rightD._id.clock + rightD.len) {
            // we only consider the case where we resize the node
            var d = id.clock + length - rightD._id.clock;
            rightD._id = new ID(rightD._id.user, rightD._id.clock + d);
            rightD.len -= d;
          }
        }
        // Now we only have to delete all inner marks
        var deleteNodeIds = [];
        this.iterate(id, upper, function (m) {
          deleteNodeIds.push(m._id);
        });
        for (var i = deleteNodeIds.length - 1; i >= 0; i--) {
          this.delete(deleteNodeIds[i]);
        }
        var newMark = new DSNode(id, length, gc);
        // Step 2. Check if we can extend left or right
        if (leftD !== null && leftD._id.user === id.user && leftD._id.clock + leftD.len === id.clock && leftD.gc === gc) {
          // We can extend left
          leftD.len += length;
          newMark = leftD;
        }
        var rightNext = this.find(new ID(id.user, id.clock + length));
        if (rightNext !== null && rightNext._id.user === id.user && id.clock + length === rightNext._id.clock && gc === rightNext.gc) {
          // We can merge newMark and rightNext
          newMark.len += rightNext.len;
          this.delete(rightNext._id);
        }
        if (leftD !== newMark) {
          // only put if we didn't extend left
          this.put(newMark);
        }
      }
      // TODO: exchange markDeleted for mark()

    }, {
      key: 'markDeleted',
      value: function markDeleted(id, length) {
        this.mark(id, length, false);
      }
    }]);
    return DeleteStore;
  }(Tree);

  /**
   * A BinaryDecoder handles the decoding of an ArrayBuffer.
   */

  var BinaryDecoder = function () {
    /**
     * @param {Uint8Array|Buffer} buffer The binary data that this instance
     *                                   decodes.
     */
    function BinaryDecoder(buffer) {
      classCallCheck(this, BinaryDecoder);

      if (buffer instanceof ArrayBuffer) {
        this.uint8arr = new Uint8Array(buffer);
      } else if (buffer instanceof Uint8Array || typeof Buffer !== 'undefined' && buffer instanceof Buffer) {
        this.uint8arr = buffer;
      } else {
        throw new Error('Expected an ArrayBuffer or Uint8Array!');
      }
      this.pos = 0;
    }

    /**
     * Clone this decoder instance.
     * Optionally set a new position parameter.
     */


    createClass(BinaryDecoder, [{
      key: 'clone',
      value: function clone() {
        var newPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pos;

        var decoder = new BinaryDecoder(this.uint8arr);
        decoder.pos = newPos;
        return decoder;
      }

      /**
       * Number of bytes.
       */

    }, {
      key: 'skip8',


      /**
       * Skip one byte, jump to the next position.
       */
      value: function skip8() {
        this.pos++;
      }

      /**
       * Read one byte as unsigned integer.
       */

    }, {
      key: 'readUint8',
      value: function readUint8() {
        return this.uint8arr[this.pos++];
      }

      /**
       * Read 4 bytes as unsigned integer.
       *
       * @return {number} An unsigned integer.
       */

    }, {
      key: 'readUint32',
      value: function readUint32() {
        var uint = this.uint8arr[this.pos] + (this.uint8arr[this.pos + 1] << 8) + (this.uint8arr[this.pos + 2] << 16) + (this.uint8arr[this.pos + 3] << 24);
        this.pos += 4;
        return uint;
      }

      /**
       * Look ahead without incrementing position.
       * to the next byte and read it as unsigned integer.
       *
       * @return {number} An unsigned integer.
       */

    }, {
      key: 'peekUint8',
      value: function peekUint8() {
        return this.uint8arr[this.pos];
      }

      /**
       * Read unsigned integer (32bit) with variable length.
       * 1/8th of the storage is used as encoding overhead.
       *  * numbers < 2^7 is stored in one byte.
       *  * numbers < 2^14 is stored in two bytes.
       *
       * @return {number} An unsigned integer.
       */

    }, {
      key: 'readVarUint',
      value: function readVarUint() {
        var num = 0;
        var len = 0;
        while (true) {
          var r = this.uint8arr[this.pos++];
          num = num | (r & 127) << len;
          len += 7;
          if (r < 1 << 7) {
            return num >>> 0; // return unsigned number!
          }
          if (len > 35) {
            throw new Error('Integer out of range!');
          }
        }
      }

      /**
       * Read string of variable length
       * * varUint is used to store the length of the string
       *
       * @return {String} The read String.
       */

    }, {
      key: 'readVarString',
      value: function readVarString() {
        var len = this.readVarUint();
        var bytes = new Array(len);
        for (var i = 0; i < len; i++) {
          bytes[i] = this.uint8arr[this.pos++];
        }
        var encodedString = bytes.map(function (b) {
          return String.fromCodePoint(b);
        }).join('');
        return decodeURIComponent(escape(encodedString));
      }

      /**
       * Look ahead and read varString without incrementing position
       */

    }, {
      key: 'peekVarString',
      value: function peekVarString() {
        var pos = this.pos;
        var s = this.readVarString();
        this.pos = pos;
        return s;
      }

      /**
       * Read ID.
       * * If first varUint read is 0xFFFFFF a RootID is returned.
       * * Otherwise an ID is returned.
       *
       * @return ID
       */

    }, {
      key: 'readID',
      value: function readID() {
        var user = this.readVarUint();
        if (user === RootFakeUserID) {
          // read property name and type id
          var rid = new RootID(this.readVarString(), null);
          rid.type = this.readVarUint();
          return rid;
        }
        return new ID(user, this.readVarUint());
      }
    }, {
      key: 'length',
      get: function get$$1() {
        return this.uint8arr.length;
      }
    }]);
    return BinaryDecoder;
  }();

  // TODO should have the same base class as Item

  var GC = function () {
    function GC() {
      classCallCheck(this, GC);

      this._id = null;
      this._length = 0;
    }

    createClass(GC, [{
      key: '_integrate',
      value: function _integrate(y) {
        var id = this._id;
        var userState = y.ss.getState(id.user);
        if (id.clock === userState) {
          y.ss.setState(id.user, id.clock + this._length);
        }
        y.ds.mark(this._id, this._length, true);
        var n = y.os.put(this);
        var prev = n.prev().val;
        if (prev !== null && prev.constructor === GC && prev._id.user === n.val._id.user && prev._id.clock + prev._length === n.val._id.clock) {
          // TODO: do merging for all items!
          prev._length += n.val._length;
          y.os.delete(n.val._id);
          n = prev;
        }
        if (n.val) {
          n = n.val;
        }
        var next = y.os.findNext(n._id);
        if (next !== null && next.constructor === GC && next._id.user === n._id.user && next._id.clock === n._id.clock + n._length) {
          n._length += next._length;
          y.os.delete(next._id);
        }
        if (id.user !== RootFakeUserID) {
          if (y.connector !== null && (y.connector._forwardAppliedStructs || id.user === y.userID)) {
            y.connector.broadcastStruct(this);
          }
          if (y.persistence !== null) {
            y.persistence.saveStruct(y, this);
          }
        }
      }

      /**
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       * @private
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        encoder.writeUint8(getStructReference(this.constructor));
        encoder.writeID(this._id);
        encoder.writeVarUint(this._length);
      }

      /**
       * Read the next Item in a Decoder and fill this Item with the read data.
       *
       * This is called when data is received from a remote peer.
       *
       * @param {Y} y The Yjs instance that this Item belongs to.
       * @param {BinaryDecoder} decoder The decoder object to read data from.
       * @private
       */

    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var id = decoder.readID();
        this._id = id;
        this._length = decoder.readVarUint();
        var missing = [];
        if (y.ss.getState(id.user) < id.clock) {
          missing.push(new ID(id.user, id.clock - 1));
        }
        return missing;
      }
    }, {
      key: '_splitAt',
      value: function _splitAt() {
        return this;
      }
    }, {
      key: '_clonePartial',
      value: function _clonePartial(diff) {
        var gc = new GC();
        gc._id = new ID(this._id.user, this._id.clock + diff);
        gc._length = this._length - diff;
        return gc;
      }
    }, {
      key: '_deleted',
      get: function get$$1() {
        return true;
      }
    }]);
    return GC;
  }();

  var MissingEntry = function MissingEntry(decoder, missing, struct) {
    classCallCheck(this, MissingEntry);

    this.decoder = decoder;
    this.missing = missing.length;
    this.struct = struct;
  };

  /**
   * @private
   * Integrate remote struct
   * When a remote struct is integrated, other structs might be ready to ready to
   * integrate.
   */


  function _integrateRemoteStructHelper(y, struct) {
    var id = struct._id;
    if (id === undefined) {
      struct._integrate(y);
    } else {
      if (y.ss.getState(id.user) > id.clock) {
        return;
      }
      if (!y.gcEnabled || struct.constructor === GC || struct._parent.constructor !== GC && struct._parent._deleted === false) {
        // Is either a GC or Item with an undeleted parent
        // save to integrate
        struct._integrate(y);
      } else {
        // Is an Item. parent was deleted.
        struct._gc(y);
      }
      var msu = y._missingStructs.get(id.user);
      if (msu != null) {
        var clock = id.clock;
        var finalClock = clock + struct._length;
        for (; clock < finalClock; clock++) {
          var missingStructs = msu.get(clock);
          if (missingStructs !== undefined) {
            missingStructs.forEach(function (missingDef) {
              missingDef.missing--;
              if (missingDef.missing === 0) {
                var decoder = missingDef.decoder;
                var oldPos = decoder.pos;
                var missing = missingDef.struct._fromBinary(y, decoder);
                decoder.pos = oldPos;
                if (missing.length === 0) {
                  y._readyToIntegrate.push(missingDef.struct);
                }
              }
            });
            msu.delete(clock);
          }
        }
      }
    }
  }

  function stringifyStructs(y, decoder, strBuilder) {
    var len = decoder.readUint32();
    for (var i = 0; i < len; i++) {
      var reference = decoder.readVarUint();
      var Constr = getStruct(reference);
      var struct = new Constr();
      var missing = struct._fromBinary(y, decoder);
      var logMessage = '  ' + struct._logString();
      if (missing.length > 0) {
        logMessage += ' .. missing: ' + missing.map(logID).join(', ');
      }
      strBuilder.push(logMessage);
    }
  }

  function integrateRemoteStructs(y, decoder) {
    var len = decoder.readUint32();
    for (var i = 0; i < len; i++) {
      var reference = decoder.readVarUint();
      var Constr = getStruct(reference);
      var struct = new Constr();
      var decoderPos = decoder.pos;
      var missing = struct._fromBinary(y, decoder);
      if (missing.length === 0) {
        while (struct != null) {
          _integrateRemoteStructHelper(y, struct);
          struct = y._readyToIntegrate.shift();
        }
      } else {
        var _decoder = new BinaryDecoder(decoder.uint8arr);
        _decoder.pos = decoderPos;
        var missingEntry = new MissingEntry(_decoder, missing, struct);
        var missingStructs = y._missingStructs;
        for (var _i = missing.length - 1; _i >= 0; _i--) {
          var m = missing[_i];
          if (!missingStructs.has(m.user)) {
            missingStructs.set(m.user, new Map());
          }
          var msu = missingStructs.get(m.user);
          if (!msu.has(m.clock)) {
            msu.set(m.clock, []);
          }
          var mArray = msu = msu.get(m.clock);
          mArray.push(missingEntry);
        }
      }
    }
  }

  var bits7 = 127;
  var bits8 = 255;

  /**
   * A BinaryEncoder handles the encoding to an ArrayBuffer.
   */

  var BinaryEncoder = function () {
    function BinaryEncoder() {
      classCallCheck(this, BinaryEncoder);

      // TODO: implement chained Uint8Array buffers instead of Array buffer
      // TODO: Rewrite all methods as functions!
      this.data = [];
    }

    /**
     * The current length of the encoded data.
     */


    createClass(BinaryEncoder, [{
      key: 'createBuffer',


      /**
       * Create an ArrayBuffer.
       *
       * @return {Uint8Array} A Uint8Array that represents the written data.
       */
      value: function createBuffer() {
        return Uint8Array.from(this.data).buffer;
      }

      /**
       * Write one byte as an unsigned integer.
       *
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'writeUint8',
      value: function writeUint8(num) {
        this.data.push(num & bits8);
      }

      /**
       * Write one byte as an unsigned Integer at a specific location.
       *
       * @param {number} pos The location where the data will be written.
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'setUint8',
      value: function setUint8(pos, num) {
        this.data[pos] = num & bits8;
      }

      /**
       * Write two bytes as an unsigned integer.
       *
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'writeUint16',
      value: function writeUint16(num) {
        this.data.push(num & bits8, num >>> 8 & bits8);
      }
      /**
       * Write two bytes as an unsigned integer at a specific location.
       *
       * @param {number} pos The location where the data will be written.
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'setUint16',
      value: function setUint16(pos, num) {
        this.data[pos] = num & bits8;
        this.data[pos + 1] = num >>> 8 & bits8;
      }

      /**
       * Write two bytes as an unsigned integer
       *
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'writeUint32',
      value: function writeUint32(num) {
        for (var i = 0; i < 4; i++) {
          this.data.push(num & bits8);
          num >>>= 8;
        }
      }

      /**
       * Write two bytes as an unsigned integer at a specific location.
       *
       * @param {number} pos The location where the data will be written.
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'setUint32',
      value: function setUint32(pos, num) {
        for (var i = 0; i < 4; i++) {
          this.data[pos + i] = num & bits8;
          num >>>= 8;
        }
      }

      /**
       * Write a variable length unsigned integer.
       *
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'writeVarUint',
      value: function writeVarUint(num) {
        while (num >= 128) {
          this.data.push(128 | bits7 & num);
          num >>>= 7;
        }
        this.data.push(bits7 & num);
      }

      /**
       * Write a variable length string.
       *
       * @param {String} str The string that is to be encoded.
       */

    }, {
      key: 'writeVarString',
      value: function writeVarString(str) {
        var encodedString = unescape(encodeURIComponent(str));
        var bytes = encodedString.split('').map(function (c) {
          return c.codePointAt();
        });
        var len = bytes.length;
        this.writeVarUint(len);
        for (var i = 0; i < len; i++) {
          this.data.push(bytes[i]);
        }
      }

      /**
       * Write an ID at the current position.
       *
       * @param {ID} id The ID that is to be written.
       */

    }, {
      key: 'writeID',
      value: function writeID(id) {
        var user = id.user;
        this.writeVarUint(user);
        if (user !== RootFakeUserID) {
          this.writeVarUint(id.clock);
        } else {
          this.writeVarString(id.name);
          this.writeVarUint(id.type);
        }
      }
    }, {
      key: 'length',
      get: function get$$1() {
        return this.data.length;
      }

      /**
       * The current write pointer (the same as {@link length}).
       */

    }, {
      key: 'pos',
      get: function get$$1() {
        return this.data.length;
      }
    }]);
    return BinaryEncoder;
  }();

  function readStateSet(decoder) {
    var ss = new Map();
    var ssLength = decoder.readUint32();
    for (var i = 0; i < ssLength; i++) {
      var user = decoder.readVarUint();
      var clock = decoder.readVarUint();
      ss.set(user, clock);
    }
    return ss;
  }

  function writeStateSet(y, encoder) {
    var lenPosition = encoder.pos;
    var len = 0;
    encoder.writeUint32(0);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = y.ss.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = slicedToArray(_step.value, 2),
            user = _step$value[0],
            clock = _step$value[1];

        encoder.writeVarUint(user);
        encoder.writeVarUint(clock);
        len++;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    encoder.setUint32(lenPosition, len);
  }

  function writeDeleteSet(y, encoder) {
    var currentUser = null;
    var currentLength = void 0;
    var lastLenPos = void 0;

    var numberOfUsers = 0;
    var laterDSLenPus = encoder.pos;
    encoder.writeUint32(0);

    y.ds.iterate(null, null, function (n) {
      var user = n._id.user;
      var clock = n._id.clock;
      var len = n.len;
      var gc = n.gc;
      if (currentUser !== user) {
        numberOfUsers++;
        // a new user was found
        if (currentUser !== null) {
          // happens on first iteration
          encoder.setUint32(lastLenPos, currentLength);
        }
        currentUser = user;
        encoder.writeVarUint(user);
        // pseudo-fill pos
        lastLenPos = encoder.pos;
        encoder.writeUint32(0);
        currentLength = 0;
      }
      encoder.writeVarUint(clock);
      encoder.writeVarUint(len);
      encoder.writeUint8(gc ? 1 : 0);
      currentLength++;
    });
    if (currentUser !== null) {
      // happens on first iteration
      encoder.setUint32(lastLenPos, currentLength);
    }
    encoder.setUint32(laterDSLenPus, numberOfUsers);
  }

  function readDeleteSet(y, decoder) {
    var dsLength = decoder.readUint32();

    var _loop = function _loop(i) {
      var user = decoder.readVarUint();
      var dv = [];
      var dvLength = decoder.readUint32();
      for (var j = 0; j < dvLength; j++) {
        var from = decoder.readVarUint();
        var len = decoder.readVarUint();
        var gc = decoder.readUint8() === 1;
        dv.push([from, len, gc]);
      }
      if (dvLength > 0) {
        var pos = 0;
        var d = dv[pos];
        var deletions = [];
        y.ds.iterate(new ID(user, 0), new ID(user, Number.MAX_VALUE), function (n) {
          // cases:
          // 1. d deletes something to the right of n
          //  => go to next n (break)
          // 2. d deletes something to the left of n
          //  => create deletions
          //  => reset d accordingly
          //  *)=> if d doesn't delete anything anymore, go to next d (continue)
          // 3. not 2) and d deletes something that also n deletes
          //  => reset d so that it doesn't contain n's deletion
          //  *)=> if d does not delete anything anymore, go to next d (continue)
          while (d != null) {
            var diff = 0; // describe the diff of length in 1) and 2)
            if (n._id.clock + n.len <= d[0]) {
              // 1)
              break;
            } else if (d[0] < n._id.clock) {
              // 2)
              // delete maximum the len of d
              // else delete as much as possible
              diff = Math.min(n._id.clock - d[0], d[1]);
              // deleteItemRange(y, user, d[0], diff, true)
              deletions.push([user, d[0], diff]);
            } else {
              // 3)
              diff = n._id.clock + n.len - d[0]; // never null (see 1)
              if (d[2] && !n.gc) {
                // d marks as gc'd but n does not
                // then delete either way
                // deleteItemRange(y, user, d[0], Math.min(diff, d[1]), true)
                deletions.push([user, d[0], Math.min(diff, d[1])]);
              }
            }
            if (d[1] <= diff) {
              // d doesn't delete anything anymore
              d = dv[++pos];
            } else {
              d[0] = d[0] + diff; // reset pos
              d[1] = d[1] - diff; // reset length
            }
          }
        });
        // TODO: It would be more performant to apply the deletes in the above loop
        // Adapt the Tree implementation to support delete while iterating
        for (var _i = deletions.length - 1; _i >= 0; _i--) {
          var del = deletions[_i];
          deleteItemRange(y, del[0], del[1], del[2], true);
        }
        // for the rest.. just apply it
        for (; pos < dv.length; pos++) {
          d = dv[pos];
          deleteItemRange(y, user, d[0], d[1], true);
          // deletions.push([user, d[0], d[1], d[2]])
        }
      }
    };

    for (var i = 0; i < dsLength; i++) {
      _loop(i);
    }
  }

  function stringifySyncStep1(y, decoder, strBuilder) {
    var auth = decoder.readVarString();
    var protocolVersion = decoder.readVarUint();
    strBuilder.push('  - auth: "' + auth + '"');
    strBuilder.push('  - protocolVersion: ' + protocolVersion);
    // write SS
    var ssBuilder = [];
    var len = decoder.readUint32();
    for (var i = 0; i < len; i++) {
      var user = decoder.readVarUint();
      var clock = decoder.readVarUint();
      ssBuilder.push('(' + user + ':' + clock + ')');
    }
    strBuilder.push('  == SS: ' + ssBuilder.join(','));
  }

  function sendSyncStep1(connector, syncUser) {
    var encoder = new BinaryEncoder();
    encoder.writeVarString(connector.y.room);
    encoder.writeVarString('sync step 1');
    encoder.writeVarString(connector.authInfo || '');
    encoder.writeVarUint(connector.protocolVersion);
    writeStateSet(connector.y, encoder);
    connector.send(syncUser, encoder.createBuffer());
  }

  /**
   * @private
   * Write all Items that are not not included in ss to
   * the encoder object.
   */
  function writeStructs(y, encoder, ss) {
    var lenPos = encoder.pos;
    encoder.writeUint32(0);
    var len = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = y.ss.state.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var user = _step.value;

        var clock = ss.get(user) || 0;
        if (user !== RootFakeUserID) {
          var minBound = new ID(user, clock);
          var overlappingLeft = y.os.findPrev(minBound);
          var rightID = overlappingLeft === null ? null : overlappingLeft._id;
          if (rightID !== null && rightID.user === user && rightID.clock + overlappingLeft._length > clock) {
            var struct = overlappingLeft._clonePartial(clock - rightID.clock);
            struct._toBinary(encoder);
            len++;
          }
          y.os.iterate(minBound, new ID(user, Number.MAX_VALUE), function (struct) {
            struct._toBinary(encoder);
            len++;
          });
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    encoder.setUint32(lenPos, len);
  }

  function readSyncStep1(decoder, encoder, y, senderConn, sender) {
    var protocolVersion = decoder.readVarUint();
    // check protocol version
    if (protocolVersion !== y.connector.protocolVersion) {
      console.warn('You tried to sync with a Yjs instance that has a different protocol version\n      (You: ' + protocolVersion + ', Client: ' + protocolVersion + ').\n      ');
      y.destroy();
    }
    // write sync step 2
    encoder.writeVarString('sync step 2');
    encoder.writeVarString(y.connector.authInfo || '');
    var ss = readStateSet(decoder);
    writeStructs(y, encoder, ss);
    writeDeleteSet(y, encoder);
    y.connector.send(senderConn.uid, encoder.createBuffer());
    senderConn.receivedSyncStep2 = true;
    if (y.connector.role === 'slave') {
      sendSyncStep1(y.connector, sender);
    }
  }

  function stringifySyncStep2(y, decoder, strBuilder) {
    strBuilder.push('     - auth: ' + decoder.readVarString());
    strBuilder.push('  == OS:');
    stringifyStructs(y, decoder, strBuilder);
    // write DS to string
    strBuilder.push('  == DS:');
    var len = decoder.readUint32();
    for (var i = 0; i < len; i++) {
      var user = decoder.readVarUint();
      strBuilder.push('    User: ' + user + ': ');
      var len2 = decoder.readUint32();
      for (var j = 0; j < len2; j++) {
        var from = decoder.readVarUint();
        var to = decoder.readVarUint();
        var gc = decoder.readUint8() === 1;
        strBuilder.push('[' + from + ', ' + to + ', ' + gc + ']');
      }
    }
  }

  function readSyncStep2(decoder, encoder, y, senderConn, sender) {
    integrateRemoteStructs(y, decoder);
    readDeleteSet(y, decoder);
    y.connector._setSyncedWith(sender);
  }

  function messageToString(_ref) {
    var _ref2 = slicedToArray(_ref, 2),
        y = _ref2[0],
        buffer = _ref2[1];

    var decoder = new BinaryDecoder(buffer);
    decoder.readVarString(); // read roomname
    var type = decoder.readVarString();
    var strBuilder = [];
    strBuilder.push('\n === ' + type + ' ===');
    if (type === 'update') {
      stringifyStructs(y, decoder, strBuilder);
    } else if (type === 'sync step 1') {
      stringifySyncStep1(y, decoder, strBuilder);
    } else if (type === 'sync step 2') {
      stringifySyncStep2(y, decoder, strBuilder);
    } else {
      strBuilder.push('-- Unknown message type - probably an encoding issue!!!');
    }
    return strBuilder.join('\n');
  }

  function messageToRoomname(buffer) {
    var decoder = new BinaryDecoder(buffer);
    decoder.readVarString(); // roomname
    return decoder.readVarString(); // messageType
  }

  function logID(id) {
    if (id !== null && id._id != null) {
      id = id._id;
    }
    if (id === null) {
      return '()';
    } else if (id instanceof ID) {
      return '(' + id.user + ',' + id.clock + ')';
    } else if (id instanceof RootID) {
      return '(' + id.name + ',' + id.type + ')';
    } else if (id.constructor === Y) {
      return 'y';
    } else {
      throw new Error('This is not a valid ID!');
    }
  }

  /**
   * Helper utility to convert an item to a readable format.
   *
   * @param {String} name The name of the item class (YText, ItemString, ..).
   * @param {Item} item The item instance.
   * @param {String} [append] Additional information to append to the returned
   *                          string.
   * @return {String} A readable string that represents the item object.
   *
   * @private
   */
  function logItemHelper(name, item, append) {
    var left = item._left !== null ? item._left._lastId : null;
    var origin = item._origin !== null ? item._origin._lastId : null;
    return name + '(id:' + logID(item._id) + ',left:' + logID(left) + ',origin:' + logID(origin) + ',right:' + logID(item._right) + ',parent:' + logID(item._parent) + ',parentSub:' + item._parentSub + (append !== undefined ? ' - ' + append : '') + ')';
  }

  /**
   * @private
   * Delete all items in an ID-range
   * TODO: implement getItemCleanStartNode for better performance (only one lookup)
   */
  function deleteItemRange(y, user, clock, range, gcChildren) {
    var createDelete = y.connector !== null && y.connector._forwardAppliedStructs;
    var item = y.os.getItemCleanStart(new ID(user, clock));
    if (item !== null) {
      if (!item._deleted) {
        item._splitAt(y, range);
        item._delete(y, createDelete, true);
      }
      var itemLen = item._length;
      range -= itemLen;
      clock += itemLen;
      if (range > 0) {
        var node = y.os.findNode(new ID(user, clock));
        while (node !== null && node.val !== null && range > 0 && node.val._id.equals(new ID(user, clock))) {
          var nodeVal = node.val;
          if (!nodeVal._deleted) {
            nodeVal._splitAt(y, range);
            nodeVal._delete(y, createDelete, gcChildren);
          }
          var nodeLen = nodeVal._length;
          range -= nodeLen;
          clock += nodeLen;
          node = node.next();
        }
      }
    }
  }

  /**
   * @private
   * A Delete change is not a real Item, but it provides the same interface as an
   * Item. The only difference is that it will not be saved in the ItemStore
   * (OperationStore), but instead it is safed in the DeleteStore.
   */

  var Delete = function () {
    function Delete() {
      classCallCheck(this, Delete);

      this._target = null;
      this._length = null;
    }

    /**
     * @private
     * Read the next Item in a Decoder and fill this Item with the read data.
     *
     * This is called when data is received from a remote peer.
     *
     * @param {Y} y The Yjs instance that this Item belongs to.
     * @param {BinaryDecoder} decoder The decoder object to read data from.
     */


    createClass(Delete, [{
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        // TODO: set target, and add it to missing if not found
        // There is an edge case in p2p networks!
        var targetID = decoder.readID();
        this._targetID = targetID;
        this._length = decoder.readVarUint();
        if (y.os.getItem(targetID) === null) {
          return [targetID];
        } else {
          return [];
        }
      }

      /**
       * @private
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        encoder.writeUint8(getStructReference(this.constructor));
        encoder.writeID(this._targetID);
        encoder.writeVarUint(this._length);
      }

      /**
       * @private
       * Integrates this Item into the shared structure.
       *
       * This method actually applies the change to the Yjs instance. In the case of
       * Delete it marks the delete target as deleted.
       *
       * * If created remotely (a remote user deleted something),
       *   this Delete is applied to all structs in id-range.
       * * If created lokally (e.g. when y-array deletes a range of elements),
       *   this struct is broadcasted only (it is already executed)
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        var locallyCreated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!locallyCreated) {
          // from remote
          var id = this._targetID;
          deleteItemRange(y, id.user, id.clock, this._length, false);
        } else if (y.connector !== null) {
          // from local
          y.connector.broadcastStruct(this);
        }
        if (y.persistence !== null) {
          y.persistence.saveStruct(y, this);
        }
      }

      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return 'Delete - target: ' + logID(this._targetID) + ', len: ' + this._length;
      }
    }]);
    return Delete;
  }();

  /**
   * A transaction is created for every change on the Yjs model. It is possible
   * to bundle changes on the Yjs model in a single transaction to
   * minimize the number on messages sent and the number of observer calls.
   * If possible the user of this library should bundle as many changes as
   * possible. Here is an example to illustrate the advantages of bundling:
   *
   * @example
   * const map = y.define('map', YMap)
   * // Log content when change is triggered
   * map.observe(function () {
   *   console.log('change triggered')
   * })
   * // Each change on the map type triggers a log message:
   * map.set('a', 0) // => "change triggered"
   * map.set('b', 0) // => "change triggered"
   * // When put in a transaction, it will trigger the log after the transaction:
   * y.transact(function () {
   *   map.set('a', 1)
   *   map.set('b', 1)
   * }) // => "change triggered"
   *
   */
  var Transaction = function Transaction(y) {
    classCallCheck(this, Transaction);

    /**
     * @type {Y} The Yjs instance.
     */
    this.y = y;
    /**
     * All new types that are added during a transaction.
     * @type {Set<Item>}
     */
    this.newTypes = new Set();
    /**
     * All types that were directly modified (property added or child
     * inserted/deleted). New types are not included in this Set.
     * Maps from type to parentSubs (`item._parentSub = null` for YArray)
     * @type {Set<YType,String>}
     */
    this.changedTypes = new Map();
    // TODO: rename deletedTypes
    /**
     * Set of all deleted Types and Structs.
     * @type {Set<Item>}
     */
    this.deletedStructs = new Set();
    /**
     * Saves the old state set of the Yjs instance. If a state was modified,
     * the original value is saved here.
     * @type {Map<Number,Number>}
     */
    this.beforeState = new Map();
    /**
     * Stores the events for the types that observe also child elements.
     * It is mainly used by `observeDeep`.
     * @type {Map<YType,Array<YEvent>>}
     */
    this.changedParentTypes = new Map();
  };
  function transactionTypeChanged(y, type, sub) {
    if (type !== y && !type._deleted && !y._transaction.newTypes.has(type)) {
      var changedTypes = y._transaction.changedTypes;
      var subs = changedTypes.get(type);
      if (subs === undefined) {
        // create if it doesn't exist yet
        subs = new Set();
        changedTypes.set(type, subs);
      }
      subs.add(sub);
    }
  }

  /**
   * @private
   * Helper utility to split an Item (see {@link Item#_splitAt})
   * - copies all properties from a to b
   * - connects a to b
   * - assigns the correct _id
   * - saves b to os
   */
  function splitHelper(y, a, b, diff) {
    var aID = a._id;
    b._id = new ID(aID.user, aID.clock + diff);
    b._origin = a;
    b._left = a;
    b._right = a._right;
    if (b._right !== null) {
      b._right._left = b;
    }
    b._right_origin = a._right_origin;
    // do not set a._right_origin, as this will lead to problems when syncing
    a._right = b;
    b._parent = a._parent;
    b._parentSub = a._parentSub;
    b._deleted = a._deleted;
    // now search all relevant items to the right and update origin
    // if origin is not it foundOrigins, we don't have to search any longer
    var foundOrigins = new Set();
    foundOrigins.add(a);
    var o = b._right;
    while (o !== null && foundOrigins.has(o._origin)) {
      if (o._origin === a) {
        o._origin = b;
      }
      foundOrigins.add(o);
      o = o._right;
    }
    y.os.put(b);
    if (y._transaction.newTypes.has(a)) {
      y._transaction.newTypes.add(b);
    } else if (y._transaction.deletedStructs.has(a)) {
      y._transaction.deletedStructs.add(b);
    }
  }

  /**
   * Abstract class that represents any content.
   */

  var Item = function () {
    function Item() {
      classCallCheck(this, Item);

      /**
       * The uniqe identifier of this type.
       * @type {ID}
       */
      this._id = null;
      /**
       * The item that was originally to the left of this item.
       * @type {Item}
       */
      this._origin = null;
      /**
       * The item that is currently to the left of this item.
       * @type {Item}
       */
      this._left = null;
      /**
       * The item that is currently to the right of this item.
       * @type {Item}
       */
      this._right = null;
      /**
       * The item that was originally to the right of this item.
       * @type {Item}
       */
      this._right_origin = null;
      /**
       * The parent type.
       * @type {Y|YType}
       */
      this._parent = null;
      /**
       * If the parent refers to this item with some kind of key (e.g. YMap, the
       * key is specified here. The key is then used to refer to the list in which
       * to insert this item. If `parentSub = null` type._start is the list in
       * which to insert to. Otherwise it is `parent._start`.
       * @type {String}
       */
      this._parentSub = null;
      /**
       * Whether this item was deleted or not.
       * @type {Boolean}
       */
      this._deleted = false;
      /**
       * If this type's effect is reundone this type refers to the type that undid
       * this operation.
       * @type {Item}
       */
      this._redone = null;
    }

    /**
     * Creates an Item with the same effect as this Item (without position effect)
     *
     * @private
     */


    createClass(Item, [{
      key: '_copy',
      value: function _copy() {
        return new this.constructor();
      }

      /**
       * Redoes the effect of this operation.
       *
       * @param {Y} y The Yjs instance.
       *
       * @private
       */

    }, {
      key: '_redo',
      value: function _redo(y, redoitems) {
        if (this._redone !== null) {
          return this._redone;
        }
        var struct = this._copy();
        var left = this._left;
        var right = this;
        var parent = this._parent;
        // make sure that parent is redone
        if (parent._deleted === true && parent._redone === null) {
          // try to undo parent if it will be undone anyway
          if (!redoitems.has(parent) || !parent._redo(y, redoitems)) {
            return false;
          }
        }
        if (parent._redone !== null) {
          parent = parent._redone;
          // find next cloned items
          while (left !== null) {
            if (left._redone !== null && left._redone._parent === parent) {
              left = left._redone;
              break;
            }
            left = left._left;
          }
          while (right !== null) {
            if (right._redone !== null && right._redone._parent === parent) {
              right = right._redone;
            }
            right = right._right;
          }
        }
        struct._origin = left;
        struct._left = left;
        struct._right = right;
        struct._right_origin = right;
        struct._parent = parent;
        struct._parentSub = this._parentSub;
        struct._integrate(y);
        this._redone = struct;
        return true;
      }

      /**
       * Computes the last content address of this Item.
       *
       * @private
       */

    }, {
      key: '_splitAt',


      /**
       * Splits this Item so that another Items can be inserted in-between.
       * This must be overwritten if _length > 1
       * Returns right part after split
       * * diff === 0 => this
       * * diff === length => this._right
       * * otherwise => split _content and return right part of split
       * (see {@link ItemJSON}/{@link ItemString} for implementation)
       *
       * @private
       */
      value: function _splitAt(y, diff) {
        if (diff === 0) {
          return this;
        }
        return this._right;
      }

      /**
       * Mark this Item as deleted.
       *
       * @param {Y} y The Yjs instance
       * @param {boolean} createDelete Whether to propagate a message that this
       *                               Type was deleted.
       *
       * @private
       */

    }, {
      key: '_delete',
      value: function _delete(y) {
        var createDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (!this._deleted) {
          this._deleted = true;
          y.ds.mark(this._id, this._length, false);
          var del = new Delete();
          del._targetID = this._id;
          del._length = this._length;
          if (createDelete) {
            // broadcast and persists Delete
            del._integrate(y, true);
          } else if (y.persistence !== null) {
            // only persist Delete
            y.persistence.saveStruct(y, del);
          }
          transactionTypeChanged(y, this._parent, this._parentSub);
          y._transaction.deletedStructs.add(this);
        }
      }
    }, {
      key: '_gcChildren',
      value: function _gcChildren(y) {}
    }, {
      key: '_gc',
      value: function _gc(y) {
        var gc = new GC();
        gc._id = this._id;
        gc._length = this._length;
        y.os.delete(this._id);
        gc._integrate(y);
      }

      /**
       * This is called right before this Item receives any children.
       * It can be overwritten to apply pending changes before applying remote changes
       *
       * @private
       */

    }, {
      key: '_beforeChange',
      value: function _beforeChange() {}
      // nop


      /**
       * Integrates this Item into the shared structure.
       *
       * This method actually applies the change to the Yjs instance. In case of
       * Item it connects _left and _right to this Item and calls the
       * {@link Item#beforeChange} method.
       *
       * * Integrate the struct so that other types/structs can see it
       * * Add this struct to y.os
       * * Check if this is struct deleted
       *
       * @private
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        y._transaction.newTypes.add(this);
        var parent = this._parent;
        var selfID = this._id;
        var user = selfID === null ? y.userID : selfID.user;
        var userState = y.ss.getState(user);
        if (selfID === null) {
          this._id = y.ss.getNextID(this._length);
        } else if (selfID.user === RootFakeUserID) ; else if (selfID.clock < userState) {
          // already applied..
          return [];
        } else if (selfID.clock === userState) {
          y.ss.setState(selfID.user, userState + this._length);
        } else {
          // missing content from user
          throw new Error('Can not apply yet!');
        }
        if (!parent._deleted && !y._transaction.changedTypes.has(parent) && !y._transaction.newTypes.has(parent)) {
          // this is the first time parent is updated
          // or this types is new
          this._parent._beforeChange();
        }

        /*
        # $this has to find a unique position between origin and the next known character
        # case 1: $origin equals $o.origin: the $creator parameter decides if left or right
        #         let $OL= [o1,o2,o3,o4], whereby $this is to be inserted between o1 and o4
        #         o2,o3 and o4 origin is 1 (the position of o2)
        #         there is the case that $this.creator < o2.creator, but o3.creator < $this.creator
        #         then o2 knows o3. Since on another client $OL could be [o1,o3,o4] the problem is complex
        #         therefore $this would be always to the right of o3
        # case 2: $origin < $o.origin
        #         if current $this insert_position > $o origin: $this ins
        #         else $insert_position will not change
        #         (maybe we encounter case 1 later, then this will be to the right of $o)
        # case 3: $origin > $o.origin
        #         $this insert_position is to the left of $o (forever!)
        */
        // handle conflicts
        var o = void 0;
        // set o to the first conflicting item
        if (this._left !== null) {
          o = this._left._right;
        } else if (this._parentSub !== null) {
          o = this._parent._map.get(this._parentSub) || null;
        } else {
          o = this._parent._start;
        }
        var conflictingItems = new Set();
        var itemsBeforeOrigin = new Set();
        // Let c in conflictingItems, b in itemsBeforeOrigin
        // ***{origin}bbbb{this}{c,b}{c,b}{o}***
        // Note that conflictingItems is a subset of itemsBeforeOrigin
        while (o !== null && o !== this._right) {
          itemsBeforeOrigin.add(o);
          conflictingItems.add(o);
          if (this._origin === o._origin) {
            // case 1
            if (o._id.user < this._id.user) {
              this._left = o;
              conflictingItems.clear();
            }
          } else if (itemsBeforeOrigin.has(o._origin)) {
            // case 2
            if (!conflictingItems.has(o._origin)) {
              this._left = o;
              conflictingItems.clear();
            }
          } else {
            break;
          }
          // TODO: try to use right_origin instead.
          // Then you could basically omit conflictingItems!
          // Note: you probably can't use right_origin in every case.. only when setting _left
          o = o._right;
        }
        // reconnect left/right + update parent map/start if necessary
        var parentSub = this._parentSub;
        if (this._left === null) {
          var right = void 0;
          if (parentSub !== null) {
            var pmap = parent._map;
            right = pmap.get(parentSub) || null;
            pmap.set(parentSub, this);
          } else {
            right = parent._start;
            parent._start = this;
          }
          this._right = right;
          if (right !== null) {
            right._left = this;
          }
        } else {
          var left = this._left;
          var _right = left._right;
          this._right = _right;
          left._right = this;
          if (_right !== null) {
            _right._left = this;
          }
        }
        if (parent._deleted) {
          this._delete(y, false);
        }
        y.os.put(this);
        transactionTypeChanged(y, parent, parentSub);
        if (this._id.user !== RootFakeUserID) {
          if (y.connector !== null && (y.connector._forwardAppliedStructs || this._id.user === y.userID)) {
            y.connector.broadcastStruct(this);
          }
          if (y.persistence !== null) {
            y.persistence.saveStruct(y, this);
          }
        }
      }

      /**
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       *
       * @private
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        encoder.writeUint8(getStructReference(this.constructor));
        var info = 0;
        if (this._origin !== null) {
          info += 1; // origin is defined
        }
        // TODO: remove
        /* no longer send _left
        if (this._left !== this._origin) {
          info += 0b10 // do not copy origin to left
        }
        */
        if (this._right_origin !== null) {
          info += 4;
        }
        if (this._parentSub !== null) {
          info += 8;
        }
        encoder.writeUint8(info);
        encoder.writeID(this._id);
        if (info & 1) {
          encoder.writeID(this._origin._lastId);
        }
        // TODO: remove
        /* see above
        if (info & 0b10) {
          encoder.writeID(this._left._lastId)
        }
        */
        if (info & 4) {
          encoder.writeID(this._right_origin._id);
        }
        if ((info & 5) === 0) {
          // neither origin nor right is defined
          encoder.writeID(this._parent._id);
        }
        if (info & 8) {
          encoder.writeVarString(JSON.stringify(this._parentSub));
        }
      }

      /**
       * Read the next Item in a Decoder and fill this Item with the read data.
       *
       * This is called when data is received from a remote peer.
       *
       * @param {Y} y The Yjs instance that this Item belongs to.
       * @param {BinaryDecoder} decoder The decoder object to read data from.
       *
       * @private
       */

    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = [];
        var info = decoder.readUint8();
        var id = decoder.readID();
        this._id = id;
        // read origin
        if (info & 1) {
          // origin != null
          var originID = decoder.readID();
          // we have to query for left again because it might have been split/merged..
          var origin = y.os.getItemCleanEnd(originID);
          if (origin === null) {
            missing.push(originID);
          } else {
            this._origin = origin;
            this._left = this._origin;
          }
        }
        // read right
        if (info & 4) {
          // right != null
          var rightID = decoder.readID();
          // we have to query for right again because it might have been split/merged..
          var right = y.os.getItemCleanStart(rightID);
          if (right === null) {
            missing.push(rightID);
          } else {
            this._right = right;
            this._right_origin = right;
          }
        }
        // read parent
        if ((info & 5) === 0) {
          // neither origin nor right is defined
          var parentID = decoder.readID();
          // parent does not change, so we don't have to search for it again
          if (this._parent === null) {
            var parent = void 0;
            if (parentID.constructor === RootID) {
              parent = y.os.get(parentID);
            } else {
              parent = y.os.getItem(parentID);
            }
            if (parent === null) {
              missing.push(parentID);
            } else {
              this._parent = parent;
            }
          }
        } else if (this._parent === null) {
          if (this._origin !== null) {
            if (this._origin.constructor === GC) {
              // if origin is a gc, set parent also gc'd
              this._parent = this._origin;
            } else {
              this._parent = this._origin._parent;
            }
          } else if (this._right_origin !== null) {
            // if origin is a gc, set parent also gc'd
            if (this._right_origin.constructor === GC) {
              this._parent = this._right_origin;
            } else {
              this._parent = this._right_origin._parent;
            }
          }
        }
        if (info & 8) {
          // TODO: maybe put this in read parent condition (you can also read parentsub from left/right)
          this._parentSub = JSON.parse(decoder.readVarString());
        }
        if (y.ss.getState(id.user) < id.clock) {
          missing.push(new ID(id.user, id.clock - 1));
        }
        return missing;
      }
    }, {
      key: '_lastId',
      get: function get$$1() {
        return new ID(this._id.user, this._id.clock + this._length - 1);
      }

      /**
       * Computes the length of this Item.
       *
       * @private
       */

    }, {
      key: '_length',
      get: function get$$1() {
        return 1;
      }

      /**
       * Should return false if this Item is some kind of meta information
       * (e.g. format information).
       *
       * * Whether this Item should be addressable via `yarray.get(i)`
       * * Whether this Item should be counted when computing yarray.length
       *
       * @private
       */

    }, {
      key: '_countable',
      get: function get$$1() {
        return true;
      }
    }]);
    return Item;
  }();

  /**
   * General event handler implementation.
   */
  var EventHandler = function () {
    function EventHandler() {
      classCallCheck(this, EventHandler);

      this.eventListeners = [];
    }

    /**
     * To prevent memory leaks, call this method when the eventListeners won't be
     * used anymore.
     */


    createClass(EventHandler, [{
      key: "destroy",
      value: function destroy() {
        this.eventListeners = null;
      }

      /**
       * Adds an event listener that is called when
       * {@link EventHandler#callEventListeners} is called.
       *
       * @param {Function} f The event handler.
       */

    }, {
      key: "addEventListener",
      value: function addEventListener(f) {
        this.eventListeners.push(f);
      }

      /**
       * Removes an event listener.
       *
       * @param {Function} f The event handler that was added with
       *                     {@link EventHandler#addEventListener}
       */

    }, {
      key: "removeEventListener",
      value: function removeEventListener(f) {
        this.eventListeners = this.eventListeners.filter(function (g) {
          return f !== g;
        });
      }

      /**
       * Removes all event listeners.
       */

    }, {
      key: "removeAllEventListeners",
      value: function removeAllEventListeners() {
        this.eventListeners = [];
      }

      /**
       * Call all event listeners that were added via
       * {@link EventHandler#addEventListener}.
       *
       * @param {Transaction} transaction The transaction object // TODO: do we need this?
       * @param {YEvent} event An event object that describes the change on a type.
       */

    }, {
      key: "callEventListeners",
      value: function callEventListeners(transaction, event) {
        for (var i = 0; i < this.eventListeners.length; i++) {
          try {
            var f = this.eventListeners[i];
            f(event);
          } catch (e) {
            /*
              Your observer threw an error. This error was caught so that Yjs
              can ensure data consistency! In order to debug this error you
              have to check "Pause On Caught Exceptions" in developer tools.
            */
            console.error(e);
          }
        }
      }
    }]);
    return EventHandler;
  }();

  // restructure children as if they were inserted one after another
  function integrateChildren(y, start) {
    var right = void 0;
    do {
      right = start._right;
      start._right = null;
      start._right_origin = null;
      start._origin = start._left;
      start._integrate(y);
      start = right;
    } while (right !== null);
  }

  function gcChildren(y, item) {
    while (item !== null) {
      item._delete(y, false, true);
      item._gc(y);
      item = item._right;
    }
  }

  /**
   * Abstract Yjs Type class
   */

  var Type = function (_Item) {
    inherits(Type, _Item);

    function Type() {
      classCallCheck(this, Type);

      var _this = possibleConstructorReturn(this, (Type.__proto__ || Object.getPrototypeOf(Type)).call(this));

      _this._map = new Map();
      _this._start = null;
      _this._y = null;
      _this._eventHandler = new EventHandler();
      _this._deepEventHandler = new EventHandler();
      return _this;
    }

    /**
     * Compute the path from this type to the specified target.
     *
     * @example
     * It should be accessible via `this.get(result[0]).get(result[1])..`
     * const path = type.getPathTo(child)
     * // assuming `type instanceof YArray`
     * console.log(path) // might look like => [2, 'key1']
     * child === type.get(path[0]).get(path[1])
     *
     * @param {YType} type Type target
     * @return {Array<string>} Path to the target
     */


    createClass(Type, [{
      key: 'getPathTo',
      value: function getPathTo(type) {
        if (type === this) {
          return [];
        }
        var path = [];
        var y = this._y;
        while (type !== this && type !== y) {
          var parent = type._parent;
          if (type._parentSub !== null) {
            path.unshift(type._parentSub);
          } else {
            // parent is array-ish
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = parent[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = slicedToArray(_step.value, 2),
                    i = _step$value[0],
                    child = _step$value[1];

                if (child === type) {
                  path.unshift(i);
                  break;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
          type = parent;
        }
        if (type !== this) {
          throw new Error('The type is not a child of this node');
        }
        return path;
      }

      /**
       * @private
       * Call event listeners with an event. This will also add an event to all
       * parents (for `.observeDeep` handlers).
       */

    }, {
      key: '_callEventHandler',
      value: function _callEventHandler(transaction, event) {
        var changedParentTypes = transaction.changedParentTypes;
        this._eventHandler.callEventListeners(transaction, event);
        var type = this;
        while (type !== this._y) {
          var events = changedParentTypes.get(type);
          if (events === undefined) {
            events = [];
            changedParentTypes.set(type, events);
          }
          events.push(event);
          type = type._parent;
        }
      }

      /**
       * @private
       * Helper method to transact if the y instance is available.
       *
       * TODO: Currently event handlers are not thrown when a type is not registered
       *       with a Yjs instance.
       */

    }, {
      key: '_transact',
      value: function _transact(f) {
        var y = this._y;
        if (y !== null) {
          y.transact(f);
        } else {
          f(y);
        }
      }

      /**
       * Observe all events that are created on this type.
       *
       * @param {Function} f Observer function
       */

    }, {
      key: 'observe',
      value: function observe(f) {
        this._eventHandler.addEventListener(f);
      }

      /**
       * Observe all events that are created by this type and its children.
       *
       * @param {Function} f Observer function
       */

    }, {
      key: 'observeDeep',
      value: function observeDeep(f) {
        this._deepEventHandler.addEventListener(f);
      }

      /**
       * Unregister an observer function.
       *
       * @param {Function} f Observer function
       */

    }, {
      key: 'unobserve',
      value: function unobserve(f) {
        this._eventHandler.removeEventListener(f);
      }

      /**
       * Unregister an observer function.
       *
       * @param {Function} f Observer function
       */

    }, {
      key: 'unobserveDeep',
      value: function unobserveDeep(f) {
        this._deepEventHandler.removeEventListener(f);
      }

      /**
       * @private
       * Integrate this type into the Yjs instance.
       *
       * * Save this struct in the os
       * * This type is sent to other client
       * * Observer functions are fired
       *
       * @param {Y} y The Yjs instance
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        get(Type.prototype.__proto__ || Object.getPrototypeOf(Type.prototype), '_integrate', this).call(this, y);
        this._y = y;
        // when integrating children we must make sure to
        // integrate start
        var start = this._start;
        if (start !== null) {
          this._start = null;
          integrateChildren(y, start);
        }
        // integrate map children
        var map = this._map;
        this._map = new Map();
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = map.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var t = _step2.value;

            // TODO make sure that right elements are deleted!
            integrateChildren(y, t);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }, {
      key: '_gcChildren',
      value: function _gcChildren(y) {
        gcChildren(y, this._start);
        this._start = null;
        this._map.forEach(function (item) {
          gcChildren(y, item);
        });
        this._map = new Map();
      }
    }, {
      key: '_gc',
      value: function _gc(y) {
        this._gcChildren(y);
        get(Type.prototype.__proto__ || Object.getPrototypeOf(Type.prototype), '_gc', this).call(this, y);
      }

      /**
       * @private
       * Mark this Item as deleted.
       *
       * @param {Y} y The Yjs instance
       * @param {boolean} createDelete Whether to propagate a message that this
       *                               Type was deleted.
       * @param {boolean} [gcChildren=y._hasUndoManager===false] Whether to garbage
       *                                         collect the children of this type.
       */

    }, {
      key: '_delete',
      value: function _delete(y, createDelete, gcChildren) {
        if (gcChildren === undefined || !y.gcEnabled) {
          gcChildren = y._hasUndoManager === false && y.gcEnabled;
        }
        get(Type.prototype.__proto__ || Object.getPrototypeOf(Type.prototype), '_delete', this).call(this, y, createDelete, gcChildren);
        y._transaction.changedTypes.delete(this);
        // delete map types
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this._map.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var value = _step3.value;

            if (value instanceof Item && !value._deleted) {
              value._delete(y, false, gcChildren);
            }
          }
          // delete array types
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        var t = this._start;
        while (t !== null) {
          if (!t._deleted) {
            t._delete(y, false, gcChildren);
          }
          t = t._right;
        }
        if (gcChildren) {
          this._gcChildren(y);
        }
      }
    }]);
    return Type;
  }(Item);

  var ItemJSON = function (_Item) {
    inherits(ItemJSON, _Item);

    function ItemJSON() {
      classCallCheck(this, ItemJSON);

      var _this = possibleConstructorReturn(this, (ItemJSON.__proto__ || Object.getPrototypeOf(ItemJSON)).call(this));

      _this._content = null;
      return _this;
    }

    createClass(ItemJSON, [{
      key: '_copy',
      value: function _copy() {
        var struct = get(ItemJSON.prototype.__proto__ || Object.getPrototypeOf(ItemJSON.prototype), '_copy', this).call(this);
        struct._content = this._content;
        return struct;
      }
    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(ItemJSON.prototype.__proto__ || Object.getPrototypeOf(ItemJSON.prototype), '_fromBinary', this).call(this, y, decoder);
        var len = decoder.readVarUint();
        this._content = new Array(len);
        for (var i = 0; i < len; i++) {
          var ctnt = decoder.readVarString();
          var parsed = void 0;
          if (ctnt === 'undefined') {
            parsed = undefined;
          } else {
            parsed = JSON.parse(ctnt);
          }
          this._content[i] = parsed;
        }
        return missing;
      }
    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(ItemJSON.prototype.__proto__ || Object.getPrototypeOf(ItemJSON.prototype), '_toBinary', this).call(this, encoder);
        var len = this._content.length;
        encoder.writeVarUint(len);
        for (var i = 0; i < len; i++) {
          var encoded = void 0;
          var content = this._content[i];
          if (content === undefined) {
            encoded = 'undefined';
          } else {
            encoded = JSON.stringify(content);
          }
          encoder.writeVarString(encoded);
        }
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('ItemJSON', this, 'content:' + JSON.stringify(this._content));
      }
    }, {
      key: '_splitAt',
      value: function _splitAt(y, diff) {
        if (diff === 0) {
          return this;
        } else if (diff >= this._length) {
          return this._right;
        }
        var item = new ItemJSON();
        item._content = this._content.splice(diff);
        splitHelper(y, this, item, diff);
        return item;
      }
    }, {
      key: '_length',
      get: function get$$1() {
        return this._content.length;
      }
    }]);
    return ItemJSON;
  }(Item);

  var ItemString = function (_Item) {
    inherits(ItemString, _Item);

    function ItemString() {
      classCallCheck(this, ItemString);

      var _this = possibleConstructorReturn(this, (ItemString.__proto__ || Object.getPrototypeOf(ItemString)).call(this));

      _this._content = null;
      return _this;
    }

    createClass(ItemString, [{
      key: '_copy',
      value: function _copy() {
        var struct = get(ItemString.prototype.__proto__ || Object.getPrototypeOf(ItemString.prototype), '_copy', this).call(this);
        struct._content = this._content;
        return struct;
      }
    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(ItemString.prototype.__proto__ || Object.getPrototypeOf(ItemString.prototype), '_fromBinary', this).call(this, y, decoder);
        this._content = decoder.readVarString();
        return missing;
      }
    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(ItemString.prototype.__proto__ || Object.getPrototypeOf(ItemString.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(this._content);
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('ItemString', this, 'content:"' + this._content + '"');
      }
    }, {
      key: '_splitAt',
      value: function _splitAt(y, diff) {
        if (diff === 0) {
          return this;
        } else if (diff >= this._length) {
          return this._right;
        }
        var item = new ItemString();
        item._content = this._content.slice(diff);
        this._content = this._content.slice(0, diff);
        splitHelper(y, this, item, diff);
        return item;
      }
    }, {
      key: '_length',
      get: function get$$1() {
        return this._content.length;
      }
    }]);
    return ItemString;
  }(Item);

  /**
   * YEvent describes the changes on a YType.
   */
  var YEvent = function () {
    /**
     * @param {YType} target The changed type.
     */
    function YEvent(target) {
      classCallCheck(this, YEvent);

      /**
       * The type on which this event was created on.
       * @type {YType}
       */
      this.target = target;
      /**
       * The current target on which the observe callback is called.
       * @type {YType}
       */
      this.currentTarget = target;
    }

    /**
     * Computes the path from `y` to the changed type.
     *
     * The following property holds:
     * @example
     *   let type = y
     *   event.path.forEach(function (dir) {
     *     type = type.get(dir)
     *   })
     *   type === event.target // => true
     */


    createClass(YEvent, [{
      key: "path",
      get: function get$$1() {
        return this.currentTarget.getPathTo(this.target);
      }
    }]);
    return YEvent;
  }();

  /**
   * Event that describes the changes on a YArray
   *
   * @param {YArray} yarray The changed type
   * @param {Boolean} remote Whether the changed was caused by a remote peer
   * @param {Transaction} transaction The transaction object
   */
  var YArrayEvent = function (_YEvent) {
    inherits(YArrayEvent, _YEvent);

    function YArrayEvent(yarray, remote, transaction) {
      classCallCheck(this, YArrayEvent);

      var _this = possibleConstructorReturn(this, (YArrayEvent.__proto__ || Object.getPrototypeOf(YArrayEvent)).call(this, yarray));

      _this.remote = remote;
      _this._transaction = transaction;
      _this._addedElements = null;
      _this._removedElements = null;
      return _this;
    }

    /**
     * Child elements that were added in this transaction.
     *
     * @return {Set}
     */


    createClass(YArrayEvent, [{
      key: 'addedElements',
      get: function get$$1() {
        if (this._addedElements === null) {
          var target = this.target;
          var transaction = this._transaction;
          var addedElements = new Set();
          transaction.newTypes.forEach(function (type) {
            if (type._parent === target && !transaction.deletedStructs.has(type)) {
              addedElements.add(type);
            }
          });
          this._addedElements = addedElements;
        }
        return this._addedElements;
      }

      /**
       * Child elements that were removed in this transaction.
       *
       * @return {Set}
       */

    }, {
      key: 'removedElements',
      get: function get$$1() {
        if (this._removedElements === null) {
          var target = this.target;
          var transaction = this._transaction;
          var removedElements = new Set();
          transaction.deletedStructs.forEach(function (struct) {
            if (struct._parent === target && !transaction.newTypes.has(struct)) {
              removedElements.add(struct);
            }
          });
          this._removedElements = removedElements;
        }
        return this._removedElements;
      }
    }]);
    return YArrayEvent;
  }(YEvent);

  /**
   * A shared Array implementation.
   */

  var YArray = function (_Type) {
    inherits(YArray, _Type);

    function YArray() {
      classCallCheck(this, YArray);
      return possibleConstructorReturn(this, (YArray.__proto__ || Object.getPrototypeOf(YArray)).apply(this, arguments));
    }

    createClass(YArray, [{
      key: '_callObserver',

      /**
       * @private
       * Creates YArray Event and calls observers.
       */
      value: function _callObserver(transaction, parentSubs, remote) {
        this._callEventHandler(transaction, new YArrayEvent(this, remote, transaction));
      }

      /**
       * Returns the i-th element from a YArray.
       *
       * @param {Integer} index The index of the element to return from the YArray
       */

    }, {
      key: 'get',
      value: function get$$1(index) {
        var n = this._start;
        while (n !== null) {
          if (!n._deleted && n._countable) {
            if (index < n._length) {
              if (n.constructor === ItemJSON || n.constructor === ItemString) {
                return n._content[index];
              } else {
                return n;
              }
            }
            index -= n._length;
          }
          n = n._right;
        }
      }

      /**
       * Transforms this YArray to a JavaScript Array.
       *
       * @return {Array}
       */

    }, {
      key: 'toArray',
      value: function toArray$$1() {
        return this.map(function (c) {
          return c;
        });
      }

      /**
       * Transforms this Shared Type to a JSON object.
       *
       * @return {Array}
       */

    }, {
      key: 'toJSON',
      value: function toJSON() {
        return this.map(function (c) {
          if (c instanceof Type) {
            if (c.toJSON !== null) {
              return c.toJSON();
            } else {
              return c.toString();
            }
          }
          return c;
        });
      }

      /**
       * Returns an Array with the result of calling a provided function on every
       * element of this YArray.
       *
       * @param {Function} f Function that produces an element of the new Array
       * @return {Array} A new array with each element being the result of the
       *                 callback function
       */

    }, {
      key: 'map',
      value: function map(f) {
        var _this3 = this;

        var res = [];
        this.forEach(function (c, i) {
          res.push(f(c, i, _this3));
        });
        return res;
      }

      /**
       * Executes a provided function on once on overy element of this YArray.
       *
       * @param {Function} f A function to execute on every element of this YArray.
       */

    }, {
      key: 'forEach',
      value: function forEach(f) {
        var index = 0;
        var n = this._start;
        while (n !== null) {
          if (!n._deleted && n._countable) {
            if (n instanceof Type) {
              f(n, index++, this);
            } else {
              var content = n._content;
              var contentLen = content.length;
              for (var i = 0; i < contentLen; i++) {
                index++;
                f(content[i], index, this);
              }
            }
          }
          n = n._right;
        }
      }

      /**
       * Computes the length of this YArray.
       */

    }, {
      key: Symbol.iterator,
      value: function value() {
        return {
          next: function next() {
            while (this._item !== null && (this._item._deleted || this._item._length <= this._itemElement)) {
              // item is deleted or itemElement does not exist (is deleted)
              this._item = this._item._right;
              this._itemElement = 0;
            }
            if (this._item === null) {
              return {
                done: true
              };
            }
            var content = void 0;
            if (this._item instanceof Type) {
              content = this._item;
            } else {
              content = this._item._content[this._itemElement++];
            }
            return {
              value: content,
              done: false
            };
          },
          _item: this._start,
          _itemElement: 0,
          _count: 0
        };
      }

      /**
       * Deletes elements starting from an index.
       *
       * @param {Integer} index Index at which to start deleting elements
       * @param {Integer} length The number of elements to remove. Defaults to 1.
       */

    }, {
      key: 'delete',
      value: function _delete(index) {
        var _this4 = this;

        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

        this._y.transact(function () {
          var item = _this4._start;
          var count = 0;
          while (item !== null && length > 0) {
            if (!item._deleted && item._countable) {
              if (count <= index && index < count + item._length) {
                var diffDel = index - count;
                item = item._splitAt(_this4._y, diffDel);
                item._splitAt(_this4._y, length);
                length -= item._length;
                item._delete(_this4._y);
                count += diffDel;
              } else {
                count += item._length;
              }
            }
            item = item._right;
          }
        });
        if (length > 0) {
          throw new Error('Delete exceeds the range of the YArray');
        }
      }

      /**
       * @private
       * Inserts content after an element container.
       *
       * @param {Item} left The element container to use as a reference.
       * @param {Array} content The Array of content to insert (see {@see insert})
       */

    }, {
      key: 'insertAfter',
      value: function insertAfter(left, content) {
        var _this5 = this;

        this._transact(function (y) {
          var right = void 0;
          if (left === null) {
            right = _this5._start;
          } else {
            right = left._right;
          }
          var prevJsonIns = null;
          for (var i = 0; i < content.length; i++) {
            var c = content[i];
            if (typeof c === 'function') {
              c = new c(); // eslint-disable-line new-cap
            }
            if (c instanceof Type) {
              if (prevJsonIns !== null) {
                if (y !== null) {
                  prevJsonIns._integrate(y);
                }
                left = prevJsonIns;
                prevJsonIns = null;
              }
              c._origin = left;
              c._left = left;
              c._right = right;
              c._right_origin = right;
              c._parent = _this5;
              if (y !== null) {
                c._integrate(y);
              } else if (left === null) {
                _this5._start = c;
              } else {
                left._right = c;
              }
              left = c;
            } else {
              if (prevJsonIns === null) {
                prevJsonIns = new ItemJSON();
                prevJsonIns._origin = left;
                prevJsonIns._left = left;
                prevJsonIns._right = right;
                prevJsonIns._right_origin = right;
                prevJsonIns._parent = _this5;
                prevJsonIns._content = [];
              }
              prevJsonIns._content.push(c);
            }
          }
          if (prevJsonIns !== null) {
            if (y !== null) {
              prevJsonIns._integrate(y);
            } else if (prevJsonIns._left === null) {
              _this5._start = prevJsonIns;
            }
          }
        });
        return content;
      }

      /**
       * Inserts new content at an index.
       *
       * Important: This function expects an array of content. Not just a content
       * object. The reason for this "weirdness" is that inserting several elements
       * is very efficient when it is done as a single operation.
       *
       * @example
       *  // Insert character 'a' at position 0
       *  yarray.insert(0, ['a'])
       *  // Insert numbers 1, 2 at position 1
       *  yarray.insert(2, [1, 2])
       *
       * @param {Integer} index The index to insert content at.
       * @param {Array} content The array of content
       */

    }, {
      key: 'insert',
      value: function insert(index, content) {
        var _this6 = this;

        this._transact(function () {
          var left = null;
          var right = _this6._start;
          var count = 0;
          var y = _this6._y;
          while (right !== null) {
            var rightLen = right._deleted ? 0 : right._length - 1;
            if (count <= index && index <= count + rightLen) {
              var splitDiff = index - count;
              right = right._splitAt(y, splitDiff);
              left = right._left;
              count += splitDiff;
              break;
            }
            if (!right._deleted) {
              count += right._length;
            }
            left = right;
            right = right._right;
          }
          if (index > count) {
            throw new Error('Index exceeds array range!');
          }
          _this6.insertAfter(left, content);
        });
      }

      /**
       * Appends content to this YArray.
       *
       * @param {Array} content Array of content to append.
       */

    }, {
      key: 'push',
      value: function push(content) {
        var n = this._start;
        var lastUndeleted = null;
        while (n !== null) {
          if (!n._deleted) {
            lastUndeleted = n;
          }
          n = n._right;
        }
        this.insertAfter(lastUndeleted, content);
      }

      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('YArray', this, 'start:' + logID(this._start) + '"');
      }
    }, {
      key: 'length',
      get: function get$$1() {
        var length = 0;
        var n = this._start;
        while (n !== null) {
          if (!n._deleted && n._countable) {
            length += n._length;
          }
          n = n._right;
        }
        return length;
      }
    }]);
    return YArray;
  }(Type);

  /**
   * Event that describes the changes on a YMap.
   *
   * @param {YMap} ymap The YArray that changed.
   * @param {Set<any>} subs The keys that changed.
   * @param {boolean} remote Whether the change was created by a remote peer.
   */
  var YMapEvent = function (_YEvent) {
    inherits(YMapEvent, _YEvent);

    function YMapEvent(ymap, subs, remote) {
      classCallCheck(this, YMapEvent);

      var _this = possibleConstructorReturn(this, (YMapEvent.__proto__ || Object.getPrototypeOf(YMapEvent)).call(this, ymap));

      _this.keysChanged = subs;
      _this.remote = remote;
      return _this;
    }

    return YMapEvent;
  }(YEvent);

  /**
   * A shared Map implementation.
   */

  var YMap = function (_Type) {
    inherits(YMap, _Type);

    /**
     * @private
     * Creates YMap Event and calls observers.
     */
    function YMap() {
      classCallCheck(this, YMap);

      var _this2 = possibleConstructorReturn(this, (YMap.__proto__ || Object.getPrototypeOf(YMap)).call(this));

      console.log(_this2);
      console.log('rrrrrrrrrrrrrrrrrrrrr');
      return _this2;
    }

    createClass(YMap, [{
      key: '_callObserver',
      value: function _callObserver(transaction, parentSubs, remote) {
        this._callEventHandler(transaction, new YMapEvent(this, parentSubs, remote));
      }

      /**
       * Transforms this Shared Type to a JSON object.
       *
       * @return {Object}
       */

    }, {
      key: 'toJSON',
      value: function toJSON() {
        var map = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._map[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = slicedToArray(_step.value, 2),
                key = _step$value[0],
                item = _step$value[1];

            if (!item._deleted) {
              var res = void 0;
              if (item instanceof Type) {
                if (item.toJSON !== undefined) {
                  res = item.toJSON();
                } else {
                  res = item.toString();
                }
              } else {
                res = item._content[0];
              }
              map[key] = res;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return map;
      }

      /**
       * Returns the keys for each element in the YMap Type.
       *
       * @return {Array}
       */

    }, {
      key: 'keys',
      value: function keys() {
        // TODO: Should return either Iterator or Set!
        var keys = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this._map[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _step2$value = slicedToArray(_step2.value, 2),
                key = _step2$value[0],
                value = _step2$value[1];

            if (!value._deleted) {
              keys.push(key);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return keys;
      }

      /**
       * Remove a specified element from this YMap.
       *
       * @param {encodable} key The key of the element to remove.
       */

    }, {
      key: 'delete',
      value: function _delete(key) {
        var _this3 = this;

        this._transact(function (y) {
          var c = _this3._map.get(key);
          if (y !== null && c !== undefined) {
            c._delete(y);
          }
        });
      }

      /**
       * Adds or updates an element with a specified key and value.
       *
       * @param {encodable} key The key of the element to add to this YMap.
       * @param {encodable | YType} value The value of the element to add to this
       *                                  YMap.
       */

    }, {
      key: 'set',
      value: function set$$1(key, value) {
        var _this4 = this;

        this._transact(function (y) {
          var old = _this4._map.get(key) || null;
          if (old !== null) {
            if (old.constructor === ItemJSON && !old._deleted && old._content[0] === value) {
              // Trying to overwrite with same value
              // break here
              return value;
            }
            if (y !== null) {
              old._delete(y);
            }
          }
          var v = void 0;
          if (typeof value === 'function') {
            v = new value(); // eslint-disable-line new-cap
            value = v;
          } else if (value instanceof Item) {
            v = value;
          } else {
            v = new ItemJSON();
            v._content = [value];
          }
          v._right = old;
          v._right_origin = old;
          v._parent = _this4;
          v._parentSub = key;
          if (y !== null) {
            v._integrate(y);
          } else {
            _this4._map.set(key, v);
          }
        });
        return value;
      }

      /**
       * Returns a specified element from this YMap.
       *
       * @param {encodable} key The key of the element to return.
       */

    }, {
      key: 'get',
      value: function get$$1(key) {
        var v = this._map.get(key);
        if (v === undefined || v._deleted) {
          return undefined;
        }
        if (v instanceof Type) {
          return v;
        } else {
          return v._content[v._content.length - 1];
        }
      }

      /**
       * Returns a boolean indicating whether the specified key exists or not.
       *
       * @param {encodable} key The key to test.
       */

    }, {
      key: 'has',
      value: function has(key) {
        var v = this._map.get(key);
        if (v === undefined || v._deleted) {
          return false;
        } else {
          return true;
        }
      }

      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('YMap', this, 'mapSize:' + this._map.size);
      }
    }]);
    return YMap;
  }(Type);

  var ItemEmbed = function (_Item) {
    inherits(ItemEmbed, _Item);

    function ItemEmbed() {
      classCallCheck(this, ItemEmbed);

      var _this = possibleConstructorReturn(this, (ItemEmbed.__proto__ || Object.getPrototypeOf(ItemEmbed)).call(this));

      _this.embed = null;
      return _this;
    }

    createClass(ItemEmbed, [{
      key: '_copy',
      value: function _copy(undeleteChildren, copyPosition) {
        var struct = get(ItemEmbed.prototype.__proto__ || Object.getPrototypeOf(ItemEmbed.prototype), '_copy', this).call(this, undeleteChildren, copyPosition);
        struct.embed = this.embed;
        return struct;
      }
    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(ItemEmbed.prototype.__proto__ || Object.getPrototypeOf(ItemEmbed.prototype), '_fromBinary', this).call(this, y, decoder);
        this.embed = JSON.parse(decoder.readVarString());
        return missing;
      }
    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(ItemEmbed.prototype.__proto__ || Object.getPrototypeOf(ItemEmbed.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(JSON.stringify(this.embed));
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('ItemEmbed', this, 'embed:' + JSON.stringify(this.embed));
      }
    }, {
      key: '_length',
      get: function get$$1() {
        return 1;
      }
    }]);
    return ItemEmbed;
  }(Item);

  var ItemFormat = function (_Item) {
    inherits(ItemFormat, _Item);

    function ItemFormat() {
      classCallCheck(this, ItemFormat);

      var _this = possibleConstructorReturn(this, (ItemFormat.__proto__ || Object.getPrototypeOf(ItemFormat)).call(this));

      _this.key = null;
      _this.value = null;
      return _this;
    }

    createClass(ItemFormat, [{
      key: '_copy',
      value: function _copy(undeleteChildren, copyPosition) {
        var struct = get(ItemFormat.prototype.__proto__ || Object.getPrototypeOf(ItemFormat.prototype), '_copy', this).call(this, undeleteChildren, copyPosition);
        struct.key = this.key;
        struct.value = this.value;
        return struct;
      }
    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(ItemFormat.prototype.__proto__ || Object.getPrototypeOf(ItemFormat.prototype), '_fromBinary', this).call(this, y, decoder);
        this.key = decoder.readVarString();
        this.value = JSON.parse(decoder.readVarString());
        return missing;
      }
    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(ItemFormat.prototype.__proto__ || Object.getPrototypeOf(ItemFormat.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(this.key);
        encoder.writeVarString(JSON.stringify(this.value));
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('ItemFormat', this, 'key:' + JSON.stringify(this.key) + ',value:' + JSON.stringify(this.value));
      }
    }, {
      key: '_length',
      get: function get$$1() {
        return 1;
      }
    }, {
      key: '_countable',
      get: function get$$1() {
        return false;
      }
    }]);
    return ItemFormat;
  }(Item);

  /**
   * @private
   */
  function integrateItem(item, parent, y, left, right) {
    item._origin = left;
    item._left = left;
    item._right = right;
    item._right_origin = right;
    item._parent = parent;
    if (y !== null) {
      item._integrate(y);
    } else if (left === null) {
      parent._start = item;
    } else {
      left._right = item;
    }
  }

  /**
   * @private
   */
  function findNextPosition(currentAttributes, parent, left, right, count) {
    while (right !== null && count > 0) {
      switch (right.constructor) {
        case ItemEmbed:
        case ItemString:
          var rightLen = right._deleted ? 0 : right._length - 1;
          if (count <= rightLen) {
            right = right._splitAt(parent._y, count);
            left = right._left;
            return [left, right, currentAttributes];
          }
          if (right._deleted === false) {
            count -= right._length;
          }
          break;
        case ItemFormat:
          if (right._deleted === false) {
            updateCurrentAttributes(currentAttributes, right);
          }
          break;
      }
      left = right;
      right = right._right;
    }
    return [left, right, currentAttributes];
  }

  /**
   * @private
   */
  function findPosition(parent, index) {
    var currentAttributes = new Map();
    var left = null;
    var right = parent._start;
    return findNextPosition(currentAttributes, parent, left, right, index);
  }

  /**
   * Negate applied formats
   *
   * @private
   */
  function insertNegatedAttributes(y, parent, left, right, negatedAttributes) {
    // check if we really need to remove attributes
    while (right !== null && (right._deleted === true || right.constructor === ItemFormat && negatedAttributes.get(right.key) === right.value)) {
      if (right._deleted === false) {
        negatedAttributes.delete(right.key);
      }
      left = right;
      right = right._right;
    }
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = negatedAttributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = slicedToArray(_step.value, 2),
            key = _step$value[0],
            val = _step$value[1];

        var format = new ItemFormat();
        format.key = key;
        format.value = val;
        integrateItem(format, parent, y, left, right);
        left = format;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return [left, right];
  }

  /**
   * @private
   */
  function updateCurrentAttributes(currentAttributes, item) {
    var value = item.value;
    var key = item.key;
    if (value === null) {
      currentAttributes.delete(key);
    } else {
      currentAttributes.set(key, value);
    }
  }

  /**
   * @private
   */
  function minimizeAttributeChanges(left, right, currentAttributes, attributes) {
    // go right while attributes[right.key] === right.value (or right is deleted)
    while (true) {
      if (right === null) {
        break;
      } else if (right._deleted === true) ; else if (right.constructor === ItemFormat && (attributes[right.key] || null) === right.value) {
        // found a format, update currentAttributes and continue
        updateCurrentAttributes(currentAttributes, right);
      } else {
        break;
      }
      left = right;
      right = right._right;
    }
    return [left, right];
  }

  /**
   * @private
   */
  function insertAttributes(y, parent, left, right, attributes, currentAttributes) {
    var negatedAttributes = new Map();
    // insert format-start items
    for (var key in attributes) {
      var val = attributes[key];
      var currentVal = currentAttributes.get(key);
      if (currentVal !== val) {
        // save negated attribute (set null if currentVal undefined)
        negatedAttributes.set(key, currentVal || null);
        var format = new ItemFormat();
        format.key = key;
        format.value = val;
        integrateItem(format, parent, y, left, right);
        left = format;
      }
    }
    return [left, right, negatedAttributes];
  }

  /**
   * @private
   */
  function insertText(y, text, parent, left, right, currentAttributes, attributes) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = currentAttributes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _step2$value = slicedToArray(_step2.value, 1),
            key = _step2$value[0];

        if (attributes[key] === undefined) {
          attributes[key] = null;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var _minimizeAttributeCha = minimizeAttributeChanges(left, right, currentAttributes, attributes);

    var _minimizeAttributeCha2 = slicedToArray(_minimizeAttributeCha, 2);

    left = _minimizeAttributeCha2[0];
    right = _minimizeAttributeCha2[1];

    var negatedAttributes = void 0;

    // insert content
    var _insertAttributes = insertAttributes(y, parent, left, right, attributes, currentAttributes);

    var _insertAttributes2 = slicedToArray(_insertAttributes, 3);

    left = _insertAttributes2[0];
    right = _insertAttributes2[1];
    negatedAttributes = _insertAttributes2[2];
    var item = void 0;
    if (text.constructor === String) {
      item = new ItemString();
      item._content = text;
    } else {
      item = new ItemEmbed();
      item.embed = text;
    }
    integrateItem(item, parent, y, left, right);
    left = item;
    return insertNegatedAttributes(y, parent, left, right, negatedAttributes);
  }

  /**
   * @private
   */
  function formatText(y, length, parent, left, right, currentAttributes, attributes) {
    var _minimizeAttributeCha3 = minimizeAttributeChanges(left, right, currentAttributes, attributes);

    var _minimizeAttributeCha4 = slicedToArray(_minimizeAttributeCha3, 2);

    left = _minimizeAttributeCha4[0];
    right = _minimizeAttributeCha4[1];

    var negatedAttributes = void 0;

    // iterate until first non-format or null is found
    // delete all formats with attributes[format.key] != null
    var _insertAttributes3 = insertAttributes(y, parent, left, right, attributes, currentAttributes);

    var _insertAttributes4 = slicedToArray(_insertAttributes3, 3);

    left = _insertAttributes4[0];
    right = _insertAttributes4[1];
    negatedAttributes = _insertAttributes4[2];
    while (length > 0 && right !== null) {
      if (right._deleted === false) {
        switch (right.constructor) {
          case ItemFormat:
            var attr = attributes[right.key];
            if (attr !== undefined) {
              if (attr === right.value) {
                negatedAttributes.delete(right.key);
              } else {
                negatedAttributes.set(right.key, right.value);
              }
              right._delete(y);
            }
            updateCurrentAttributes(currentAttributes, right);
            break;
          case ItemEmbed:
          case ItemString:
            right._splitAt(y, length);
            length -= right._length;
            break;
        }
      }
      left = right;
      right = right._right;
    }
    return insertNegatedAttributes(y, parent, left, right, negatedAttributes);
  }

  /**
   * @private
   */
  function deleteText(y, length, parent, left, right, currentAttributes) {
    while (length > 0 && right !== null) {
      if (right._deleted === false) {
        switch (right.constructor) {
          case ItemFormat:
            updateCurrentAttributes(currentAttributes, right);
            break;
          case ItemEmbed:
          case ItemString:
            right._splitAt(y, length);
            length -= right._length;
            right._delete(y);
            break;
        }
      }
      left = right;
      right = right._right;
    }
    return [left, right];
  }

  // TODO: In the quill delta representation we should also use the format {ops:[..]}
  /**
   * The Quill Delta format represents changes on a text document with
   * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}
   *
   * @example
   *   {
   *     ops: [
   *       { insert: 'Gandalf', attributes: { bold: true } },
   *       { insert: ' the ' },
   *       { insert: 'Grey', attributes: { color: '#cccccc' } }
   *     ]
   *   }
   *
   * @typedef {Array<Object>} Delta
   */

  /**
    * Attributes that can be assigned to a selection of text.
    *
    * @example
    *   {
    *     bold: true,
    *     font-size: '40px'
    *   }
    *
    * @typedef {Object} TextAttributes
    */

  /**
   * Event that describes the changes on a YText type.
   *
   * @private
   */

  var YTextEvent = function (_YArrayEvent) {
    inherits(YTextEvent, _YArrayEvent);

    function YTextEvent(ytext, remote, transaction) {
      classCallCheck(this, YTextEvent);

      var _this = possibleConstructorReturn(this, (YTextEvent.__proto__ || Object.getPrototypeOf(YTextEvent)).call(this, ytext, remote, transaction));

      _this._delta = null;
      return _this;
    }
    // TODO: Should put this in a separate function. toDelta shouldn't be included
    //       in every Yjs distribution
    /**
     * Compute the changes in the delta format.
     *
     * @return {Delta} A {@link https://quilljs.com/docs/delta/|Quill Delta}) that
     *                 represents the changes on the document.
     *
     * @public
     */


    createClass(YTextEvent, [{
      key: 'delta',
      get: function get$$1() {
        var _this2 = this;

        if (this._delta === null) {
          var y = this.target._y;
          y.transact(function () {
            var item = _this2.target._start;
            var delta = [];
            var added = _this2.addedElements;
            var removed = _this2.removedElements;
            _this2._delta = delta;
            var action = null;
            var attributes = {}; // counts added or removed new attributes for retain
            var currentAttributes = new Map(); // saves all current attributes for insert
            var oldAttributes = new Map();
            var insert = '';
            var retain = 0;
            var deleteLen = 0;
            var addOp = function addOp() {
              if (action !== null) {
                var op = void 0;
                switch (action) {
                  case 'delete':
                    op = { delete: deleteLen };
                    deleteLen = 0;
                    break;
                  case 'insert':
                    op = { insert: insert };
                    if (currentAttributes.size > 0) {
                      op.attributes = {};
                      var _iteratorNormalCompletion3 = true;
                      var _didIteratorError3 = false;
                      var _iteratorError3 = undefined;

                      try {
                        for (var _iterator3 = currentAttributes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                          var _step3$value = slicedToArray(_step3.value, 2),
                              key = _step3$value[0],
                              value = _step3$value[1];

                          if (value !== null) {
                            op.attributes[key] = value;
                          }
                        }
                      } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                          }
                        } finally {
                          if (_didIteratorError3) {
                            throw _iteratorError3;
                          }
                        }
                      }
                    }
                    insert = '';
                    break;
                  case 'retain':
                    op = { retain: retain };
                    if (Object.keys(attributes).length > 0) {
                      op.attributes = {};
                      for (var key in attributes) {
                        op.attributes[key] = attributes[key];
                      }
                    }
                    retain = 0;
                    break;
                }
                delta.push(op);
                action = null;
              }
            };
            while (item !== null) {
              switch (item.constructor) {
                case ItemEmbed:
                  if (added.has(item)) {
                    addOp();
                    action = 'insert';
                    insert = item.embed;
                    addOp();
                  } else if (removed.has(item)) {
                    if (action !== 'delete') {
                      addOp();
                      action = 'delete';
                    }
                    deleteLen += 1;
                  } else if (item._deleted === false) {
                    if (action !== 'retain') {
                      addOp();
                      action = 'retain';
                    }
                    retain += 1;
                  }
                  break;
                case ItemString:
                  if (added.has(item)) {
                    if (action !== 'insert') {
                      addOp();
                      action = 'insert';
                    }
                    insert += item._content;
                  } else if (removed.has(item)) {
                    if (action !== 'delete') {
                      addOp();
                      action = 'delete';
                    }
                    deleteLen += item._length;
                  } else if (item._deleted === false) {
                    if (action !== 'retain') {
                      addOp();
                      action = 'retain';
                    }
                    retain += item._length;
                  }
                  break;
                case ItemFormat:
                  if (added.has(item)) {
                    var curVal = currentAttributes.get(item.key) || null;
                    if (curVal !== item.value) {
                      if (action === 'retain') {
                        addOp();
                      }
                      if (item.value === (oldAttributes.get(item.key) || null)) {
                        delete attributes[item.key];
                      } else {
                        attributes[item.key] = item.value;
                      }
                    } else {
                      item._delete(y);
                    }
                  } else if (removed.has(item)) {
                    oldAttributes.set(item.key, item.value);
                    var _curVal = currentAttributes.get(item.key) || null;
                    if (_curVal !== item.value) {
                      if (action === 'retain') {
                        addOp();
                      }
                      attributes[item.key] = _curVal;
                    }
                  } else if (item._deleted === false) {
                    oldAttributes.set(item.key, item.value);
                    var attr = attributes[item.key];
                    if (attr !== undefined) {
                      if (attr !== item.value) {
                        if (action === 'retain') {
                          addOp();
                        }
                        if (item.value === null) {
                          attributes[item.key] = item.value;
                        } else {
                          delete attributes[item.key];
                        }
                      } else {
                        item._delete(y);
                      }
                    }
                  }
                  if (item._deleted === false) {
                    if (action === 'insert') {
                      addOp();
                    }
                    updateCurrentAttributes(currentAttributes, item);
                  }
                  break;
              }
              item = item._right;
            }
            addOp();
            while (_this2._delta.length > 0) {
              var lastOp = _this2._delta[_this2._delta.length - 1];
              if (lastOp.retain !== undefined && lastOp.attributes === undefined) {
                // retain delta's if they don't assign attributes
                _this2._delta.pop();
              } else {
                break;
              }
            }
          });
        }
        return this._delta;
      }
    }]);
    return YTextEvent;
  }(YArrayEvent);

  /**
   * Type that represents text with formatting information.
   *
   * This type replaces y-richtext as this implementation is able to handle
   * block formats (format information on a paragraph), embeds (complex elements
   * like pictures and videos), and text formats (**bold**, *italic*).
   *
   * @param {String} string The initial value of the YText.
   */


  var YText = function (_YArray) {
    inherits(YText, _YArray);

    function YText(string) {
      classCallCheck(this, YText);

      var _this3 = possibleConstructorReturn(this, (YText.__proto__ || Object.getPrototypeOf(YText)).call(this));

      if (typeof string === 'string') {
        var start = new ItemString();
        start._parent = _this3;
        start._content = string;
        _this3._start = start;
      }
      return _this3;
    }

    /**
     * @private
     * Creates YMap Event and calls observers.
     */


    createClass(YText, [{
      key: '_callObserver',
      value: function _callObserver(transaction, parentSubs, remote) {
        this._callEventHandler(transaction, new YTextEvent(this, remote, transaction));
      }

      /**
       * Returns the unformatted string representation of this YText type.
       *
       * @public
       */

    }, {
      key: 'toString',
      value: function toString() {
        var str = '';
        var n = this._start;
        while (n !== null) {
          if (!n._deleted && n._countable) {
            str += n._content;
          }
          n = n._right;
        }
        return str;
      }

      /**
       * Apply a {@link Delta} on this shared YText type.
       *
       * @param {Delta} delta The changes to apply on this element.
       *
       * @public
       */

    }, {
      key: 'applyDelta',
      value: function applyDelta(delta) {
        var _this4 = this;

        this._transact(function (y) {
          var left = null;
          var right = _this4._start;
          var currentAttributes = new Map();
          for (var i = 0; i < delta.length; i++) {
            var op = delta[i];
            if (op.insert !== undefined) {
              var _insertText = insertText(y, op.insert, _this4, left, right, currentAttributes, op.attributes || {});

              var _insertText2 = slicedToArray(_insertText, 2);

              left = _insertText2[0];
              right = _insertText2[1];
            } else if (op.retain !== undefined) {
              var _formatText = formatText(y, op.retain, _this4, left, right, currentAttributes, op.attributes || {});

              var _formatText2 = slicedToArray(_formatText, 2);

              left = _formatText2[0];
              right = _formatText2[1];
            } else if (op.delete !== undefined) {
              var _deleteText = deleteText(y, op.delete, _this4, left, right, currentAttributes);

              var _deleteText2 = slicedToArray(_deleteText, 2);

              left = _deleteText2[0];
              right = _deleteText2[1];
            }
          }
        });
      }

      /**
       * Returns the Delta representation of this YText type.
       *
       * @return {Delta} The Delta representation of this type.
       *
       * @public
       */

    }, {
      key: 'toDelta',
      value: function toDelta() {
        var ops = [];
        var currentAttributes = new Map();
        var str = '';
        var n = this._start;
        function packStr() {
          if (str.length > 0) {
            // pack str with attributes to ops
            var attributes = {};
            var addAttributes = false;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = currentAttributes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _step4$value = slicedToArray(_step4.value, 2),
                    key = _step4$value[0],
                    value = _step4$value[1];

                addAttributes = true;
                attributes[key] = value;
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            var op = { insert: str };
            if (addAttributes) {
              op.attributes = attributes;
            }
            ops.push(op);
            str = '';
          }
        }
        while (n !== null) {
          if (!n._deleted) {
            switch (n.constructor) {
              case ItemString:
                str += n._content;
                break;
              case ItemFormat:
                packStr();
                updateCurrentAttributes(currentAttributes, n);
                break;
            }
          }
          n = n._right;
        }
        packStr();
        return ops;
      }

      /**
       * Insert text at a given index.
       *
       * @param {Integer} index The index at which to start inserting.
       * @param {String} text The text to insert at the specified position.
       * @param {TextAttributes} attributes Optionally define some formatting
       *                                    information to apply on the inserted
       *                                    Text.
       *
       * @public
       */

    }, {
      key: 'insert',
      value: function insert(index, text) {
        var _this5 = this;

        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (text.length <= 0) {
          return;
        }
        this._transact(function (y) {
          var _findPosition = findPosition(_this5, index),
              _findPosition2 = slicedToArray(_findPosition, 3),
              left = _findPosition2[0],
              right = _findPosition2[1],
              currentAttributes = _findPosition2[2];

          insertText(y, text, _this5, left, right, currentAttributes, attributes);
        });
      }

      /**
       * Inserts an embed at a index.
       *
       * @param {Integer} index The index to insert the embed at.
       * @param {Object} embed The Object that represents the embed.
       * @param {TextAttributes} attributes Attribute information to apply on the
       *                                    embed
       *
       * @public
       */

    }, {
      key: 'insertEmbed',
      value: function insertEmbed(index, embed) {
        var _this6 = this;

        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (embed.constructor !== Object) {
          throw new Error('Embed must be an Object');
        }
        this._transact(function (y) {
          var _findPosition3 = findPosition(_this6, index),
              _findPosition4 = slicedToArray(_findPosition3, 3),
              left = _findPosition4[0],
              right = _findPosition4[1],
              currentAttributes = _findPosition4[2];

          insertText(y, embed, _this6, left, right, currentAttributes, attributes);
        });
      }

      /**
       * Deletes text starting from an index.
       *
       * @param {Integer} index Index at which to start deleting.
       * @param {Integer} length The number of characters to remove. Defaults to 1.
       *
       * @public
       */

    }, {
      key: 'delete',
      value: function _delete(index, length) {
        var _this7 = this;

        if (length === 0) {
          return;
        }
        this._transact(function (y) {
          var _findPosition5 = findPosition(_this7, index),
              _findPosition6 = slicedToArray(_findPosition5, 3),
              left = _findPosition6[0],
              right = _findPosition6[1],
              currentAttributes = _findPosition6[2];

          deleteText(y, length, _this7, left, right, currentAttributes);
        });
      }

      /**
       * Assigns properties to a range of text.
       *
       * @param {Integer} index The position where to start formatting.
       * @param {Integer} length The amount of characters to assign properties to.
       * @param {TextAttributes} attributes Attribute information to apply on the
       *                                    text.
       *
       * @public
       */

    }, {
      key: 'format',
      value: function format(index, length, attributes) {
        var _this8 = this;

        this._transact(function (y) {
          var _findPosition7 = findPosition(_this8, index),
              _findPosition8 = slicedToArray(_findPosition7, 3),
              left = _findPosition8[0],
              right = _findPosition8[1],
              currentAttributes = _findPosition8[2];

          if (right === null) {
            return;
          }
          formatText(y, length, _this8, left, right, currentAttributes, attributes);
        });
      }
      // TODO: De-duplicate code. The following code is in every type.
      /**
       * Transform this YText to a readable format.
       * Useful for logging as all Items implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('YText', this);
      }
    }]);
    return YText;
  }(YArray);

  /**
   * You can manage binding to a custom type with YXmlHook.
   *
   * @public
   */

  var YXmlHook = function (_YMap) {
    inherits(YXmlHook, _YMap);

    /**
     * @param {String} hookName nodeName of the Dom Node.
     */
    function YXmlHook(hookName) {
      classCallCheck(this, YXmlHook);

      var _this = possibleConstructorReturn(this, (YXmlHook.__proto__ || Object.getPrototypeOf(YXmlHook)).call(this));

      _this.hookName = null;
      if (hookName !== undefined) {
        _this.hookName = hookName;
      }
      return _this;
    }

    /**
     * Creates an Item with the same effect as this Item (without position effect)
     *
     * @private
     */


    createClass(YXmlHook, [{
      key: '_copy',
      value: function _copy() {
        var struct = get(YXmlHook.prototype.__proto__ || Object.getPrototypeOf(YXmlHook.prototype), '_copy', this).call(this);
        struct.hookName = this.hookName;
        return struct;
      }

      /**
       * Creates a Dom Element that mirrors this YXmlElement.
       *
       * @param {Document} [_document=document] The document object (you must define
       *                                        this when calling this method in
       *                                        nodejs)
       * @param {Object<key:hookDefinition>} [hooks] Optional property to customize how hooks
       *                                             are presented in the DOM
       * @param {DomBinding} [binding] You should not set this property. This is
       *                               used if DomBinding wants to create a
       *                               association to the created DOM type
       * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
       *
       * @public
       */

    }, {
      key: 'toDom',
      value: function toDom() {

        var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var binding = arguments[2];

        var hook = hooks[this.hookName];
        var dom = void 0;
        if (hook !== undefined) {
          dom = hook.createDom(this);
        } else {
          dom = document.createElement(this.hookName);
        }
        dom.setAttribute('data-yjs-hook', this.hookName);
        createAssociation(binding, dom, this);
        return dom;
      }

      /**
       * Read the next Item in a Decoder and fill this Item with the read data.
       *
       * This is called when data is received from a remote peer.
       *
       * @param {Y} y The Yjs instance that this Item belongs to.
       * @param {BinaryDecoder} decoder The decoder object to read data from.
       *
       * @private
       */

    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(YXmlHook.prototype.__proto__ || Object.getPrototypeOf(YXmlHook.prototype), '_fromBinary', this).call(this, y, decoder);
        this.hookName = decoder.readVarString();
        return missing;
      }

      /**
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       *
       * @private
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(YXmlHook.prototype.__proto__ || Object.getPrototypeOf(YXmlHook.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(this.hookName);
      }

      /**
       * Integrate this type into the Yjs instance.
       *
       * * Save this struct in the os
       * * This type is sent to other client
       * * Observer functions are fired
       *
       * @param {Y} y The Yjs instance
       *
       * @private
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        if (this.hookName === null) {
          throw new Error('hookName must be defined!');
        }
        get(YXmlHook.prototype.__proto__ || Object.getPrototypeOf(YXmlHook.prototype), '_integrate', this).call(this, y);
      }
    }]);
    return YXmlHook;
  }(YMap);

  /**
   * Define the elements to which a set of CSS queries apply.
   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}
   *
   * @example
   *   query = '.classSelector'
   *   query = 'nodeSelector'
   *   query = '#idSelector'
   *
   * @typedef {string} CSS_Selector
   */

  /**
   * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a
   * position within them.
   *
   * Can be created with {@link YXmlFragment#createTreeWalker}
   *
   * @public
   */

  var YXmlTreeWalker = function () {
    function YXmlTreeWalker(root, f) {
      classCallCheck(this, YXmlTreeWalker);

      this._filter = f || function () {
        return true;
      };
      this._root = root;
      this._currentNode = root;
      this._firstCall = true;
    }

    createClass(YXmlTreeWalker, [{
      key: Symbol.iterator,
      value: function value() {
        return this;
      }
      /**
       * Get the next node.
       *
       * @return {YXmlElement} The next node.
       *
       * @public
       */

    }, {
      key: 'next',
      value: function next() {
        var n = this._currentNode;
        if (this._firstCall) {
          this._firstCall = false;
          if (!n._deleted && this._filter(n)) {
            return { value: n, done: false };
          }
        }
        do {
          if (!n._deleted && (n.constructor === YXmlFragment._YXmlElement || n.constructor === YXmlFragment) && n._start !== null) {
            // walk down in the tree
            n = n._start;
          } else {
            // walk right or up in the tree
            while (n !== this._root) {
              if (n._right !== null) {
                n = n._right;
                break;
              }
              n = n._parent;
            }
            if (n === this._root) {
              n = null;
            }
          }
          if (n === this._root) {
            break;
          }
        } while (n !== null && (n._deleted || !this._filter(n)));
        this._currentNode = n;
        if (n === null) {
          return { done: true };
        } else {
          return { value: n, done: false };
        }
      }
    }]);
    return YXmlTreeWalker;
  }();

  /**
   * An Event that describes changes on a YXml Element or Yxml Fragment
   *
   * @protected
   */

  var YXmlEvent = function (_YEvent) {
    inherits(YXmlEvent, _YEvent);

    /**
     * @param {YType} target The target on which the event is created.
     * @param {Set} subs The set of changed attributes. `null` is included if the
     *                   child list changed.
     * @param {Boolean} remote Whether this change was created by a remote peer.
     * @param {Transaction} transaction The transaction instance with wich the
     *                                  change was created.
     */
    function YXmlEvent(target, subs, remote, transaction) {
      classCallCheck(this, YXmlEvent);

      /**
       * The transaction instance for the computed change.
       * @type {Transaction}
       */
      var _this = possibleConstructorReturn(this, (YXmlEvent.__proto__ || Object.getPrototypeOf(YXmlEvent)).call(this, target));

      _this._transaction = transaction;
      /**
       * Whether the children changed.
       * @type {Boolean}
       */
      _this.childListChanged = false;
      /**
       * Set of all changed attributes.
       * @type {Set}
       */
      _this.attributesChanged = new Set();
      /**
       * Whether this change was created by a remote peer.
       * @type {Boolean}
       */
      _this.remote = remote;
      subs.forEach(function (sub) {
        if (sub === null) {
          _this.childListChanged = true;
        } else {
          _this.attributesChanged.add(sub);
        }
      });
      return _this;
    }

    return YXmlEvent;
  }(YEvent);

  /**
   * Dom filter function.
   *
   * @callback domFilter
   * @param {string} nodeName The nodeName of the element
   * @param {Map} attributes The map of attributes.
   * @return {boolean} Whether to include the Dom node in the YXmlElement.
   */

  /**
   * Define the elements to which a set of CSS queries apply.
   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}
   *
   * @example
   *   query = '.classSelector'
   *   query = 'nodeSelector'
   *   query = '#idSelector'
   *
   * @typedef {string} CSS_Selector
   */

  /**
   * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.
   * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a
   * nodeName and it does not have attributes. Though it can be bound to a DOM
   * element - in this case the attributes and the nodeName are not shared.
   *
   * @public
   */

  var YXmlFragment = function (_YArray) {
    inherits(YXmlFragment, _YArray);

    function YXmlFragment() {
      classCallCheck(this, YXmlFragment);
      return possibleConstructorReturn(this, (YXmlFragment.__proto__ || Object.getPrototypeOf(YXmlFragment)).apply(this, arguments));
    }

    createClass(YXmlFragment, [{
      key: 'createTreeWalker',

      /**
       * Create a subtree of childNodes.
       *
       * @example
       * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')
       * for (let node in walker) {
       *   // `node` is a div node
       *   nop(node)
       * }
       *
       * @param {Function} filter Function that is called on each child element and
       *                          returns a Boolean indicating whether the child
       *                          is to be included in the subtree.
       * @return {TreeWalker} A subtree and a position within it.
       *
       * @public
       */
      value: function createTreeWalker(filter) {
        return new YXmlTreeWalker(this, filter);
      }

      /**
       * Returns the first YXmlElement that matches the query.
       * Similar to DOM's {@link querySelector}.
       *
       * Query support:
       *   - tagname
       * TODO:
       *   - id
       *   - attribute
       *
       * @param {CSS_Selector} query The query on the children.
       * @return {?YXmlElement} The first element that matches the query or null.
       *
       * @public
       */

    }, {
      key: 'querySelector',
      value: function querySelector(query) {
        query = query.toUpperCase();
        var iterator = new YXmlTreeWalker(this, function (element) {
          return element.nodeName === query;
        });
        var next = iterator.next();
        if (next.done) {
          return null;
        } else {
          return next.value;
        }
      }

      /**
       * Returns all YXmlElements that match the query.
       * Similar to Dom's {@link querySelectorAll}.
       *
       * TODO: Does not yet support all queries. Currently only query by tagName.
       *
       * @param {CSS_Selector} query The query on the children
       * @return {Array<YXmlElement>} The elements that match this query.
       *
       * @public
       */

    }, {
      key: 'querySelectorAll',
      value: function querySelectorAll(query) {
        query = query.toUpperCase();
        return Array.from(new YXmlTreeWalker(this, function (element) {
          return element.nodeName === query;
        }));
      }

      /**
       * Creates YArray Event and calls observers.
       *
       * @private
       */

    }, {
      key: '_callObserver',
      value: function _callObserver(transaction, parentSubs, remote) {
        this._callEventHandler(transaction, new YXmlEvent(this, parentSubs, remote, transaction));
      }

      /**
       * Get the string representation of all the children of this YXmlFragment.
       *
       * @return {string} The string representation of all children.
       */

    }, {
      key: 'toString',
      value: function toString() {
        return this.map(function (xml) {
          return xml.toString();
        }).join('');
      }

      /**
       * @private
       * Unbind from Dom and mark this Item as deleted.
       *
       * @param {Y} y The Yjs instance
       * @param {boolean} createDelete Whether to propagate a message that this
       *                               Type was deleted.
       * @param {boolean} [gcChildren=y._hasUndoManager===false] Whether to garbage
       *                                         collect the children of this type.
       *
       * @private
       */

    }, {
      key: '_delete',
      value: function _delete(y, createDelete, gcChildren) {
        get(YXmlFragment.prototype.__proto__ || Object.getPrototypeOf(YXmlFragment.prototype), '_delete', this).call(this, y, createDelete, gcChildren);
      }

      /**
       * Creates a Dom Element that mirrors this YXmlElement.
       *
       * @param {Document} [_document=document] The document object (you must define
       *                                        this when calling this method in
       *                                        nodejs)
       * @param {Object<key:hookDefinition>} [hooks={}] Optional property to customize how hooks
       *                                             are presented in the DOM
       * @param {DomBinding} [binding] You should not set this property. This is
       *                               used if DomBinding wants to create a
       *                               association to the created DOM type
       * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
       *
       * @public
       */

    }, {
      key: 'toDom',
      value: function toDom() {
        var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

        var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var binding = arguments[2];

        var fragment = _document.createDocumentFragment();
        createAssociation(binding, fragment, this);
        this.forEach(function (xmlType) {
          fragment.insertBefore(xmlType.toDom(_document, hooks, binding), null);
        });
        return fragment;
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('YXml', this);
      }
    }]);
    return YXmlFragment;
  }(YArray);

  /**
   * An YXmlElement imitates the behavior of a
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.
   *
   * * An YXmlElement has attributes (key value pairs)
   * * An YXmlElement has childElements that must inherit from YXmlElement
   *
   * @param {String} nodeName Node name
   */

  var YXmlElement = function (_YXmlFragment) {
    inherits(YXmlElement, _YXmlFragment);

    function YXmlElement() {
      var nodeName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'UNDEFINED';
      classCallCheck(this, YXmlElement);

      var _this = possibleConstructorReturn(this, (YXmlElement.__proto__ || Object.getPrototypeOf(YXmlElement)).call(this));

      _this.nodeName = nodeName.toUpperCase();
      return _this;
    }

    /**
     * @private
     * Creates an Item with the same effect as this Item (without position effect)
     */


    createClass(YXmlElement, [{
      key: '_copy',
      value: function _copy() {
        var struct = get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), '_copy', this).call(this);
        struct.nodeName = this.nodeName;
        return struct;
      }

      /**
       * @private
       * Read the next Item in a Decoder and fill this Item with the read data.
       *
       * This is called when data is received from a remote peer.
       *
       * @param {Y} y The Yjs instance that this Item belongs to.
       * @param {BinaryDecoder} decoder The decoder object to read data from.
       */

    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), '_fromBinary', this).call(this, y, decoder);
        this.nodeName = decoder.readVarString();
        return missing;
      }

      /**
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       *
       * @private
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(this.nodeName);
      }

      /**
       * Integrates this Item into the shared structure.
       *
       * This method actually applies the change to the Yjs instance. In case of
       * Item it connects _left and _right to this Item and calls the
       * {@link Item#beforeChange} method.
       *
       * * Checks for nodeName
       * * Sets domFilter
       *
       * @param {Y} y The Yjs instance
       *
       * @private
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        if (this.nodeName === null) {
          throw new Error('nodeName must be defined!');
        }
        get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), '_integrate', this).call(this, y);
      }

      /**
       * Returns the string representation of this YXmlElement.
       * The attributes are ordered by attribute-name, so you can easily use this
       * method to compare YXmlElements
       *
       * @return {String} The string representation of this type.
       *
       * @public
       */

    }, {
      key: 'toString',
      value: function toString() {
        var attrs = this.getAttributes();
        var stringBuilder = [];
        var keys = [];
        for (var key in attrs) {
          keys.push(key);
        }
        keys.sort();
        var keysLen = keys.length;
        for (var i = 0; i < keysLen; i++) {
          var _key = keys[i];
          stringBuilder.push(_key + '="' + attrs[_key] + '"');
        }
        var nodeName = this.nodeName.toLocaleLowerCase();
        var attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';
        return '<' + nodeName + attrsString + '>' + get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), 'toString', this).call(this) + '</' + nodeName + '>';
      }

      /**
       * Removes an attribute from this YXmlElement.
       *
       * @param {String} attributeName The attribute name that is to be removed.
       *
       * @public
       */

    }, {
      key: 'removeAttribute',
      value: function removeAttribute(attributeName) {
        return YMap.prototype.delete.call(this, attributeName);
      }

      /**
       * Sets or updates an attribute.
       *
       * @param {String} attributeName The attribute name that is to be set.
       * @param {String} attributeValue The attribute value that is to be set.
       *
       * @public
       */

    }, {
      key: 'setAttribute',
      value: function setAttribute(attributeName, attributeValue) {
        return YMap.prototype.set.call(this, attributeName, attributeValue);
      }

      /**
       * Returns an attribute value that belongs to the attribute name.
       *
       * @param {String} attributeName The attribute name that identifies the
       *                               queried value.
       * @return {String} The queried attribute value.
       *
       * @public
       */

    }, {
      key: 'getAttribute',
      value: function getAttribute(attributeName) {
        return YMap.prototype.get.call(this, attributeName);
      }

      /**
       * Returns all attribute name/value pairs in a JSON Object.
       *
       * @return {Object} A JSON Object that describes the attributes.
       *
       * @public
       */

    }, {
      key: 'getAttributes',
      value: function getAttributes() {
        var obj = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._map[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = slicedToArray(_step.value, 2),
                key = _step$value[0],
                value = _step$value[1];

            if (!value._deleted) {
              obj[key] = value._content[0];
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return obj;
      }
      // TODO: outsource the binding property.
      /**
       * Creates a Dom Element that mirrors this YXmlElement.
       *
       * @param {Document} [_document=document] The document object (you must define
       *                                        this when calling this method in
       *                                        nodejs)
       * @param {Object<key:hookDefinition>} [hooks={}] Optional property to customize how hooks
       *                                             are presented in the DOM
       * @param {DomBinding} [binding] You should not set this property. This is
       *                               used if DomBinding wants to create a
       *                               association to the created DOM type.
       * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
       *
       * @public
       */

    }, {
      key: 'toDom',
      value: function toDom() {
        var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

        var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var binding = arguments[2];

        var dom = _document.createElement(this.nodeName);
        var attrs = this.getAttributes();
        for (var key in attrs) {
          dom.setAttribute(key, attrs[key]);
        }
        this.forEach(function (yxml) {
          dom.appendChild(yxml.toDom(_document, hooks, binding));
        });
        createAssociation(binding, dom, this);
        return dom;
      }
    }]);
    return YXmlElement;
  }(YXmlFragment);


  YXmlFragment._YXmlElement = YXmlElement;

  /**
   * Check if `parent` is a parent of `child`.
   *
   * @param {Type} parent
   * @param {Type} child
   * @return {Boolean} Whether `parent` is a parent of `child`.
   *
   * @public
   */
  function isParentOf(parent, child) {
    child = child._parent;
    while (child !== null) {
      if (child === parent) {
        return true;
      }
      child = child._parent;
    }
    return false;
  }

  /**
   * Default filter method (does nothing).
   *
   * @param {String} nodeName The nodeName of the element
   * @param {Map} attrs Map of key-value pairs that are attributes of the node.
   * @return {Map | null} The allowed attributes or null, if the element should be
   *                      filtered.
   */
  function defaultFilter(nodeName, attrs) {
    // TODO: implement basic filter that filters out dangerous properties!
    return attrs;
  }

  /**
   *
   */
  function filterDomAttributes(dom, filter) {
    var attrs = new Map();
    for (var i = dom.attributes.length - 1; i >= 0; i--) {
      var attr = dom.attributes[i];
      attrs.set(attr.name, attr.value);
    }
    return filter(dom.nodeName, attrs);
  }

  /**
   * Applies a filter on a type.
   *
   * @param {Y} y The Yjs instance.
   * @param {DomBinding} binding The DOM binding instance that has the dom filter.
   * @param {YXmlElement | YXmlFragment } type The type to apply the filter to.
   *
   * @private
   */
  function applyFilterOnType(y, binding, type) {
    if (isParentOf(binding.type, type)) {
      var nodeName = type.nodeName;
      var attributes = new Map();
      if (type.getAttributes !== undefined) {
        var attrs = type.getAttributes();
        for (var key in attrs) {
          attributes.set(key, attrs[key]);
        }
      }
      var filteredAttributes = binding.filter(nodeName, new Map(attributes));
      if (filteredAttributes === null) {
        type._delete(y);
      } else {
        // iterate original attributes
        attributes.forEach(function (value, key) {
          // delete all attributes that are not in filteredAttributes
          if (filteredAttributes.has(key) === false) {
            type.removeAttribute(key);
          }
        });
      }
    }
  }

  /**
   * Creates a Yjs type (YXml) based on the contents of a DOM Element.
   *
   * @param {Element|TextNode} element The DOM Element
   * @param {?Document} _document Optional. Provide the global document object
   * @param {Hooks} [hooks = {}] Optional. Set of Yjs Hooks
   * @param {Filter} [filter=defaultFilter] Optional. Dom element filter
   * @param {?DomBinding} binding Warning: This property is for internal use only!
   * @return {YXmlElement | YXmlText}
   */
  function domToType(element) {
    var _document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

    var hooks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var filter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultFilter;
    var binding = arguments[4];

    var type = void 0;
    switch (element.nodeType) {
      case _document.ELEMENT_NODE:
        var hookName = null;
        var hook = void 0;
        // configure `hookName !== undefined` if element is a hook.
        if (element.hasAttribute('data-yjs-hook')) {
          hookName = element.getAttribute('data-yjs-hook');
          hook = hooks[hookName];
          if (hook === undefined) {
            console.error('Unknown hook "' + hookName + '". Deleting yjsHook dataset property.');
            delete element.removeAttribute('data-yjs-hook');
            hookName = null;
          }
        }
        if (hookName === null) {
          // Not a hook
          var attrs = filterDomAttributes(element, filter);
          if (attrs === null) {
            type = false;
          } else {
            type = new YXmlElement(element.nodeName);
            attrs.forEach(function (val, key) {
              type.setAttribute(key, val);
            });
            type.insert(0, domsToTypes(element.childNodes, document, hooks, filter, binding));
          }
        } else {
          // Is a hook
          type = new YXmlHook(hookName);
          hook.fillType(element, type);
        }
        break;
      case _document.TEXT_NODE:
        type = new YXmlText();
        type.insert(0, element.nodeValue);
        break;
      default:
        throw new Error('Can\'t transform this node type to a YXml type!');
    }
    createAssociation(binding, element, type);
    return type;
  }

  /**
   * Iterates items until an undeleted item is found.
   *
   * @private
   */
  function iterateUntilUndeleted(item) {
    while (item !== null && item._deleted) {
      item = item._right;
    }
    return item;
  }

  /**
   * Removes an association (the information that a DOM element belongs to a
   * type).
   *
   * @param {DomBinding} domBinding The binding object
   * @param {Element} dom The dom that is to be associated with type
   * @param {YXmlElement|YXmlHook} type The type that is to be associated with dom
   *
   */
  function removeAssociation(domBinding, dom, type) {
    domBinding.domToType.delete(dom);
    domBinding.typeToDom.delete(type);
  }

  /**
   * Creates an association (the information that a DOM element belongs to a
   * type).
   *
   * @param {DomBinding} domBinding The binding object
   * @param {Element} dom The dom that is to be associated with type
   * @param {YXmlElement|YXmlHook} type The type that is to be associated with dom
   *
   */
  function createAssociation(domBinding, dom, type) {
    if (domBinding !== undefined) {
      domBinding.domToType.set(dom, type);
      domBinding.typeToDom.set(type, dom);
    }
  }

  /**
   * If oldDom is associated with a type, associate newDom with the type and
   * forget about oldDom. If oldDom is not associated with any type, nothing happens.
   *
   * @param {DomBinding} domBinding The binding object
   * @param {Element} oldDom The existing dom
   * @param {Element} newDom The new dom object
   */
  function switchAssociation(domBinding, oldDom, newDom) {
    if (domBinding !== undefined) {
      var type = domBinding.domToType.get(oldDom);
      if (type !== undefined) {
        removeAssociation(domBinding, oldDom, type);
        createAssociation(domBinding, newDom, type);
      }
    }
  }

  /**
   * Insert Dom Elements after one of the children of this YXmlFragment.
   * The Dom elements will be bound to a new YXmlElement and inserted at the
   * specified position.
   *
   * @param {YXmlElement} type The type in which to insert DOM elements.
   * @param {YXmlElement|null} prev The reference node. New YxmlElements are
   *                           inserted after this node. Set null to insert at
   *                           the beginning.
   * @param {Array<Element>} doms The Dom elements to insert.
   * @param {?Document} _document Optional. Provide the global document object.
   * @param {DomBinding} binding The dom binding
   * @return {Array<YXmlElement>} The YxmlElements that are inserted.
   *
   * @private
   */
  function insertDomElementsAfter(type, prev, doms, _document, binding) {
    var types = domsToTypes(doms, _document, binding.opts.hooks, binding.filter, binding);
    return type.insertAfter(prev, types);
  }

  function domsToTypes(doms, _document, hooks, filter, binding) {
    var types = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = doms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var dom = _step.value;

        var t = domToType(dom, _document, hooks, filter, binding);
        if (t !== false) {
          types.push(t);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return types;
  }

  /**
   * @private
   */
  function insertNodeHelper(yxml, prevExpectedNode, child, _document, binding) {
    var insertedNodes = insertDomElementsAfter(yxml, prevExpectedNode, [child], _document, binding);
    if (insertedNodes.length > 0) {
      return insertedNodes[0];
    } else {
      return prevExpectedNode;
    }
  }

  /**
   * Remove children until `elem` is found.
   *
   * @param {Element} parent The parent of `elem` and `currentChild`.
   * @param {Element} currentChild Start removing elements with `currentChild`. If
   *                               `currentChild` is `elem` it won't be removed.
   * @param {Element|null} elem The elemnt to look for.
   *
   * @private
   */
  function removeDomChildrenUntilElementFound(parent, currentChild, elem) {
    while (currentChild !== elem) {
      var del = currentChild;
      currentChild = currentChild.nextSibling;
      parent.removeChild(del);
    }
  }

  /**
   * Represents text in a Dom Element. In the future this type will also handle
   * simple formatting information like bold and italic.
   *
   * @param {String} arg1 Initial value.
   */

  var YXmlText = function (_YText) {
    inherits(YXmlText, _YText);

    function YXmlText() {
      classCallCheck(this, YXmlText);
      return possibleConstructorReturn(this, (YXmlText.__proto__ || Object.getPrototypeOf(YXmlText)).apply(this, arguments));
    }

    createClass(YXmlText, [{
      key: 'toDom',

      /**
       * Creates a Dom Element that mirrors this YXmlText.
       *
       * @param {Document} [_document=document] The document object (you must define
       *                                        this when calling this method in
       *                                        nodejs)
       * @param {Object<key:hookDefinition>} [hooks] Optional property to customize how hooks
       *                                             are presented in the DOM
       * @param {DomBinding} [binding] You should not set this property. This is
       *                               used if DomBinding wants to create a
       *                               association to the created DOM type.
       * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
       *
       * @public
       */
      value: function toDom() {
        var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;
        var binding = arguments[2];

        var dom = _document.createTextNode(this.toString());
        createAssociation(binding, dom, this);
        return dom;
      }

      /**
       * Mark this Item as deleted.
       *
       * @param {Y} y The Yjs instance
       * @param {boolean} createDelete Whether to propagate a message that this
       *                               Type was deleted.
       * @param {boolean} [gcChildren=y._hasUndoManager===false] Whether to garbage
       *                                         collect the children of this type.
       *
       * @private
       */

    }, {
      key: '_delete',
      value: function _delete(y, createDelete, gcChildren) {
        get(YXmlText.prototype.__proto__ || Object.getPrototypeOf(YXmlText.prototype), '_delete', this).call(this, y, createDelete, gcChildren);
      }
    }]);
    return YXmlText;
  }(YText);

  var structs = new Map();
  var references = new Map();

  /**
   * Register a new Yjs types. The same type must be defined with the same
   * reference on all clients!
   *
   * @param {Number} reference
   * @param {class} structConstructor
   *
   * @public
   */
  function registerStruct(reference, structConstructor) {
    structs.set(reference, structConstructor);
    references.set(structConstructor, reference);
  }

  /**
   * @private
   */
  function getStruct(reference) {
    return structs.get(reference);
  }

  /**
   * @private
   */
  function getStructReference(typeConstructor) {
    return references.get(typeConstructor);
  }

  // TODO: reorder (Item* should have low numbers)
  registerStruct(0, ItemJSON);
  registerStruct(1, ItemString);
  registerStruct(10, ItemFormat);
  registerStruct(11, ItemEmbed);
  registerStruct(2, Delete);

  registerStruct(3, YArray);
  registerStruct(4, YMap);
  registerStruct(5, YText);
  registerStruct(6, YXmlFragment);
  registerStruct(7, YXmlElement);
  registerStruct(8, YXmlText);
  registerStruct(9, YXmlHook);

  registerStruct(12, GC);

  var RootFakeUserID = 0xFFFFFF;

  var RootID = function () {
    function RootID(name, typeConstructor) {
      classCallCheck(this, RootID);

      this.user = RootFakeUserID;
      this.name = name;
      this.type = getStructReference(typeConstructor);
    }

    createClass(RootID, [{
      key: 'equals',
      value: function equals(id) {
        return id !== null && id.user === this.user && id.name === this.name && id.type === this.type;
      }
    }, {
      key: 'lessThan',
      value: function lessThan(id) {
        if (id.constructor === RootID) {
          return this.user < id.user || this.user === id.user && (this.name < id.name || this.name === id.name && this.type < id.type);
        } else {
          return true;
        }
      }
    }]);
    return RootID;
  }();

  var OperationStore = function (_Tree) {
    inherits(OperationStore, _Tree);

    function OperationStore(y) {
      classCallCheck(this, OperationStore);

      var _this = possibleConstructorReturn(this, (OperationStore.__proto__ || Object.getPrototypeOf(OperationStore)).call(this));

      _this.y = y;
      return _this;
    }

    createClass(OperationStore, [{
      key: 'logTable',
      value: function logTable() {
        var items = [];
        this.iterate(null, null, function (item) {
          if (item.constructor === GC) {
            items.push({
              id: logID(item),
              content: item._length,
              deleted: 'GC'
            });
          } else {
            items.push({
              id: logID(item),
              origin: logID(item._origin === null ? null : item._origin._lastId),
              left: logID(item._left === null ? null : item._left._lastId),
              right: logID(item._right),
              right_origin: logID(item._right_origin),
              parent: logID(item._parent),
              parentSub: item._parentSub,
              deleted: item._deleted,
              content: JSON.stringify(item._content)
            });
          }
        });
        console.table(items);
      }
    }, {
      key: 'get',
      value: function get$$1(id) {
        var struct = this.find(id);
        if (struct === null && id instanceof RootID) {
          var Constr = getStruct(id.type);
          var y = this.y;
          struct = new Constr();
          struct._id = id;
          struct._parent = y;
          y.transact(function () {
            struct._integrate(y);
          });
          this.put(struct);
        }
        return struct;
      }
      // Use getItem for structs with _length > 1

    }, {
      key: 'getItem',
      value: function getItem(id) {
        var item = this.findWithUpperBound(id);
        if (item === null) {
          return null;
        }
        var itemID = item._id;
        if (id.user === itemID.user && id.clock < itemID.clock + item._length) {
          return item;
        } else {
          return null;
        }
      }
      // Return an insertion such that id is the first element of content
      // This function manipulates an item, if necessary

    }, {
      key: 'getItemCleanStart',
      value: function getItemCleanStart(id) {
        var ins = this.getItem(id);
        if (ins === null || ins._length === 1) {
          return ins;
        }
        var insID = ins._id;
        if (insID.clock === id.clock) {
          return ins;
        } else {
          return ins._splitAt(this.y, id.clock - insID.clock);
        }
      }
      // Return an insertion such that id is the last element of content
      // This function manipulates an operation, if necessary

    }, {
      key: 'getItemCleanEnd',
      value: function getItemCleanEnd(id) {
        var ins = this.getItem(id);
        if (ins === null || ins._length === 1) {
          return ins;
        }
        var insID = ins._id;
        if (insID.clock + ins._length - 1 === id.clock) {
          return ins;
        } else {
          ins._splitAt(this.y, id.clock - insID.clock + 1);
          return ins;
        }
      }
    }]);
    return OperationStore;
  }(Tree);

  var StateStore = function () {
    function StateStore(y) {
      classCallCheck(this, StateStore);

      this.y = y;
      this.state = new Map();
    }

    createClass(StateStore, [{
      key: 'logTable',
      value: function logTable() {
        var entries = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = slicedToArray(_step.value, 2),
                user = _step$value[0],
                state = _step$value[1];

            entries.push({
              user: user, state: state
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        console.table(entries);
      }
    }, {
      key: 'getNextID',
      value: function getNextID(len) {
        var user = this.y.userID;
        var state = this.getState(user);
        this.setState(user, state + len);
        return new ID(user, state);
      }
    }, {
      key: 'updateRemoteState',
      value: function updateRemoteState(struct) {
        var user = struct._id.user;
        var userState = this.state.get(user);
        while (struct !== null && struct._id.clock === userState) {
          userState += struct._length;
          struct = this.y.os.get(new ID(user, userState));
        }
        this.state.set(user, userState);
      }
    }, {
      key: 'getState',
      value: function getState(user) {
        var state = this.state.get(user);
        if (state == null) {
          return 0;
        }
        return state;
      }
    }, {
      key: 'setState',
      value: function setState(user, state) {
        // TODO: modify missingi structs here
        var beforeState = this.y._transaction.beforeState;
        if (!beforeState.has(user)) {
          beforeState.set(user, this.getState(user));
        }
        this.state.set(user, state);
      }
    }]);
    return StateStore;
  }();

  /* global crypto */

  function generateRandomUint32() {
    if (typeof crypto !== 'undefined' && crypto.getRandomValue != null) {
      // browser
      var arr = new Uint32Array(1);
      crypto.getRandomValues(arr);
      return arr[0];
    } else if (typeof crypto !== 'undefined' && crypto.randomBytes != null) {
      // node
      var buf = crypto.randomBytes(4);
      return new Uint32Array(buf.buffer)[0];
    } else {
      return Math.ceil(Math.random() * 0xFFFFFFFF);
    }
  }

  /**
   * Handles named events.
   */
  var NamedEventHandler = function () {
    function NamedEventHandler() {
      classCallCheck(this, NamedEventHandler);

      this._eventListener = new Map();
      this._stateListener = new Map();
    }

    /**
     * @private
     * Returns all listeners that listen to a specified name.
     *
     * @param {String} name The query event name.
     */


    createClass(NamedEventHandler, [{
      key: '_getListener',
      value: function _getListener(name) {
        var listeners = this._eventListener.get(name);
        if (listeners === undefined) {
          listeners = {
            once: new Set(),
            on: new Set()
          };
          this._eventListener.set(name, listeners);
        }
        return listeners;
      }

      /**
       * Adds a named event listener. The listener is removed after it has been
       * called once.
       *
       * @param {String} name The event name to listen to.
       * @param {Function} f The function that is executed when the event is fired.
       */

    }, {
      key: 'once',
      value: function once(name, f) {
        var listeners = this._getListener(name);
        listeners.once.add(f);
      }

      /**
       * Adds a named event listener.
       *
       * @param {String} name The event name to listen to.
       * @param {Function} f The function that is executed when the event is fired.
       */

    }, {
      key: 'on',
      value: function on(name, f) {
        var listeners = this._getListener(name);
        listeners.on.add(f);
      }

      /**
       * @private
       * Init the saved state for an event name.
       */

    }, {
      key: '_initStateListener',
      value: function _initStateListener(name) {
        var state = this._stateListener.get(name);
        if (state === undefined) {
          state = {};
          state.promise = new Promise(function (resolve) {
            state.resolve = resolve;
          });
          this._stateListener.set(name, state);
        }
        return state;
      }

      /**
       * Returns a Promise that is resolved when the event name is called.
       * The Promise is immediately resolved when the event name was called in the
       * past.
       */

    }, {
      key: 'when',
      value: function when(name) {
        return this._initStateListener(name).promise;
      }

      /**
       * Remove an event listener that was registered with either
       * {@link EventHandler#on} or {@link EventHandler#once}.
       */

    }, {
      key: 'off',
      value: function off(name, f) {
        if (name == null || f == null) {
          throw new Error('You must specify event name and function!');
        }
        var listener = this._eventListener.get(name);
        if (listener !== undefined) {
          listener.on.delete(f);
          listener.once.delete(f);
        }
      }

      /**
       * Emit a named event. All registered event listeners that listen to the
       * specified name will receive the event.
       *
       * @param {String} name The event name.
       * @param {Array} args The arguments that are applied to the event listener.
       */

    }, {
      key: 'emit',
      value: function emit(name) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        this._initStateListener(name).resolve();
        var listener = this._eventListener.get(name);
        if (listener !== undefined) {
          listener.on.forEach(function (f) {
            return f.apply(null, args);
          });
          listener.once.forEach(function (f) {
            return f.apply(null, args);
          });
          listener.once = new Set();
        } else if (name === 'error') {
          console.error(args[0]);
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this._eventListener = null;
      }
    }]);
    return NamedEventHandler;
  }();

  // TODO: Implement function to describe ranges

  /**
   * A relative position that is based on the Yjs model. In contrast to an
   * absolute position (position by index), the relative position can be
   * recomputed when remote changes are received. For example:
   *
   * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the cursor position.
   *
   * A relative cursor position can be obtained with the function
   * {@link getRelativePosition} and it can be transformed to an absolute position
   * with {@link fromRelativePosition}.
   *
   * Pro tip: Use this to implement shared cursor locations in YText or YXml!
   * The relative position is {@link encodable}, so you can send it to other
   * clients.
   *
   * @example
   * // Current cursor position is at position 10
   * let relativePosition = getRelativePosition(yText, 10)
   * // modify yText
   * yText.insert(0, 'abc')
   * yText.delete(3, 10)
   * // Compute the cursor position
   * let absolutePosition = fromRelativePosition(y, relativePosition)
   * absolutePosition.type // => yText
   * console.log('cursor location is ' + absolutePosition.offset) // => cursor location is 3
   *
   * @typedef {encodable} RelativePosition
   */

  /**
   * Create a relativePosition based on a absolute position.
   *
   * @param {YType} type The base type (e.g. YText or YArray).
   * @param {Integer} offset The absolute position.
   */
  function getRelativePosition(type, offset) {
    // TODO: rename to createRelativePosition
    var t = type._start;
    while (t !== null) {
      if (t._deleted === false) {
        if (t._length > offset) {
          return [t._id.user, t._id.clock + offset];
        }
        offset -= t._length;
      }
      t = t._right;
    }
    return ['endof', type._id.user, type._id.clock || null, type._id.name || null, type._id.type || null];
  }

  /**
   * @typedef {Object} AbsolutePosition The result of {@link fromRelativePosition}
   * @property {YType} type The type on which to apply the absolute position.
   * @property {Integer} offset The absolute offset.r
   */

  /**
   * Transforms a relative position back to a relative position.
   *
   * @param {Y} y The Yjs instance in which to query for the absolute position.
   * @param {RelativePosition} rpos The relative position.
   * @return {AbsolutePosition} The absolute position in the Yjs model
   *                            (type + offset).
   */
  function fromRelativePosition(y, rpos) {
    if (rpos[0] === 'endof') {
      var id = void 0;
      if (rpos[3] === null) {
        id = new ID(rpos[1], rpos[2]);
      } else {
        id = new RootID(rpos[3], rpos[4]);
      }
      var type = y.os.get(id);
      while (type._redone !== null) {
        type = type._redone;
      }
      if (type === null || type.constructor === GC) {
        return null;
      }
      return {
        type: type,
        offset: type.length
      };
    } else {
      var offset = 0;
      var struct = y.os.findNodeWithUpperBound(new ID(rpos[0], rpos[1])).val;
      var diff = rpos[1] - struct._id.clock;
      while (struct._redone !== null) {
        struct = struct._redone;
      }
      var parent = struct._parent;
      if (struct.constructor === GC || parent._deleted) {
        return null;
      }
      if (!struct._deleted) {
        offset = diff;
      }
      struct = struct._left;
      while (struct !== null) {
        if (!struct._deleted) {
          offset += struct._length;
        }
        struct = struct._left;
      }
      return {
        type: parent,
        offset: offset
      };
    }
  }

  // TODO: rename mutex

  /**
   * Creates a mutual exclude function with the following property:
   *
   * @example
   * const mutualExclude = createMutualExclude()
   * mutualExclude(function () {
   *   // This function is immediately executed
   *   mutualExclude(function () {
   *     // This function is never executed, as it is called with the same
   *     // mutualExclude
   *   })
   * })
   *
   * @return {Function} A mutual exclude function
   * @public
   */
  function createMutualExclude() {
    var token = true;
    return function mutualExclude(f) {
      if (token) {
        token = false;
        try {
          f();
        } catch (e) {
          console.error(e);
        }
        token = true;
      }
    };
  }

  /**
   * Abstract class for bindings.
   *
   * A binding handles data binding from a Yjs type to a data object. For example,
   * you can bind a Quill editor instance to a YText instance with the `QuillBinding` class.
   *
   * It is expected that a concrete implementation accepts two parameters
   * (type and binding target).
   *
   * @example
   *   const quill = new Quill(document.createElement('div'))
   *   const type = y.define('quill', Y.Text)
   *   const binding = new Y.QuillBinding(quill, type)
   *
   */

  var Binding = function () {
    /**
     * @param {YType} type Yjs type.
     * @param {any} target Binding Target.
     */
    function Binding(type, target) {
      classCallCheck(this, Binding);

      /**
       * The Yjs type that is bound to `target`
       * @type {YType}
       */
      this.type = type;
      /**
       * The target that `type` is bound to.
       * @type {*}
       */
      this.target = target;
      /**
       * @private
       */
      this._mutualExclude = createMutualExclude();
    }
    /**
     * Remove all data observers (both from the type and the target).
     */


    createClass(Binding, [{
      key: 'destroy',
      value: function destroy() {
        this.type = null;
        this.target = null;
      }
    }]);
    return Binding;
  }();

  /* globals getSelection */

  var relativeSelection = null;

  function _getCurrentRelativeSelection(domBinding) {
    var _getSelection = getSelection(),
        baseNode = _getSelection.baseNode,
        baseOffset = _getSelection.baseOffset,
        extentNode = _getSelection.extentNode,
        extentOffset = _getSelection.extentOffset;

    var baseNodeType = domBinding.domToType.get(baseNode);
    var extentNodeType = domBinding.domToType.get(extentNode);
    if (baseNodeType !== undefined && extentNodeType !== undefined) {
      return {
        from: getRelativePosition(baseNodeType, baseOffset),
        to: getRelativePosition(extentNodeType, extentOffset)
      };
    }
    return null;
  }

  var getCurrentRelativeSelection = typeof getSelection !== 'undefined' ? _getCurrentRelativeSelection : function () {
    return null;
  };

  function beforeTransactionSelectionFixer(domBinding, remote) {
    if (remote) {
      relativeSelection = getCurrentRelativeSelection(domBinding);
    }
  }

  /**
   * @private
   */
  function afterTransactionSelectionFixer(domBinding, remote) {
    if (relativeSelection !== null && remote) {
      domBinding.restoreSelection(relativeSelection);
    }
  }

  /* global getSelection */

  function findScrollReference(scrollingElement) {
    if (scrollingElement !== null) {
      var anchor = getSelection().anchorNode;
      if (anchor == null) {
        var children = scrollingElement.children; // only iterate through non-text nodes
        for (var i = 0; i < children.length; i++) {
          var elem = children[i];
          var rect = elem.getBoundingClientRect();
          if (rect.top >= 0) {
            return { elem: elem, top: rect.top };
          }
        }
      } else {
        if (anchor.nodeType === document.TEXT_NODE) {
          anchor = anchor.parentElement;
        }
        var top = anchor.getBoundingClientRect().top;
        return { elem: anchor, top: top };
      }
    }
    return null;
  }

  function fixScroll(scrollingElement, ref) {
    if (ref !== null) {
      var elem = ref.elem,
          top = ref.top;

      var currentTop = elem.getBoundingClientRect().top;
      var newScroll = scrollingElement.scrollTop + currentTop - top;
      if (newScroll >= 0) {
        scrollingElement.scrollTop = newScroll;
      }
    }
  }

  /**
   * @private
   */
  function typeObserver(events) {
    var _this = this;

    this._mutualExclude(function () {
      var scrollRef = findScrollReference(_this.scrollingElement);
      events.forEach(function (event) {
        var yxml = event.target;
        var dom = _this.typeToDom.get(yxml);
        if (dom !== undefined && dom !== false) {
          if (yxml.constructor === YXmlText) {
            dom.nodeValue = yxml.toString();
          } else if (event.attributesChanged !== undefined) {
            // update attributes
            event.attributesChanged.forEach(function (attributeName) {
              var value = yxml.getAttribute(attributeName);
              if (value === undefined) {
                dom.removeAttribute(attributeName);
              } else {
                dom.setAttribute(attributeName, value);
              }
            });
            /*
             * TODO: instead of hard-checking the types, it would be best to
             *       specify the type's features. E.g.
             *         - _yxmlHasAttributes
             *         - _yxmlHasChildren
             *       Furthermore, the features shouldn't be encoded in the types,
             *       only in the attributes (above)
             */
            if (event.childListChanged && yxml.constructor !== YXmlHook) {
              var currentChild = dom.firstChild;
              yxml.forEach(function (childType) {
                var childNode = _this.typeToDom.get(childType);
                switch (childNode) {
                  case undefined:
                    // Does not exist. Create it.
                    var node = childType.toDom(_this.opts.document, _this.opts.hooks, _this);
                    dom.insertBefore(node, currentChild);
                    break;
                  case false:
                    // nop
                    break;
                  default:
                    // Is already attached to the dom.
                    // Find it and remove all dom nodes in-between.
                    removeDomChildrenUntilElementFound(dom, currentChild, childNode);
                    currentChild = childNode.nextSibling;
                    break;
                }
              });
              removeDomChildrenUntilElementFound(dom, currentChild, null);
            }
          }
        }
      });
      fixScroll(_this.scrollingElement, scrollRef);
    });
  }

  /**
   * A SimpleDiff describes a change on a String.
   *
   * @example
   * console.log(a) // the old value
   * console.log(b) // the updated value
   * // Apply changes of diff (pseudocode)
   * a.remove(diff.pos, diff.remove) // Remove `diff.remove` characters
   * a.insert(diff.pos, diff.insert) // Insert `diff.insert`
   * a === b // values match
   *
   * @typedef {Object} SimpleDiff
   * @property {Number} pos The index where changes were applied
   * @property {Number} delete The number of characters to delete starting
   *                                  at `index`.
   * @property {String} insert The new text to insert at `index` after applying
   *                           `delete`
   */

  /**
   * Create a diff between two strings. This diff implementation is highly
   * efficient, but not very sophisticated.
   *
   * @public
   * @param {String} a The old version of the string
   * @param {String} b The updated version of the string
   * @return {SimpleDiff} The diff description.
   */
  function simpleDiff(a, b) {
    var left = 0; // number of same characters counting from left
    var right = 0; // number of same characters counting from right
    while (left < a.length && left < b.length && a[left] === b[left]) {
      left++;
    }
    if (left !== a.length || left !== b.length) {
      // Only check right if a !== b
      while (right + left < a.length && right + left < b.length && a[a.length - right - 1] === b[b.length - right - 1]) {
        right++;
      }
    }
    return {
      pos: left, // TODO: rename to index (also in type above)
      remove: a.length - left - right,
      insert: b.slice(left, b.length - right)
    };
  }

  /**
   * 1. Check if any of the nodes was deleted
   * 2. Iterate over the children.
   *    2.1 If a node exists that is not yet bound to a type, insert a new node
   *    2.2 If _contents.length < dom.childNodes.length, fill the
   *        rest of _content with childNodes
   *    2.3 If a node was moved, delete it and
   *       recreate a new yxml element that is bound to that node.
   *       You can detect that a node was moved because expectedId
   *       !== actualId in the list
   * @private
   */
  function applyChangesFromDom(binding, dom, yxml, _document) {
    if (yxml == null || yxml === false || yxml.constructor === YXmlHook) {
      return;
    }
    var y = yxml._y;
    var knownChildren = new Set();
    for (var i = dom.childNodes.length - 1; i >= 0; i--) {
      var type = binding.domToType.get(dom.childNodes[i]);
      if (type !== undefined && type !== false) {
        knownChildren.add(type);
      }
    }
    // 1. Check if any of the nodes was deleted
    yxml.forEach(function (childType) {
      if (knownChildren.has(childType) === false) {
        childType._delete(y);
        removeAssociation(binding, binding.typeToDom.get(childType), childType);
      }
    });
    // 2. iterate
    var childNodes = dom.childNodes;
    var len = childNodes.length;
    var prevExpectedType = null;
    var expectedType = iterateUntilUndeleted(yxml._start);
    for (var domCnt = 0; domCnt < len; domCnt++) {
      var childNode = childNodes[domCnt];
      var childType = binding.domToType.get(childNode);
      if (childType !== undefined) {
        if (childType === false) {
          // should be ignored or is going to be deleted
          continue;
        }
        if (expectedType !== null) {
          if (expectedType !== childType) {
            // 2.3 Not expected node
            if (childType._parent !== yxml) {
              // child was moved from another parent
              // childType is going to be deleted by its previous parent
              removeAssociation(binding, childNode, childType);
            } else {
              // child was moved to a different position.
              removeAssociation(binding, childNode, childType);
              childType._delete(y);
            }
            prevExpectedType = insertNodeHelper(yxml, prevExpectedType, childNode, _document, binding);
          } else {
            // Found expected node. Continue.
            prevExpectedType = expectedType;
            expectedType = iterateUntilUndeleted(expectedType._right);
          }
        } else {
          // 2.2 Fill _content with child nodes
          prevExpectedType = insertNodeHelper(yxml, prevExpectedType, childNode, _document, binding);
        }
      } else {
        // 2.1 A new node was found
        prevExpectedType = insertNodeHelper(yxml, prevExpectedType, childNode, _document, binding);
      }
    }
  }

  /**
   * @private
   */
  function domObserver(mutations, _document) {
    var _this = this;

    this._mutualExclude(function () {
      _this.type._y.transact(function () {
        var diffChildren = new Set();
        mutations.forEach(function (mutation) {
          var dom = mutation.target;
          var yxml = _this.domToType.get(dom);
          if (yxml === undefined) {
            // In case yxml is undefined, we double check if we forgot to bind the dom
            var parent = dom;
            var yParent = void 0;
            do {
              parent = parent.parentElement;
              yParent = _this.domToType.get(parent);
            } while (yParent === undefined && parent !== null);
            if (yParent !== false && yParent !== undefined && yParent.constructor !== YXmlHook) {
              diffChildren.add(parent);
            }
            return;
          } else if (yxml === false || yxml.constructor === YXmlHook) {
            // dom element is filtered / a dom hook
            return;
          }
          switch (mutation.type) {
            case 'characterData':
              var change = simpleDiff(yxml.toString(), dom.nodeValue);
              yxml.delete(change.pos, change.remove);
              yxml.insert(change.pos, change.insert);
              break;
            case 'attributes':
              if (yxml.constructor === YXmlFragment) {
                break;
              }
              var name = mutation.attributeName;
              var val = dom.getAttribute(name);
              // check if filter accepts attribute
              var attributes = new Map();
              attributes.set(name, val);
              if (yxml.constructor !== YXmlFragment && _this.filter(dom.nodeName, attributes).size > 0) {
                if (yxml.getAttribute(name) !== val) {
                  if (val == null) {
                    yxml.removeAttribute(name);
                  } else {
                    yxml.setAttribute(name, val);
                  }
                }
              }
              break;
            case 'childList':
              diffChildren.add(mutation.target);
              break;
          }
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = diffChildren[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var dom = _step.value;

            var yxml = _this.domToType.get(dom);
            applyChangesFromDom(_this, dom, yxml, _document);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });
    });
  }

  /* global MutationObserver, getSelection */

  /**
   * A binding that binds the children of a YXmlFragment to a DOM element.
   *
   * This binding is automatically destroyed when its parent is deleted.
   *
   * @example
   * const div = document.createElement('div')
   * const type = y.define('xml', Y.XmlFragment)
   * const binding = new Y.QuillBinding(type, div)
   *
   */

  var DomBinding = function (_Binding) {
    inherits(DomBinding, _Binding);

    /**
     * @param {YXmlFragment} type The bind source. This is the ultimate source of
     *                            truth.
     * @param {Element} target The bind target. Mirrors the target.
     * @param {Object} [opts] Optional configurations
      * @param {FilterFunction} [opts.filter=defaultFilter] The filter function to use.
     */
    function DomBinding(type, target) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      classCallCheck(this, DomBinding);

      var _this = possibleConstructorReturn(this, (DomBinding.__proto__ || Object.getPrototypeOf(DomBinding)).call(this, type, target));
      // Binding handles textType as this.type and domTextarea as this.target


      _this.opts = opts;
      opts.document = opts.document || document;
      opts.hooks = opts.hooks || {};
      _this.scrollingElement = opts.scrollingElement || null;
      /**
       * Maps each DOM element to the type that it is associated with.
       * @type {Map}
       */
      _this.domToType = new Map();
      /**
       * Maps each YXml type to the DOM element that it is associated with.
       * @type {Map}
       */
      _this.typeToDom = new Map();
      /**
       * Defines which DOM attributes and elements to filter out.
       * Also filters remote changes.
       * @type {FilterFunction}
       */
      _this.filter = opts.filter || defaultFilter;
      // set initial value
      target.innerHTML = '';
      type.forEach(function (child) {
        target.insertBefore(child.toDom(opts.document, opts.hooks, _this), null);
      });
      _this._typeObserver = typeObserver.bind(_this);
      _this._domObserver = function (mutations) {
        domObserver.call(_this, mutations, opts.document);
      };
      type.observeDeep(_this._typeObserver);
      _this._mutationObserver = new MutationObserver(_this._domObserver);
      _this._mutationObserver.observe(target, {
        childList: true,
        attributes: true,
        characterData: true,
        subtree: true
      });
      _this._currentSel = null;
      document.addEventListener('selectionchange', function () {
        _this._currentSel = getCurrentRelativeSelection(_this);
      });
      var y = type._y;
      _this.y = y;
      // Force flush dom changes before Type changes are applied (they might
      // modify the dom)
      _this._beforeTransactionHandler = function (y, transaction, remote) {
        _this._domObserver(_this._mutationObserver.takeRecords());
        _this._mutualExclude(function () {
          beforeTransactionSelectionFixer(_this, remote);
        });
      };
      y.on('beforeTransaction', _this._beforeTransactionHandler);
      _this._afterTransactionHandler = function (y, transaction, remote) {
        _this._mutualExclude(function () {
          afterTransactionSelectionFixer(_this, remote);
        });
        // remove associations
        // TODO: this could be done more efficiently
        // e.g. Always delete using the following approach, or removeAssociation
        // in dom/type-observer..
        transaction.deletedStructs.forEach(function (type) {
          var dom = _this.typeToDom.get(type);
          if (dom !== undefined) {
            removeAssociation(_this, dom, type);
          }
        });
      };
      y.on('afterTransaction', _this._afterTransactionHandler);
      // Before calling observers, apply dom filter to all changed and new types.
      _this._beforeObserverCallsHandler = function (y, transaction) {
        // Apply dom filter to new and changed types
        transaction.changedTypes.forEach(function (subs, type) {
          // Only check attributes. New types are filtered below.
          if (subs.size > 1 || subs.size === 1 && subs.has(null) === false) {
            applyFilterOnType(y, _this, type);
          }
        });
        transaction.newTypes.forEach(function (type) {
          applyFilterOnType(y, _this, type);
        });
      };
      y.on('beforeObserverCalls', _this._beforeObserverCallsHandler);
      createAssociation(_this, target, type);
      return _this;
    }

    /**
     * NOTE: currently does not apply filter to existing elements!
     * @param {FilterFunction} filter The filter function to use from now on.
     */


    createClass(DomBinding, [{
      key: 'setFilter',
      value: function setFilter(filter) {
        this.filter = filter;
        // TODO: apply filter to all elements
      }
    }, {
      key: '_getUndoStackInfo',
      value: function _getUndoStackInfo() {
        return this.getSelection();
      }
    }, {
      key: '_restoreUndoStackInfo',
      value: function _restoreUndoStackInfo(info) {
        this.restoreSelection(info);
      }
    }, {
      key: 'getSelection',
      value: function getSelection() {
        return this._currentSel;
      }
    }, {
      key: 'restoreSelection',
      value: function restoreSelection(selection) {
        if (selection !== null) {
          var to = selection.to,
              from = selection.from;

          var shouldUpdate = false;
          /**
           * There is little information on the difference between anchor/focus and base/extent.
           * MDN doesn't even mention base/extent anymore.. though you still have to call
           * setBaseAndExtent to change the selection..
           * I can observe that base/extend refer to notes higher up in the xml hierachy.
           * Espesially for undo/redo this is preferred. If this becomes a problem in the future,
           * we should probably go back to anchor/focus.
           */
          var browserSelection = getSelection();
          var baseNode = browserSelection.baseNode,
              baseOffset = browserSelection.baseOffset,
              extentNode = browserSelection.extentNode,
              extentOffset = browserSelection.extentOffset;

          if (from !== null) {
            var sel = fromRelativePosition(this.y, from);
            if (sel !== null) {
              var node = this.typeToDom.get(sel.type);
              var offset = sel.offset;
              if (node !== baseNode || offset !== baseOffset) {
                baseNode = node;
                baseOffset = offset;
                shouldUpdate = true;
              }
            }
          }
          if (to !== null) {
            var _sel = fromRelativePosition(this.y, to);
            if (_sel !== null) {
              var _node = this.typeToDom.get(_sel.type);
              var _offset = _sel.offset;
              if (_node !== extentNode || _offset !== extentOffset) {
                extentNode = _node;
                extentOffset = _offset;
                shouldUpdate = true;
              }
            }
          }
          if (shouldUpdate) {
            browserSelection.setBaseAndExtent(baseNode, baseOffset, extentNode, extentOffset);
          }
        }
      }

      /**
       * Remove all properties that are handled by this class.
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.domToType = null;
        this.typeToDom = null;
        this.type.unobserveDeep(this._typeObserver);
        this._mutationObserver.disconnect();
        var y = this.type._y;
        y.off('beforeTransaction', this._beforeTransactionHandler);
        y.off('beforeObserverCalls', this._beforeObserverCallsHandler);
        y.off('afterTransaction', this._afterTransactionHandler);
        get(DomBinding.prototype.__proto__ || Object.getPrototypeOf(DomBinding.prototype), 'destroy', this).call(this);
      }
    }]);
    return DomBinding;
  }(Binding);

  /**
   * Anything that can be encoded with `JSON.stringify` and can be decoded with
   * `JSON.parse`.
   *
   * The following property should hold:
   * `JSON.parse(JSON.stringify(key))===key`
   *
   * At the moment the only safe values are number and string.
   *
   * @typedef {(number|string)} encodable
   */

  /**
   * A Yjs instance handles the state of shared data.
   *
   * @param {string} room Users in the same room share the same content
   * @param {Object} opts Connector definition
   * @param {AbstractPersistence} persistence Persistence adapter instance
   */

  var Y = function (_NamedEventHandler) {
    inherits(Y, _NamedEventHandler);

    function Y(room, opts, persistence) {
      var conf = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      classCallCheck(this, Y);

      var _this = possibleConstructorReturn(this, (Y.__proto__ || Object.getPrototypeOf(Y)).call(this));

      _this.gcEnabled = conf.gc || false;
      /**
       * The room name that this Yjs instance connects to.
       * @type {String}
       */
      _this.room = room;
      if (opts != null) {
        opts.connector.room = room;
      }
      _this._contentReady = false;
      _this._opts = opts;
      if (typeof opts.userID !== 'number') {
        _this.userID = generateRandomUint32();
      } else {
        _this.userID = opts.userID;
      }
      // TODO: This should be a Map so we can use encodables as keys
      _this.share = {};
      _this.ds = new DeleteStore(_this);
      _this.os = new OperationStore(_this);
      _this.ss = new StateStore(_this);
      _this._missingStructs = new Map();
      _this._readyToIntegrate = [];
      _this._transaction = null;
      /**
       * The {@link AbstractConnector}.that is used by this Yjs instance.
       * @type {AbstractConnector}
       */
      _this.connector = null;
      _this.connected = false;
      var initConnection = function initConnection() {
        if (opts != null) {
          _this.connector = new Y[opts.connector.name](_this, opts.connector);
          _this.connected = true;
          _this.emit('connectorReady');
        }
      };
      /**
       * The {@link AbstractPersistence} that is used by this Yjs instance.
       * @type {AbstractPersistence}
       */
      _this.persistence = null;
      if (persistence != null) {
        _this.persistence = persistence;
        persistence._init(_this).then(initConnection);
      } else {
        initConnection();
      }
      // for compatibility with isParentOf
      _this._parent = null;
      _this._hasUndoManager = false;
      return _this;
    }

    createClass(Y, [{
      key: '_setContentReady',
      value: function _setContentReady() {
        if (!this._contentReady) {
          this._contentReady = true;
          this.emit('content');
        }
      }
    }, {
      key: 'whenContentReady',
      value: function whenContentReady() {
        var _this2 = this;

        if (this._contentReady) {
          return Promise.resolve();
        } else {
          return new Promise(function (resolve) {
            _this2.once('content', resolve);
          });
        }
      }
    }, {
      key: '_beforeChange',
      value: function _beforeChange() {}
      /**
       * Changes that happen inside of a transaction are bundled. This means that
       * the observer fires _after_ the transaction is finished and that all changes
       * that happened inside of the transaction are sent as one message to the
       * other peers.
       *
       * @param {Function} f The function that should be executed as a transaction
       * @param {?Boolean} remote Optional. Whether this transaction is initiated by
       *                          a remote peer. This should not be set manually!
       *                          Defaults to false.
       */

    }, {
      key: 'transact',
      value: function transact(f) {
        var remote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var initialCall = this._transaction === null;
        if (initialCall) {
          this._transaction = new Transaction(this);
          this.emit('beforeTransaction', this, this._transaction, remote);
        }
        try {
          f(this);
        } catch (e) {
          console.error(e);
        }
        if (initialCall) {
          this.emit('beforeObserverCalls', this, this._transaction, remote);
          var transaction = this._transaction;
          this._transaction = null;
          // emit change events on changed types
          transaction.changedTypes.forEach(function (subs, type) {
            if (!type._deleted) {
              type._callObserver(transaction, subs, remote);
            }
          });
          transaction.changedParentTypes.forEach(function (events, type) {
            if (!type._deleted) {
              events = events.filter(function (event) {
                return !event.target._deleted;
              });
              events.forEach(function (event) {
                event.currentTarget = type;
              });
              // we don't have to check for events.length
              // because there is no way events is empty..
              type._deepEventHandler.callEventListeners(transaction, events);
            }
          });
          // when all changes & events are processed, emit afterTransaction event
          this.emit('afterTransaction', this, transaction, remote);
        }
      }

      /**
       * @private
       * Fake _start for root properties (y.set('name', type))
       */

    }, {
      key: 'define',


      /**
       * Define a shared data type.
       *
       * Multiple calls of `y.define(name, TypeConstructor)` yield the same result
       * and do not overwrite each other. I.e.
       * `y.define(name, type) === y.define(name, type)`
       *
       * After this method is called, the type is also available on `y.share[name]`.
       *
       * *Best Practices:*
       * Either define all types right after the Yjs instance is created or always
       * use `y.define(..)` when accessing a type.
       *
       * @example
       *   // Option 1
       *   const y = new Y(..)
       *   y.define('myArray', YArray)
       *   y.define('myMap', YMap)
       *   // .. when accessing the type use y.share[name]
       *   y.share.myArray.insert(..)
       *   y.share.myMap.set(..)
       *
       *   // Option2
       *   const y = new Y(..)
       *   // .. when accessing the type use `y.define(..)`
       *   y.define('myArray', YArray).insert(..)
       *   y.define('myMap', YMap).set(..)
       *
       * @param {String} name
       * @param {YType Constructor} TypeConstructor The constructor of the type definition
       * @returns {YType} The created type
       */
      value: function define(name, TypeConstructor) {
        var id = new RootID(name, TypeConstructor);
        var type = this.os.get(id);
        if (this.share[name] === undefined) {
          this.share[name] = type;
        } else if (this.share[name] !== type) {
          throw new Error('Type is already defined with a different constructor');
        }
        return type;
      }

      /**
       * Get a defined type. The type must be defined locally. First define the
       * type with {@link define}.
       *
       * This returns the same value as `y.share[name]`
       *
       * @param {String} name The typename
       */

    }, {
      key: 'get',
      value: function get$$1(name) {
        return this.share[name];
      }

      /**
       * Disconnect this Yjs Instance from the network. The connector will
       * unsubscribe from the room and document updates are not shared anymore.
       */

    }, {
      key: 'disconnect',
      value: function disconnect() {
        if (this.connected) {
          this.connected = false;
          return this.connector.disconnect();
        } else {
          return Promise.resolve();
        }
      }

      /**
       * If disconnected, tell the connector to reconnect to the room.
       */

    }, {
      key: 'reconnect',
      value: function reconnect() {
        if (!this.connected) {
          this.connected = true;
          return this.connector.reconnect();
        } else {
          return Promise.resolve();
        }
      }

      /**
       * Disconnect from the room, and destroy all traces of this Yjs instance.
       * Persisted data will remain until removed by the persistence adapter.
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        get(Y.prototype.__proto__ || Object.getPrototypeOf(Y.prototype), 'destroy', this).call(this);
        this.share = null;
        if (this.connector != null) {
          if (this.connector.destroy != null) {
            this.connector.destroy();
          } else {
            this.connector.disconnect();
          }
        }
        if (this.persistence !== null) {
          this.persistence.deinit(this);
          this.persistence = null;
        }
        this.os = null;
        this.ds = null;
        this.ss = null;
      }
    }, {
      key: '_start',
      get: function get$$1() {
        return null;
      }

      /**
       * @private
       * Fake _start for root properties (y.set('name', type))
       */
      ,
      set: function set$$1(start) {
        return null;
      }
    }]);
    return Y;
  }(NamedEventHandler);


  Y.extend = function extendYjs() {
    for (var i = 0; i < arguments.length; i++) {
      var f = arguments[i];
      if (typeof f === 'function') {
        f(Y);
      } else {
        throw new Error('Expected a function!');
      }
    }
  };

  var ReverseOperation = function ReverseOperation(y, transaction, bindingInfos) {
    var _this = this;

    classCallCheck(this, ReverseOperation);

    this.created = new Date();
    var beforeState = transaction.beforeState;
    if (beforeState.has(y.userID)) {
      this.toState = new ID(y.userID, y.ss.getState(y.userID) - 1);
      this.fromState = new ID(y.userID, beforeState.get(y.userID));
    } else {
      this.toState = null;
      this.fromState = null;
    }
    this.deletedStructs = new Set();
    transaction.deletedStructs.forEach(function (struct) {
      _this.deletedStructs.add({
        from: struct._id,
        len: struct._length
      });
    });
    /**
     * Maps from binding to binding information (e.g. cursor information)
     */
    this.bindingInfos = bindingInfos;
  };

  function applyReverseOperation(y, scope, reverseBuffer) {
    var performedUndo = false;
    var undoOp = void 0;
    y.transact(function () {
      var _loop = function _loop() {
        undoOp = reverseBuffer.pop();
        // make sure that it is possible to iterate {from}-{to}
        if (undoOp.fromState !== null) {
          y.os.getItemCleanStart(undoOp.fromState);
          y.os.getItemCleanEnd(undoOp.toState);
          y.os.iterate(undoOp.fromState, undoOp.toState, function (op) {
            while (op._deleted && op._redone !== null) {
              op = op._redone;
            }
            if (op._deleted === false && isParentOf(scope, op)) {
              performedUndo = true;
              op._delete(y);
            }
          });
        }
        var redoitems = new Set();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = undoOp.deletedStructs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var del = _step.value;

            var fromState = del.from;
            var toState = new ID(fromState.user, fromState.clock + del.len - 1);
            y.os.getItemCleanStart(fromState);
            y.os.getItemCleanEnd(toState);
            y.os.iterate(fromState, toState, function (op) {
              if (isParentOf(scope, op) && op._parent !== y && (op._id.user !== y.userID || undoOp.fromState === null || op._id.clock < undoOp.fromState.clock || op._id.clock > undoOp.toState.clock)) {
                redoitems.add(op);
              }
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        redoitems.forEach(function (op) {
          var opUndone = op._redo(y, redoitems);
          performedUndo = performedUndo || opUndone;
        });
      };

      while (!performedUndo && reverseBuffer.length > 0) {
        _loop();
      }
    });
    if (performedUndo) {
      // should be performed after the undo transaction
      undoOp.bindingInfos.forEach(function (info, binding) {
        binding._restoreUndoStackInfo(info);
      });
    }
    return performedUndo;
  }

  /**
   * Saves a history of locally applied operations. The UndoManager handles the
   * undoing and redoing of locally created changes.
   */

  var UndoManager = function () {
    /**
     * @param {YType} scope The scope on which to listen for changes.
     * @param {Object} options Optionally provided configuration.
     */
    function UndoManager(scope) {
      var _this2 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      classCallCheck(this, UndoManager);

      this.options = options;
      this._bindings = new Set(options.bindings);
      options.captureTimeout = options.captureTimeout == null ? 500 : options.captureTimeout;
      this._undoBuffer = [];
      this._redoBuffer = [];
      this._scope = scope;
      this._undoing = false;
      this._redoing = false;
      this._lastTransactionWasUndo = false;
      var y = scope._y;
      this.y = y;
      y._hasUndoManager = true;
      var bindingInfos = void 0;
      y.on('beforeTransaction', function (y, transaction, remote) {
        if (!remote) {
          // Store binding information before transaction is executed
          // By restoring the binding information, we can make sure that the state
          // before the transaction can be recovered
          bindingInfos = new Map();
          _this2._bindings.forEach(function (binding) {
            bindingInfos.set(binding, binding._getUndoStackInfo());
          });
        }
      });
      y.on('afterTransaction', function (y, transaction, remote) {
        if (!remote && transaction.changedParentTypes.has(scope)) {
          var reverseOperation = new ReverseOperation(y, transaction, bindingInfos);
          if (!_this2._undoing) {
            var lastUndoOp = _this2._undoBuffer.length > 0 ? _this2._undoBuffer[_this2._undoBuffer.length - 1] : null;
            if (_this2._redoing === false && _this2._lastTransactionWasUndo === false && lastUndoOp !== null && (options.captureTimeout < 0 || reverseOperation.created - lastUndoOp.created <= options.captureTimeout)) {
              lastUndoOp.created = reverseOperation.created;
              if (reverseOperation.toState !== null) {
                lastUndoOp.toState = reverseOperation.toState;
                if (lastUndoOp.fromState === null) {
                  lastUndoOp.fromState = reverseOperation.fromState;
                }
              }
              reverseOperation.deletedStructs.forEach(lastUndoOp.deletedStructs.add, lastUndoOp.deletedStructs);
            } else {
              _this2._lastTransactionWasUndo = false;
              _this2._undoBuffer.push(reverseOperation);
            }
            if (!_this2._redoing) {
              _this2._redoBuffer = [];
            }
          } else {
            _this2._lastTransactionWasUndo = true;
            _this2._redoBuffer.push(reverseOperation);
          }
        }
      });
    }

    /**
     * Enforce that the next change is created as a separate item in the undo stack
     */


    createClass(UndoManager, [{
      key: 'flushChanges',
      value: function flushChanges() {
        this._lastTransactionWasUndo = true;
      }

      /**
       * Undo the last locally created change.
       */

    }, {
      key: 'undo',
      value: function undo() {
        this._undoing = true;
        var performedUndo = applyReverseOperation(this.y, this._scope, this._undoBuffer);
        this._undoing = false;
        return performedUndo;
      }

      /**
       * Redo the last locally created change.
       */

    }, {
      key: 'redo',
      value: function redo() {
        this._redoing = true;
        var performedRedo = applyReverseOperation(this.y, this._scope, this._redoBuffer);
        this._redoing = false;
        return performedRedo;
      }
    }]);
    return UndoManager;
  }();

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var index = function index(val, options) {
    options = options || {};
    var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + 'd';
    }
    if (ms >= h) {
      return Math.round(ms / h) + 'h';
    }
    if (ms >= m) {
      return Math.round(ms / m) + 'm';
    }
    if (ms >= s) {
      return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  var debug = createCommonjsModule(function (module, exports) {
    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     *
     * Expose `debug()` as the module.
     */

    exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = index;

    /**
     * The currently active debug mode names, and names to skip.
     */

    exports.names = [];
    exports.skips = [];

    /**
     * Map of special "%n" handling functions, for the debug "format" argument.
     *
     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
     */

    exports.formatters = {};

    /**
     * Previous log timestamp.
     */

    var prevTime;

    /**
     * Select a color.
     * @param {String} namespace
     * @return {Number}
     * @api private
     */

    function selectColor(namespace) {
      var hash = 0,
          i;

      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }

      return exports.colors[Math.abs(hash) % exports.colors.length];
    }

    /**
     * Create a debugger with the given `namespace`.
     *
     * @param {String} namespace
     * @return {Function}
     * @api public
     */

    function createDebug(namespace) {

      function debug() {
        // disabled?
        if (!debug.enabled) return;

        var self = debug;

        // set `diff` timestamp
        var curr = +new Date();
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;

        // turn the `arguments` into a proper Array
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        args[0] = exports.coerce(args[0]);

        if ('string' !== typeof args[0]) {
          // anything else let's inspect with %O
          args.unshift('%O');
        }

        // apply any `formatters` transformations
        var index$$1 = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
          // if we encounter an escaped % then don't increase the array index
          if (match === '%%') return match;
          index$$1++;
          var formatter = exports.formatters[format];
          if ('function' === typeof formatter) {
            var val = args[index$$1];
            match = formatter.call(self, val);

            // now we need to remove `args[index]` since it's inlined in the `format`
            args.splice(index$$1, 1);
            index$$1--;
          }
          return match;
        });

        // apply env-specific formatting (colors, etc.)
        exports.formatArgs.call(self, args);

        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self, args);
      }

      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);

      // env-specific initialization logic for debug instances
      if ('function' === typeof exports.init) {
        exports.init(debug);
      }

      return debug;
    }

    /**
     * Enables a debug mode by namespaces. This can include modes
     * separated by a colon and wildcards.
     *
     * @param {String} namespaces
     * @api public
     */

    function enable(namespaces) {
      exports.save(namespaces);

      exports.names = [];
      exports.skips = [];

      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;

      for (var i = 0; i < len; i++) {
        if (!split[i]) continue; // ignore empty strings
        namespaces = split[i].replace(/\*/g, '.*?');
        if (namespaces[0] === '-') {
          exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
        } else {
          exports.names.push(new RegExp('^' + namespaces + '$'));
        }
      }
    }

    /**
     * Disable debug output.
     *
     * @api public
     */

    function disable() {
      exports.enable('');
    }

    /**
     * Returns true if the given mode name is enabled, false otherwise.
     *
     * @param {String} name
     * @return {Boolean}
     * @api public
     */

    function enabled(name) {
      var i, len;
      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Coerce `val`.
     *
     * @param {Mixed} val
     * @return {Mixed}
     * @api private
     */

    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
  });
  var debug_1 = debug.coerce;
  var debug_2 = debug.disable;
  var debug_3 = debug.enable;
  var debug_4 = debug.enabled;
  var debug_5 = debug.humanize;
  var debug_6 = debug.names;
  var debug_7 = debug.skips;
  var debug_8 = debug.formatters;

  var browser = createCommonjsModule(function (module, exports) {
    /**
     * This is the web browser implementation of `debug()`.
     *
     * Expose `debug()` as the module.
     */

    exports = module.exports = debug;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

    /**
     * Colors.
     */

    exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    function useColors() {
      // NB: In an Electron preload script, document will be defined but not fully
      // initialized. Since we know we're in Chrome, we'll just detect this case
      // explicitly
      if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
        return true;
      }

      // is webkit? http://stackoverflow.com/a/16459606/376773
      // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
      return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
      // double check webkit in userAgent just in case we are in a worker
      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }

    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

    exports.formatters.j = function (v) {
      try {
        return JSON.stringify(v);
      } catch (err) {
        return '[UnexpectedJSONParseError]: ' + err.message;
      }
    };

    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
      var useColors = this.useColors;

      args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

      if (!useColors) return;

      var c = 'color: ' + this.color;
      args.splice(1, 0, c, 'color: inherit');

      // the final "%c" is somewhat tricky, because there could be other
      // arguments passed either before or after the %c, so we need to
      // figure out the correct index to insert the CSS into
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function (match) {
        if ('%%' === match) return;
        index++;
        if ('%c' === match) {
          // we only are interested in the *last* %c
          // (the user may have provided their own)
          lastC = index;
        }
      });

      args.splice(lastC, 0, c);
    }

    /**
     * Invokes `console.log()` when available.
     * No-op when `console.log` is not a "function".
     *
     * @api public
     */

    function log() {
      // this hackery is required for IE8/9, where
      // the `console.log` function doesn't have 'apply'
      return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */

    function save(namespaces) {
      try {
        if (null == namespaces) {
          exports.storage.removeItem('debug');
        } else {
          exports.storage.debug = namespaces;
        }
      } catch (e) {}
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */

    function load() {
      var r;
      try {
        r = exports.storage.debug;
      } catch (e) {}

      // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
      if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
      }

      return r;
    }

    /**
     * Enable namespaces listed in `localStorage.debug` initially.
     */

    exports.enable(load());

    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
      try {
        return window.localStorage;
      } catch (e) {}
    }
  });
  var browser_1 = browser.log;
  var browser_2 = browser.formatArgs;
  var browser_3 = browser.save;
  var browser_4 = browser.load;
  var browser_5 = browser.useColors;
  var browser_6 = browser.storage;
  var browser_7 = browser.colors;

  // TODO: rename Connector

  var AbstractConnector = function () {
    function AbstractConnector(y, opts) {
      classCallCheck(this, AbstractConnector);

      this.y = y;
      this.opts = opts;
      if (opts.role == null || opts.role === 'master') {
        this.role = 'master';
      } else if (opts.role === 'slave') {
        this.role = 'slave';
      } else {
        throw new Error("Role must be either 'master' or 'slave'!");
      }
      this.log = browser('y:connector');
      this.logMessage = browser('y:connector-message');
      this._forwardAppliedStructs = opts.forwardAppliedOperations || false; // TODO: rename
      this.role = opts.role;
      this.connections = new Map();
      this.isSynced = false;
      this.userEventListeners = [];
      this.whenSyncedListeners = [];
      this.currentSyncTarget = null;
      this.debug = opts.debug === true;
      this.broadcastBuffer = new BinaryEncoder();
      this.broadcastBufferSize = 0;
      this.protocolVersion = 11;
      this.authInfo = opts.auth || null;
      this.checkAuth = opts.checkAuth || function () {
        return Promise.resolve('write');
      }; // default is everyone has write access
      if (opts.maxBufferLength == null) {
        this.maxBufferLength = -1;
      } else {
        this.maxBufferLength = opts.maxBufferLength;
      }
    }

    createClass(AbstractConnector, [{
      key: 'reconnect',
      value: function reconnect() {
        this.log('reconnecting..');
      }
    }, {
      key: 'disconnect',
      value: function disconnect() {
        this.log('discronnecting..');
        this.connections = new Map();
        this.isSynced = false;
        this.currentSyncTarget = null;
        this.whenSyncedListeners = [];
        return Promise.resolve();
      }
    }, {
      key: 'onUserEvent',
      value: function onUserEvent(f) {
        this.userEventListeners.push(f);
      }
    }, {
      key: 'removeUserEventListener',
      value: function removeUserEventListener(f) {
        this.userEventListeners = this.userEventListeners.filter(function (g) {
          return f !== g;
        });
      }
    }, {
      key: 'userLeft',
      value: function userLeft(user) {
        if (this.connections.has(user)) {
          this.log('%s: User left %s', this.y.userID, user);
          this.connections.delete(user);
          // check if isSynced event can be sent now
          this._setSyncedWith(null);
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = this.userEventListeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var f = _step.value;

              f({
                action: 'userLeft',
                user: user
              });
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }
    }, {
      key: 'userJoined',
      value: function userJoined(user, role, auth) {
        if (role == null) {
          throw new Error('You must specify the role of the joined user!');
        }
        if (this.connections.has(user)) {
          throw new Error('This user already joined!');
        }
        this.log('%s: User joined %s', this.y.userID, user);
        this.connections.set(user, {
          uid: user,
          isSynced: false,
          role: role,
          processAfterAuth: [],
          processAfterSync: [],
          auth: auth || null,
          receivedSyncStep2: false
        });
        var defer = {};
        defer.promise = new Promise(function (resolve) {
          defer.resolve = resolve;
        });
        this.connections.get(user).syncStep2 = defer;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.userEventListeners[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var f = _step2.value;

            f({
              action: 'userJoined',
              user: user,
              role: role
            });
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        this._syncWithUser(user);
      }

      // Execute a function _when_ we are connected.
      // If not connected, wait until connected

    }, {
      key: 'whenSynced',
      value: function whenSynced(f) {
        if (this.isSynced) {
          f();
        } else {
          this.whenSyncedListeners.push(f);
        }
      }
    }, {
      key: '_syncWithUser',
      value: function _syncWithUser(userID) {
        if (this.role === 'slave') {
          return; // "The current sync has not finished or this is controlled by a master!"
        }
        sendSyncStep1(this, userID);
      }
    }, {
      key: '_fireIsSyncedListeners',
      value: function _fireIsSyncedListeners() {
        if (!this.isSynced) {
          this.isSynced = true;
          // It is safer to remove this!
          // call whensynced listeners
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = this.whenSyncedListeners[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var f = _step3.value;

              f();
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          this.whenSyncedListeners = [];
          this.y._setContentReady();
          this.y.emit('synced');
        }
      }
    }, {
      key: 'send',
      value: function send(uid, buffer) {
        var y = this.y;
        if (!(buffer instanceof ArrayBuffer || buffer instanceof Uint8Array)) {
          throw new Error('Expected Message to be an ArrayBuffer or Uint8Array - don\'t use this method to send custom messages');
        }
        this.log('User%s to User%s: Send \'%y\'', y.userID, uid, buffer);
        this.logMessage('User%s to User%s: Send %Y', y.userID, uid, [y, buffer]);
      }
    }, {
      key: 'broadcast',
      value: function broadcast(buffer) {
        var y = this.y;
        if (!(buffer instanceof ArrayBuffer || buffer instanceof Uint8Array)) {
          throw new Error('Expected Message to be an ArrayBuffer or Uint8Array - don\'t use this method to send custom messages');
        }
        this.log('User%s: Broadcast \'%y\'', y.userID, buffer);
        this.logMessage('User%s: Broadcast: %Y', y.userID, [y, buffer]);
      }

      /*
        Buffer operations, and broadcast them when ready.
      */

    }, {
      key: 'broadcastStruct',
      value: function broadcastStruct(struct) {
        var _this = this;

        var firstContent = this.broadcastBuffer.length === 0;
        if (firstContent) {
          this.broadcastBuffer.writeVarString(this.y.room);
          this.broadcastBuffer.writeVarString('update');
          this.broadcastBufferSize = 0;
          this.broadcastBufferSizePos = this.broadcastBuffer.pos;
          this.broadcastBuffer.writeUint32(0);
        }
        this.broadcastBufferSize++;
        struct._toBinary(this.broadcastBuffer);
        if (this.maxBufferLength > 0 && this.broadcastBuffer.length > this.maxBufferLength) {
          // it is necessary to send the buffer now
          // cache the buffer and check if server is responsive
          var buffer = this.broadcastBuffer;
          buffer.setUint32(this.broadcastBufferSizePos, this.broadcastBufferSize);
          this.broadcastBuffer = new BinaryEncoder();
          this.whenRemoteResponsive().then(function () {
            _this.broadcast(buffer.createBuffer());
          });
        } else if (firstContent) {
          // send the buffer when all transactions are finished
          // (or buffer exceeds maxBufferLength)
          setTimeout(function () {
            if (_this.broadcastBuffer.length > 0) {
              var _buffer = _this.broadcastBuffer;
              _buffer.setUint32(_this.broadcastBufferSizePos, _this.broadcastBufferSize);
              _this.broadcast(_buffer.createBuffer());
              _this.broadcastBuffer = new BinaryEncoder();
            }
          }, 0);
        }
      }

      /*
       * Somehow check the responsiveness of the remote clients/server
       * Default behavior:
       *   Wait 100ms before broadcasting the next batch of operations
       *
       * Only used when maxBufferLength is set
       *
       */

    }, {
      key: 'whenRemoteResponsive',
      value: function whenRemoteResponsive() {
        return new Promise(function (resolve) {
          setTimeout(resolve, 100);
        });
      }

      /*
        You received a raw message, and you know that it is intended for Yjs. Then call this function.
      */

    }, {
      key: 'receiveMessage',
      value: function receiveMessage(sender, buffer, skipAuth) {
        var _this2 = this;

        var y = this.y;
        var userID = y.userID;
        skipAuth = skipAuth || false;
        if (!(buffer instanceof ArrayBuffer || buffer instanceof Uint8Array)) {
          return Promise.reject(new Error('Expected Message to be an ArrayBuffer or Uint8Array!'));
        }
        if (sender === userID) {
          return Promise.resolve();
        }
        var decoder = new BinaryDecoder(buffer);
        var encoder = new BinaryEncoder();
        var roomname = decoder.readVarString(); // read room name
        encoder.writeVarString(roomname);
        var messageType = decoder.readVarString();
        var senderConn = this.connections.get(sender);
        this.log('User%s from User%s: Receive \'%s\'', userID, sender, messageType);
        this.logMessage('User%s from User%s: Receive %Y', userID, sender, [y, buffer]);
        if (senderConn == null && !skipAuth) {
          throw new Error('Received message from unknown peer!');
        }
        if (messageType === 'sync step 1' || messageType === 'sync step 2') {
          var auth = decoder.readVarUint();
          if (senderConn.auth == null) {
            senderConn.processAfterAuth.push([messageType, senderConn, decoder, encoder, sender]);
            // check auth
            return this.checkAuth(auth, y, sender).then(function (authPermissions) {
              if (senderConn.auth == null) {
                senderConn.auth = authPermissions;
                y.emit('userAuthenticated', {
                  user: senderConn.uid,
                  auth: authPermissions
                });
              }
              var messages = senderConn.processAfterAuth;
              senderConn.processAfterAuth = [];

              messages.forEach(function (m) {
                return _this2.computeMessage(m[0], m[1], m[2], m[3], m[4]);
              });
            });
          }
        }
        if ((skipAuth || senderConn.auth != null) && (messageType !== 'update' || senderConn.isSynced)) {
          this.computeMessage(messageType, senderConn, decoder, encoder, sender, skipAuth);
        } else {
          senderConn.processAfterSync.push([messageType, senderConn, decoder, encoder, sender, false]);
        }
      }
    }, {
      key: 'computeMessage',
      value: function computeMessage(messageType, senderConn, decoder, encoder, sender, skipAuth) {
        if (messageType === 'sync step 1' && (senderConn.auth === 'write' || senderConn.auth === 'read')) {
          // cannot wait for sync step 1 to finish, because we may wait for sync step 2 in sync step 1 (->lock)
          readSyncStep1(decoder, encoder, this.y, senderConn, sender);
        } else {
          var y = this.y;
          y.transact(function () {
            if (messageType === 'sync step 2' && senderConn.auth === 'write') {
              readSyncStep2(decoder, encoder, y, senderConn, sender);
            } else if (messageType === 'update' && (skipAuth || senderConn.auth === 'write')) {
              integrateRemoteStructs(y, decoder);
            } else {
              throw new Error('Unable to receive message');
            }
          }, true);
        }
      }
    }, {
      key: '_setSyncedWith',
      value: function _setSyncedWith(user) {
        var _this3 = this;

        if (user != null) {
          var userConn = this.connections.get(user);
          userConn.isSynced = true;
          var messages = userConn.processAfterSync;
          userConn.processAfterSync = [];
          messages.forEach(function (m) {
            _this3.computeMessage(m[0], m[1], m[2], m[3], m[4]);
          });
        }
        var conns = Array.from(this.connections.values());
        if (conns.length > 0 && conns.every(function (u) {
          return u.isSynced;
        })) {
          this._fireIsSyncedListeners();
        }
      }
    }]);
    return AbstractConnector;
  }();

  /**
   * Read the Decoder and fill the Yjs instance with data in the decoder.
   *
   * @param {Y} y The Yjs instance
   * @param {BinaryDecoder} decoder The BinaryDecoder to read from.
   */
  function fromBinary(y, decoder) {
    y.transact(function () {
      integrateRemoteStructs(y, decoder);
      readDeleteSet(y, decoder);
    });
  }

  /**
   * Encode the Yjs model to binary format.
   *
   * @param {Y} y The Yjs instance
   * @return {BinaryEncoder} The encoder instance that can be transformed
   *                         to ArrayBuffer or Buffer.
   */
  function toBinary(y) {
    var encoder = new BinaryEncoder();
    writeStructs(y, encoder, new Map());
    writeDeleteSet(y, encoder);
    return encoder;
  }

  function getFreshCnf() {
    var buffer = new BinaryEncoder();
    buffer.writeUint32(0);
    return {
      len: 0,
      buffer: buffer
    };
  }

  /**
   * Abstract persistence class.
   */

  var AbstractPersistence = function () {
    function AbstractPersistence(opts) {
      classCallCheck(this, AbstractPersistence);

      this.opts = opts;
      this.ys = new Map();
    }

    createClass(AbstractPersistence, [{
      key: '_init',
      value: function _init(y) {
        var _this = this;

        var cnf = this.ys.get(y);
        if (cnf === undefined) {
          cnf = getFreshCnf();
          cnf.mutualExclude = createMutualExclude();
          this.ys.set(y, cnf);
          return this.init(y).then(function () {
            y.on('afterTransaction', function (y, transaction) {
              var cnf = _this.ys.get(y);
              if (cnf.len > 0) {
                cnf.buffer.setUint32(0, cnf.len);
                _this.saveUpdate(y, cnf.buffer.createBuffer(), transaction);
                var _cnf = getFreshCnf();
                for (var key in _cnf) {
                  cnf[key] = _cnf[key];
                }
              }
            });
            return _this.retrieve(y);
          }).then(function () {
            return Promise.resolve(cnf);
          });
        } else {
          return Promise.resolve(cnf);
        }
      }
    }, {
      key: 'deinit',
      value: function deinit(y) {
        this.ys.delete(y);
        y.persistence = null;
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this.ys = null;
      }

      /**
       * Remove all persisted data that belongs to a room.
       * Automatically destroys all Yjs all Yjs instances that persist to
       * the room. If `destroyYjsInstances = false` the persistence functionality
       * will be removed from the Yjs instances.
       *
       * ** Must be overwritten! **
       */

    }, {
      key: 'removePersistedData',
      value: function removePersistedData(room) {
        var _this2 = this;

        var destroyYjsInstances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        this.ys.forEach(function (cnf, y) {
          if (y.room === room) {
            if (destroyYjsInstances) {
              y.destroy();
            } else {
              _this2.deinit(y);
            }
          }
        });
      }

      /* overwrite */

    }, {
      key: 'saveUpdate',
      value: function saveUpdate(buffer) {}

      /**
       * Save struct to update buffer.
       * saveUpdate is called when transaction ends
       */

    }, {
      key: 'saveStruct',
      value: function saveStruct(y, struct) {
        var cnf = this.ys.get(y);
        if (cnf !== undefined) {
          cnf.mutualExclude(function () {
            struct._toBinary(cnf.buffer);
            cnf.len++;
          });
        }
      }

      /* overwrite */

    }, {
      key: 'retrieve',
      value: function retrieve(y, model, updates) {
        var cnf = this.ys.get(y);
        if (cnf !== undefined) {
          cnf.mutualExclude(function () {
            y.transact(function () {
              if (model != null) {
                fromBinary(y, new BinaryDecoder(new Uint8Array(model)));
              }
              if (updates != null) {
                for (var i = 0; i < updates.length; i++) {
                  integrateRemoteStructs(y, new BinaryDecoder(new Uint8Array(updates[i])));
                }
              }
            });
            y.emit('persistenceReady');
          });
        }
      }

      /* overwrite */

    }, {
      key: 'persist',
      value: function persist(y) {
        return toBinary(y).createBuffer();
      }
    }]);
    return AbstractPersistence;
  }();

  function typeObserver$1() {
    var _this = this;

    this._mutualExclude(function () {
      var textarea = _this.target;
      var textType = _this.type;
      var relativeStart = getRelativePosition(textType, textarea.selectionStart);
      var relativeEnd = getRelativePosition(textType, textarea.selectionEnd);
      textarea.value = textType.toString();
      var start = fromRelativePosition(textType._y, relativeStart);
      var end = fromRelativePosition(textType._y, relativeEnd);
      textarea.setSelectionRange(start, end);
    });
  }

  function domObserver$1() {
    var _this2 = this;

    this._mutualExclude(function () {
      var diff = simpleDiff(_this2.type.toString(), _this2.target.value);
      _this2.type.delete(diff.pos, diff.remove);
      _this2.type.insert(diff.pos, diff.insert);
    });
  }

  /**
   * A binding that binds a YText to a dom textarea.
   *
   * This binding is automatically destroyed when its parent is deleted.
   *
   * @example
   *   const textare = document.createElement('textarea')
   *   const type = y.define('textarea', Y.Text)
   *   const binding = new Y.QuillBinding(type, textarea)
   *
   */

  var TextareaBinding = function (_Binding) {
    inherits(TextareaBinding, _Binding);

    function TextareaBinding(textType, domTextarea) {
      classCallCheck(this, TextareaBinding);

      // set initial value
      var _this3 = possibleConstructorReturn(this, (TextareaBinding.__proto__ || Object.getPrototypeOf(TextareaBinding)).call(this, textType, domTextarea));
      // Binding handles textType as this.type and domTextarea as this.target


      domTextarea.value = textType.toString();
      // Observers are handled by this class
      _this3._typeObserver = typeObserver$1.bind(_this3);
      _this3._domObserver = domObserver$1.bind(_this3);
      textType.observe(_this3._typeObserver);
      domTextarea.addEventListener('input', _this3._domObserver);
      return _this3;
    }

    createClass(TextareaBinding, [{
      key: 'destroy',
      value: function destroy() {
        // Remove everything that is handled by this class
        this.type.unobserve(this._typeObserver);
        this.target.unobserve(this._domObserver);
        get(TextareaBinding.prototype.__proto__ || Object.getPrototypeOf(TextareaBinding.prototype), 'destroy', this).call(this);
      }
    }]);
    return TextareaBinding;
  }(Binding);

  function typeObserver$2(event) {
    var quill = this.target;
    // Force flush Quill changes.
    quill.update('yjs');
    this._mutualExclude(function () {
      // Apply computed delta.
      quill.updateContents(event.delta, 'yjs');
      // Force flush Quill changes. Ignore applied changes.
      quill.update('yjs');
    });
  }

  function quillObserver(delta) {
    var _this = this;

    this._mutualExclude(function () {
      _this.type.applyDelta(delta.ops);
    });
  }

  /**
   * A Binding that binds a YText type to a Quill editor.
   *
   * @example
   * const quill = new Quill(document.createElement('div'))
   * const type = y.define('quill', Y.Text)
   * const binding = new Y.QuillBinding(quill, type)
   * // Now modifications on the DOM will be reflected in the Type, and the other
   * // way around!
   */

  var QuillBinding = function (_Binding) {
    inherits(QuillBinding, _Binding);

    /**
     * @param {YText} textType
     * @param {Quill} quill
     */
    function QuillBinding(textType, quill) {
      classCallCheck(this, QuillBinding);

      // Set initial value.
      var _this2 = possibleConstructorReturn(this, (QuillBinding.__proto__ || Object.getPrototypeOf(QuillBinding)).call(this, textType, quill));
      // Binding handles textType as this.type and quill as this.target.


      quill.setContents(textType.toDelta(), 'yjs');
      // Observers are handled by this class.
      _this2._typeObserver = typeObserver$2.bind(_this2);
      _this2._quillObserver = quillObserver.bind(_this2);
      textType.observe(_this2._typeObserver);
      quill.on('text-change', _this2._quillObserver);
      return _this2;
    }

    createClass(QuillBinding, [{
      key: 'destroy',
      value: function destroy() {
        // Remove everything that is handled by this class.
        this.type.unobserve(this._typeObserver);
        this.target.off('text-change', this._quillObserver);
        get(QuillBinding.prototype.__proto__ || Object.getPrototypeOf(QuillBinding.prototype), 'destroy', this).call(this);
      }
    }]);
    return QuillBinding;
  }(Binding);

  function typeObserver$3(event) {
    var _this = this;

    this._mutualExclude(function () {
      var codeMirror = _this.target;
      var deltas = event.delta;
      var index = 0;
      var from = codeMirror.posFromIndex(index);
      for (var i = 0; i < deltas.length; i++) {
        var delta = deltas[i];
        if (delta.retain) {
          index = delta.retain;
          from = codeMirror.posFromIndex(index);
        } else if (delta.insert) {
          codeMirror.replaceRange(delta.insert, from, from);
        } else if (delta.delete) {
          codeMirror.replaceRange('', from, codeMirror.posFromIndex(index + delta.delete));
        }
      }
    });
  }

  function codeMirrorObserver(codeMirror, deltas) {
    var _this2 = this;

    this._mutualExclude(function () {
      for (var i = 0; i < deltas.length; i++) {
        var delta = deltas[i];
        var start = codeMirror.indexFromPos(delta.from);
        // apply the delete operation first
        if (delta.removed.length > 0) {
          var delLength = 0;
          for (var j = 0; j < delta.removed.length; j++) {
            delLength += delta.removed[j].length;
          }
          // "enter" is also a character in our case
          delLength += delta.removed.length - 1;
          _this2.type.delete(start, delLength);
        }
        // apply insert operation
        _this2.type.insert(start, delta.text.join('\n'));
      }
    });
  }

  /**
   * A binding that binds a YText to a codemirror.
   *
   * This binding is automatically destroyed when its parent is deleted.
   *
   */

  var CodeMirrorBinding = function (_Binding) {
    inherits(CodeMirrorBinding, _Binding);

    function CodeMirrorBinding(textType, codeMirror) {
      classCallCheck(this, CodeMirrorBinding);

      // set initial value
      var _this3 = possibleConstructorReturn(this, (CodeMirrorBinding.__proto__ || Object.getPrototypeOf(CodeMirrorBinding)).call(this, textType, codeMirror));

      codeMirror.setValue(textType.toString());
      // Observers are handled by this class
      _this3._typeObserver = typeObserver$3.bind(_this3);
      _this3._codeMirrorObserver = codeMirrorObserver.bind(_this3);
      textType.observe(_this3._typeObserver);
      codeMirror.on('changes', _this3._codeMirrorObserver);
      return _this3;
    }

    createClass(CodeMirrorBinding, [{
      key: 'destroy',
      value: function destroy() {
        // Remove everything that is handled by this class
        this.type.unobserve(this._typeObserver);
        this.target.unobserve(this._codeMirrorObserver);
        get(CodeMirrorBinding.prototype.__proto__ || Object.getPrototypeOf(CodeMirrorBinding.prototype), 'destroy', this).call(this);
      }
    }]);
    return CodeMirrorBinding;
  }(Binding);

  // TODO: The following assignments should be moved to yjs-dist
  Y.AbstractConnector = AbstractConnector;
  Y.AbstractPersistence = AbstractPersistence;
  Y.Array = YArray;
  Y.Map = YMap;
  Y.Text = YText;
  Y.XmlElement = YXmlElement;
  Y.XmlFragment = YXmlFragment;
  Y.XmlText = YXmlText;
  Y.XmlHook = YXmlHook;

  Y.TextareaBinding = TextareaBinding;
  Y.QuillBinding = QuillBinding;
  Y.DomBinding = DomBinding;
  Y.CodeMirrorBinding = CodeMirrorBinding;

  DomBinding.domToType = domToType;
  DomBinding.domsToTypes = domsToTypes;
  DomBinding.switchAssociation = switchAssociation;

  Y.utils = {
    BinaryDecoder: BinaryDecoder,
    UndoManager: UndoManager,
    getRelativePosition: getRelativePosition,
    fromRelativePosition: fromRelativePosition,
    registerStruct: registerStruct,
    integrateRemoteStructs: integrateRemoteStructs,
    toBinary: toBinary,
    fromBinary: fromBinary
  };

  Y.debug = browser;
  browser.formatters.Y = messageToString;
  browser.formatters.y = messageToRoomname;

  return Y;

})));


}).call(this,require('_process'),require("buffer").Buffer)

},{"_process":4,"buffer":2}],7:[function(require,module,exports){
(function (process,Buffer){

/**
 * yjs - A framework for real-time p2p shared editing on any data
 * @version v13.0.0-62
 * @license MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.Y = factory());
}(this, (function () { 'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  function rotate(tree, parent, newParent, n) {
    if (parent === null) {
      tree.root = newParent;
      newParent._parent = null;
    } else if (parent.left === n) {
      parent.left = newParent;
    } else if (parent.right === n) {
      parent.right = newParent;
    } else {
      throw new Error('The elements are wrongly connected!');
    }
  }

  var N = function () {
    // A created node is always red!
    function N(val) {
      classCallCheck(this, N);

      this.val = val;
      this.color = true;
      this._left = null;
      this._right = null;
      this._parent = null;
    }

    createClass(N, [{
      key: 'isRed',
      value: function isRed() {
        return this.color;
      }
    }, {
      key: 'isBlack',
      value: function isBlack() {
        return !this.color;
      }
    }, {
      key: 'redden',
      value: function redden() {
        this.color = true;return this;
      }
    }, {
      key: 'blacken',
      value: function blacken() {
        this.color = false;return this;
      }
    }, {
      key: 'rotateLeft',
      value: function rotateLeft(tree) {
        var parent = this.parent;
        var newParent = this.right;
        var newRight = this.right.left;
        newParent.left = this;
        this.right = newRight;
        rotate(tree, parent, newParent, this);
      }
    }, {
      key: 'next',
      value: function next() {
        if (this.right !== null) {
          // search the most left node in the right tree
          var o = this.right;
          while (o.left !== null) {
            o = o.left;
          }
          return o;
        } else {
          var p = this;
          while (p.parent !== null && p !== p.parent.left) {
            p = p.parent;
          }
          return p.parent;
        }
      }
    }, {
      key: 'prev',
      value: function prev() {
        if (this.left !== null) {
          // search the most right node in the left tree
          var o = this.left;
          while (o.right !== null) {
            o = o.right;
          }
          return o;
        } else {
          var p = this;
          while (p.parent !== null && p !== p.parent.right) {
            p = p.parent;
          }
          return p.parent;
        }
      }
    }, {
      key: 'rotateRight',
      value: function rotateRight(tree) {
        var parent = this.parent;
        var newParent = this.left;
        var newLeft = this.left.right;
        newParent.right = this;
        this.left = newLeft;
        rotate(tree, parent, newParent, this);
      }
    }, {
      key: 'getUncle',
      value: function getUncle() {
        // we can assume that grandparent exists when this is called!
        if (this.parent === this.parent.parent.left) {
          return this.parent.parent.right;
        } else {
          return this.parent.parent.left;
        }
      }
    }, {
      key: 'grandparent',
      get: function get$$1() {
        return this.parent.parent;
      }
    }, {
      key: 'parent',
      get: function get$$1() {
        return this._parent;
      }
    }, {
      key: 'sibling',
      get: function get$$1() {
        return this === this.parent.left ? this.parent.right : this.parent.left;
      }
    }, {
      key: 'left',
      get: function get$$1() {
        return this._left;
      },
      set: function set$$1(n) {
        if (n !== null) {
          n._parent = this;
        }
        this._left = n;
      }
    }, {
      key: 'right',
      get: function get$$1() {
        return this._right;
      },
      set: function set$$1(n) {
        if (n !== null) {
          n._parent = this;
        }
        this._right = n;
      }
    }]);
    return N;
  }();

  /*
   * This is a Red Black Tree implementation
   */


  var Tree = function () {
    function Tree() {
      classCallCheck(this, Tree);

      this.root = null;
      this.length = 0;
    }

    createClass(Tree, [{
      key: 'findNext',
      value: function findNext(id) {
        var nextID = id.clone();
        nextID.clock += 1;
        return this.findWithLowerBound(nextID);
      }
    }, {
      key: 'findPrev',
      value: function findPrev(id) {
        var prevID = id.clone();
        prevID.clock -= 1;
        return this.findWithUpperBound(prevID);
      }
    }, {
      key: 'findNodeWithLowerBound',
      value: function findNodeWithLowerBound(from) {
        var o = this.root;
        if (o === null) {
          return null;
        } else {
          while (true) {
            if (from === null || from.lessThan(o.val._id) && o.left !== null) {
              // o is included in the bound
              // try to find an element that is closer to the bound
              o = o.left;
            } else if (from !== null && o.val._id.lessThan(from)) {
              // o is not within the bound, maybe one of the right elements is..
              if (o.right !== null) {
                o = o.right;
              } else {
                // there is no right element. Search for the next bigger element,
                // this should be within the bounds
                return o.next();
              }
            } else {
              return o;
            }
          }
        }
      }
    }, {
      key: 'findNodeWithUpperBound',
      value: function findNodeWithUpperBound(to) {
        if (to === void 0) {
          throw new Error('You must define from!');
        }
        var o = this.root;
        if (o === null) {
          return null;
        } else {
          while (true) {
            if ((to === null || o.val._id.lessThan(to)) && o.right !== null) {
              // o is included in the bound
              // try to find an element that is closer to the bound
              o = o.right;
            } else if (to !== null && to.lessThan(o.val._id)) {
              // o is not within the bound, maybe one of the left elements is..
              if (o.left !== null) {
                o = o.left;
              } else {
                // there is no left element. Search for the prev smaller element,
                // this should be within the bounds
                return o.prev();
              }
            } else {
              return o;
            }
          }
        }
      }
    }, {
      key: 'findSmallestNode',
      value: function findSmallestNode() {
        var o = this.root;
        while (o != null && o.left != null) {
          o = o.left;
        }
        return o;
      }
    }, {
      key: 'findWithLowerBound',
      value: function findWithLowerBound(from) {
        var n = this.findNodeWithLowerBound(from);
        return n == null ? null : n.val;
      }
    }, {
      key: 'findWithUpperBound',
      value: function findWithUpperBound(to) {
        var n = this.findNodeWithUpperBound(to);
        return n == null ? null : n.val;
      }
    }, {
      key: 'iterate',
      value: function iterate(from, to, f) {
        var o;
        if (from === null) {
          o = this.findSmallestNode();
        } else {
          o = this.findNodeWithLowerBound(from);
        }
        while (o !== null && (to === null || // eslint-disable-line no-unmodified-loop-condition
        o.val._id.lessThan(to) || o.val._id.equals(to))) {
          f(o.val);
          o = o.next();
        }
      }
    }, {
      key: 'find',
      value: function find(id) {
        var n = this.findNode(id);
        if (n !== null) {
          return n.val;
        } else {
          return null;
        }
      }
    }, {
      key: 'findNode',
      value: function findNode(id) {
        var o = this.root;
        if (o === null) {
          return null;
        } else {
          while (true) {
            if (o === null) {
              return null;
            }
            if (id.lessThan(o.val._id)) {
              o = o.left;
            } else if (o.val._id.lessThan(id)) {
              o = o.right;
            } else {
              return o;
            }
          }
        }
      }
    }, {
      key: 'delete',
      value: function _delete(id) {
        var d = this.findNode(id);
        if (d == null) {
          // throw new Error('Element does not exist!')
          return;
        }
        this.length--;
        if (d.left !== null && d.right !== null) {
          // switch d with the greates element in the left subtree.
          // o should have at most one child.
          var o = d.left;
          // find
          while (o.right !== null) {
            o = o.right;
          }
          // switch
          d.val = o.val;
          d = o;
        }
        // d has at most one child
        // let n be the node that replaces d
        var isFakeChild;
        var child = d.left || d.right;
        if (child === null) {
          isFakeChild = true;
          child = new N(null);
          child.blacken();
          d.right = child;
        } else {
          isFakeChild = false;
        }

        if (d.parent === null) {
          if (!isFakeChild) {
            this.root = child;
            child.blacken();
            child._parent = null;
          } else {
            this.root = null;
          }
          return;
        } else if (d.parent.left === d) {
          d.parent.left = child;
        } else if (d.parent.right === d) {
          d.parent.right = child;
        } else {
          throw new Error('Impossible!');
        }
        if (d.isBlack()) {
          if (child.isRed()) {
            child.blacken();
          } else {
            this._fixDelete(child);
          }
        }
        this.root.blacken();
        if (isFakeChild) {
          if (child.parent.left === child) {
            child.parent.left = null;
          } else if (child.parent.right === child) {
            child.parent.right = null;
          } else {
            throw new Error('Impossible #3');
          }
        }
      }
    }, {
      key: '_fixDelete',
      value: function _fixDelete(n) {
        function isBlack(node) {
          return node !== null ? node.isBlack() : true;
        }
        function isRed(node) {
          return node !== null ? node.isRed() : false;
        }
        if (n.parent === null) {
          // this can only be called after the first iteration of fixDelete.
          return;
        }
        // d was already replaced by the child
        // d is not the root
        // d and child are black
        var sibling = n.sibling;
        if (isRed(sibling)) {
          // make sibling the grandfather
          n.parent.redden();
          sibling.blacken();
          if (n === n.parent.left) {
            n.parent.rotateLeft(this);
          } else if (n === n.parent.right) {
            n.parent.rotateRight(this);
          } else {
            throw new Error('Impossible #2');
          }
          sibling = n.sibling;
        }
        // parent, sibling, and children of n are black
        if (n.parent.isBlack() && sibling.isBlack() && isBlack(sibling.left) && isBlack(sibling.right)) {
          sibling.redden();
          this._fixDelete(n.parent);
        } else if (n.parent.isRed() && sibling.isBlack() && isBlack(sibling.left) && isBlack(sibling.right)) {
          sibling.redden();
          n.parent.blacken();
        } else {
          if (n === n.parent.left && sibling.isBlack() && isRed(sibling.left) && isBlack(sibling.right)) {
            sibling.redden();
            sibling.left.blacken();
            sibling.rotateRight(this);
            sibling = n.sibling;
          } else if (n === n.parent.right && sibling.isBlack() && isRed(sibling.right) && isBlack(sibling.left)) {
            sibling.redden();
            sibling.right.blacken();
            sibling.rotateLeft(this);
            sibling = n.sibling;
          }
          sibling.color = n.parent.color;
          n.parent.blacken();
          if (n === n.parent.left) {
            sibling.right.blacken();
            n.parent.rotateLeft(this);
          } else {
            sibling.left.blacken();
            n.parent.rotateRight(this);
          }
        }
      }
    }, {
      key: 'put',
      value: function put(v) {
        var node = new N(v);
        if (this.root !== null) {
          var p = this.root; // p abbrev. parent
          while (true) {
            if (node.val._id.lessThan(p.val._id)) {
              if (p.left === null) {
                p.left = node;
                break;
              } else {
                p = p.left;
              }
            } else if (p.val._id.lessThan(node.val._id)) {
              if (p.right === null) {
                p.right = node;
                break;
              } else {
                p = p.right;
              }
            } else {
              p.val = node.val;
              return p;
            }
          }
          this._fixInsert(node);
        } else {
          this.root = node;
        }
        this.length++;
        this.root.blacken();
        return node;
      }
    }, {
      key: '_fixInsert',
      value: function _fixInsert(n) {
        if (n.parent === null) {
          n.blacken();
          return;
        } else if (n.parent.isBlack()) {
          return;
        }
        var uncle = n.getUncle();
        if (uncle !== null && uncle.isRed()) {
          // Note: parent: red, uncle: red
          n.parent.blacken();
          uncle.blacken();
          n.grandparent.redden();
          this._fixInsert(n.grandparent);
        } else {
          // Note: parent: red, uncle: black or null
          // Now we transform the tree in such a way that
          // either of these holds:
          //   1) grandparent.left.isRed
          //     and grandparent.left.left.isRed
          //   2) grandparent.right.isRed
          //     and grandparent.right.right.isRed
          if (n === n.parent.right && n.parent === n.grandparent.left) {
            n.parent.rotateLeft(this);
            // Since we rotated and want to use the previous
            // cases, we need to set n in such a way that
            // n.parent.isRed again
            n = n.left;
          } else if (n === n.parent.left && n.parent === n.grandparent.right) {
            n.parent.rotateRight(this);
            // see above
            n = n.right;
          }
          // Case 1) or 2) hold from here on.
          // Now traverse grandparent, make parent a black node
          // on the highest level which holds two red nodes.
          n.parent.blacken();
          n.grandparent.redden();
          if (n === n.parent.left) {
            // Case 1
            n.grandparent.rotateRight(this);
          } else {
            // Case 2
            n.grandparent.rotateLeft(this);
          }
        }
      }
    }]);
    return Tree;
  }();

  var ID = function () {
    function ID(user, clock) {
      classCallCheck(this, ID);

      this.user = user; // TODO: rename to client
      this.clock = clock;
    }

    createClass(ID, [{
      key: "clone",
      value: function clone() {
        return new ID(this.user, this.clock);
      }
    }, {
      key: "equals",
      value: function equals(id) {
        return id !== null && id.user === this.user && id.clock === this.clock;
      }
    }, {
      key: "lessThan",
      value: function lessThan(id) {
        if (id.constructor === ID) {
          return this.user < id.user || this.user === id.user && this.clock < id.clock;
        } else {
          return false;
        }
      }
    }]);
    return ID;
  }();

  var DSNode = function () {
    function DSNode(id, len, gc) {
      classCallCheck(this, DSNode);

      this._id = id;
      this.len = len;
      this.gc = gc;
    }

    createClass(DSNode, [{
      key: 'clone',
      value: function clone() {
        return new DSNode(this._id, this.len, this.gc);
      }
    }]);
    return DSNode;
  }();

  var DeleteStore = function (_Tree) {
    inherits(DeleteStore, _Tree);

    function DeleteStore() {
      classCallCheck(this, DeleteStore);
      return possibleConstructorReturn(this, (DeleteStore.__proto__ || Object.getPrototypeOf(DeleteStore)).apply(this, arguments));
    }

    createClass(DeleteStore, [{
      key: 'logTable',
      value: function logTable() {
        var deletes = [];
        this.iterate(null, null, function (n) {
          deletes.push({
            user: n._id.user,
            clock: n._id.clock,
            len: n.len,
            gc: n.gc
          });
        });
        console.table(deletes);
      }
    }, {
      key: 'isDeleted',
      value: function isDeleted(id) {
        var n = this.findWithUpperBound(id);
        return n !== null && n._id.user === id.user && id.clock < n._id.clock + n.len;
      }
    }, {
      key: 'mark',
      value: function mark(id, length, gc) {
        if (length === 0) return;
        // Step 1. Unmark range
        var leftD = this.findWithUpperBound(new ID(id.user, id.clock - 1));
        // Resize left DSNode if necessary
        if (leftD !== null && leftD._id.user === id.user) {
          if (leftD._id.clock < id.clock && id.clock < leftD._id.clock + leftD.len) {
            // node is overlapping. need to resize
            if (id.clock + length < leftD._id.clock + leftD.len) {
              // overlaps new mark range and some more
              // create another DSNode to the right of new mark
              this.put(new DSNode(new ID(id.user, id.clock + length), leftD._id.clock + leftD.len - id.clock - length, leftD.gc));
            }
            // resize left DSNode
            leftD.len = id.clock - leftD._id.clock;
          } // Otherwise there is no overlapping
        }
        // Resize right DSNode if necessary
        var upper = new ID(id.user, id.clock + length - 1);
        var rightD = this.findWithUpperBound(upper);
        if (rightD !== null && rightD._id.user === id.user) {
          if (rightD._id.clock < id.clock + length && id.clock <= rightD._id.clock && id.clock + length < rightD._id.clock + rightD.len) {
            // we only consider the case where we resize the node
            var d = id.clock + length - rightD._id.clock;
            rightD._id = new ID(rightD._id.user, rightD._id.clock + d);
            rightD.len -= d;
          }
        }
        // Now we only have to delete all inner marks
        var deleteNodeIds = [];
        this.iterate(id, upper, function (m) {
          deleteNodeIds.push(m._id);
        });
        for (var i = deleteNodeIds.length - 1; i >= 0; i--) {
          this.delete(deleteNodeIds[i]);
        }
        var newMark = new DSNode(id, length, gc);
        // Step 2. Check if we can extend left or right
        if (leftD !== null && leftD._id.user === id.user && leftD._id.clock + leftD.len === id.clock && leftD.gc === gc) {
          // We can extend left
          leftD.len += length;
          newMark = leftD;
        }
        var rightNext = this.find(new ID(id.user, id.clock + length));
        if (rightNext !== null && rightNext._id.user === id.user && id.clock + length === rightNext._id.clock && gc === rightNext.gc) {
          // We can merge newMark and rightNext
          newMark.len += rightNext.len;
          this.delete(rightNext._id);
        }
        if (leftD !== newMark) {
          // only put if we didn't extend left
          this.put(newMark);
        }
      }
      // TODO: exchange markDeleted for mark()

    }, {
      key: 'markDeleted',
      value: function markDeleted(id, length) {
        this.mark(id, length, false);
      }
    }]);
    return DeleteStore;
  }(Tree);

  /**
   * A BinaryDecoder handles the decoding of an ArrayBuffer.
   */

  var BinaryDecoder = function () {
    /**
     * @param {Uint8Array|Buffer} buffer The binary data that this instance
     *                                   decodes.
     */
    function BinaryDecoder(buffer) {
      classCallCheck(this, BinaryDecoder);

      if (buffer instanceof ArrayBuffer) {
        this.uint8arr = new Uint8Array(buffer);
      } else if (buffer instanceof Uint8Array || typeof Buffer !== 'undefined' && buffer instanceof Buffer) {
        this.uint8arr = buffer;
      } else {
        throw new Error('Expected an ArrayBuffer or Uint8Array!');
      }
      this.pos = 0;
    }

    /**
     * Clone this decoder instance.
     * Optionally set a new position parameter.
     */


    createClass(BinaryDecoder, [{
      key: 'clone',
      value: function clone() {
        var newPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pos;

        var decoder = new BinaryDecoder(this.uint8arr);
        decoder.pos = newPos;
        return decoder;
      }

      /**
       * Number of bytes.
       */

    }, {
      key: 'skip8',


      /**
       * Skip one byte, jump to the next position.
       */
      value: function skip8() {
        this.pos++;
      }

      /**
       * Read one byte as unsigned integer.
       */

    }, {
      key: 'readUint8',
      value: function readUint8() {
        return this.uint8arr[this.pos++];
      }

      /**
       * Read 4 bytes as unsigned integer.
       *
       * @return {number} An unsigned integer.
       */

    }, {
      key: 'readUint32',
      value: function readUint32() {
        var uint = this.uint8arr[this.pos] + (this.uint8arr[this.pos + 1] << 8) + (this.uint8arr[this.pos + 2] << 16) + (this.uint8arr[this.pos + 3] << 24);
        this.pos += 4;
        return uint;
      }

      /**
       * Look ahead without incrementing position.
       * to the next byte and read it as unsigned integer.
       *
       * @return {number} An unsigned integer.
       */

    }, {
      key: 'peekUint8',
      value: function peekUint8() {
        return this.uint8arr[this.pos];
      }

      /**
       * Read unsigned integer (32bit) with variable length.
       * 1/8th of the storage is used as encoding overhead.
       *  * numbers < 2^7 is stored in one byte.
       *  * numbers < 2^14 is stored in two bytes.
       *
       * @return {number} An unsigned integer.
       */

    }, {
      key: 'readVarUint',
      value: function readVarUint() {
        var num = 0;
        var len = 0;
        while (true) {
          var r = this.uint8arr[this.pos++];
          num = num | (r & 127) << len;
          len += 7;
          if (r < 1 << 7) {
            return num >>> 0; // return unsigned number!
          }
          if (len > 35) {
            throw new Error('Integer out of range!');
          }
        }
      }

      /**
       * Read string of variable length
       * * varUint is used to store the length of the string
       *
       * @return {String} The read String.
       */

    }, {
      key: 'readVarString',
      value: function readVarString() {
        var len = this.readVarUint();
        var bytes = new Array(len);
        for (var i = 0; i < len; i++) {
          bytes[i] = this.uint8arr[this.pos++];
        }
        var encodedString = bytes.map(function (b) {
          return String.fromCodePoint(b);
        }).join('');
        return decodeURIComponent(escape(encodedString));
      }

      /**
       * Look ahead and read varString without incrementing position
       */

    }, {
      key: 'peekVarString',
      value: function peekVarString() {
        var pos = this.pos;
        var s = this.readVarString();
        this.pos = pos;
        return s;
      }

      /**
       * Read ID.
       * * If first varUint read is 0xFFFFFF a RootID is returned.
       * * Otherwise an ID is returned.
       *
       * @return ID
       */

    }, {
      key: 'readID',
      value: function readID() {
        var user = this.readVarUint();
        if (user === RootFakeUserID) {
          // read property name and type id
          var rid = new RootID(this.readVarString(), null);
          rid.type = this.readVarUint();
          return rid;
        }
        return new ID(user, this.readVarUint());
      }
    }, {
      key: 'length',
      get: function get$$1() {
        return this.uint8arr.length;
      }
    }]);
    return BinaryDecoder;
  }();

  // TODO should have the same base class as Item

  var GC = function () {
    function GC() {
      classCallCheck(this, GC);

      this._id = null;
      this._length = 0;
    }

    createClass(GC, [{
      key: '_integrate',
      value: function _integrate(y) {
        var id = this._id;
        var userState = y.ss.getState(id.user);
        if (id.clock === userState) {
          y.ss.setState(id.user, id.clock + this._length);
        }
        y.ds.mark(this._id, this._length, true);
        var n = y.os.put(this);
        var prev = n.prev().val;
        if (prev !== null && prev.constructor === GC && prev._id.user === n.val._id.user && prev._id.clock + prev._length === n.val._id.clock) {
          // TODO: do merging for all items!
          prev._length += n.val._length;
          y.os.delete(n.val._id);
          n = prev;
        }
        if (n.val) {
          n = n.val;
        }
        var next = y.os.findNext(n._id);
        if (next !== null && next.constructor === GC && next._id.user === n._id.user && next._id.clock === n._id.clock + n._length) {
          n._length += next._length;
          y.os.delete(next._id);
        }
        if (id.user !== RootFakeUserID) {
          if (y.connector !== null && (y.connector._forwardAppliedStructs || id.user === y.userID)) {
            y.connector.broadcastStruct(this);
          }
          if (y.persistence !== null) {
            y.persistence.saveStruct(y, this);
          }
        }
      }

      /**
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       * @private
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        encoder.writeUint8(getStructReference(this.constructor));
        encoder.writeID(this._id);
        encoder.writeVarUint(this._length);
      }

      /**
       * Read the next Item in a Decoder and fill this Item with the read data.
       *
       * This is called when data is received from a remote peer.
       *
       * @param {Y} y The Yjs instance that this Item belongs to.
       * @param {BinaryDecoder} decoder The decoder object to read data from.
       * @private
       */

    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var id = decoder.readID();
        this._id = id;
        this._length = decoder.readVarUint();
        var missing = [];
        if (y.ss.getState(id.user) < id.clock) {
          missing.push(new ID(id.user, id.clock - 1));
        }
        return missing;
      }
    }, {
      key: '_splitAt',
      value: function _splitAt() {
        return this;
      }
    }, {
      key: '_clonePartial',
      value: function _clonePartial(diff) {
        var gc = new GC();
        gc._id = new ID(this._id.user, this._id.clock + diff);
        gc._length = this._length - diff;
        return gc;
      }
    }, {
      key: '_deleted',
      get: function get$$1() {
        return true;
      }
    }]);
    return GC;
  }();

  var MissingEntry = function MissingEntry(decoder, missing, struct) {
    classCallCheck(this, MissingEntry);

    this.decoder = decoder;
    this.missing = missing.length;
    this.struct = struct;
  };

  /**
   * @private
   * Integrate remote struct
   * When a remote struct is integrated, other structs might be ready to ready to
   * integrate.
   */


  function _integrateRemoteStructHelper(y, struct) {
    var id = struct._id;
    if (id === undefined) {
      struct._integrate(y);
    } else {
      if (y.ss.getState(id.user) > id.clock) {
        return;
      }
      if (!y.gcEnabled || struct.constructor === GC || struct._parent.constructor !== GC && struct._parent._deleted === false) {
        // Is either a GC or Item with an undeleted parent
        // save to integrate
        struct._integrate(y);
      } else {
        // Is an Item. parent was deleted.
        struct._gc(y);
      }
      var msu = y._missingStructs.get(id.user);
      if (msu != null) {
        var clock = id.clock;
        var finalClock = clock + struct._length;
        for (; clock < finalClock; clock++) {
          var missingStructs = msu.get(clock);
          if (missingStructs !== undefined) {
            missingStructs.forEach(function (missingDef) {
              missingDef.missing--;
              if (missingDef.missing === 0) {
                var decoder = missingDef.decoder;
                var oldPos = decoder.pos;
                var missing = missingDef.struct._fromBinary(y, decoder);
                decoder.pos = oldPos;
                if (missing.length === 0) {
                  y._readyToIntegrate.push(missingDef.struct);
                }
              }
            });
            msu.delete(clock);
          }
        }
      }
    }
  }

  function stringifyStructs(y, decoder, strBuilder) {
    var len = decoder.readUint32();
    for (var i = 0; i < len; i++) {
      var reference = decoder.readVarUint();
      var Constr = getStruct(reference);
      var struct = new Constr();
      var missing = struct._fromBinary(y, decoder);
      var logMessage = '  ' + struct._logString();
      if (missing.length > 0) {
        logMessage += ' .. missing: ' + missing.map(logID).join(', ');
      }
      strBuilder.push(logMessage);
    }
  }

  function integrateRemoteStructs(y, decoder) {
    var len = decoder.readUint32();
    for (var i = 0; i < len; i++) {
      var reference = decoder.readVarUint();
      var Constr = getStruct(reference);
      var struct = new Constr();
      var decoderPos = decoder.pos;
      var missing = struct._fromBinary(y, decoder);
      if (missing.length === 0) {
        while (struct != null) {
          _integrateRemoteStructHelper(y, struct);
          struct = y._readyToIntegrate.shift();
        }
      } else {
        var _decoder = new BinaryDecoder(decoder.uint8arr);
        _decoder.pos = decoderPos;
        var missingEntry = new MissingEntry(_decoder, missing, struct);
        var missingStructs = y._missingStructs;
        for (var _i = missing.length - 1; _i >= 0; _i--) {
          var m = missing[_i];
          if (!missingStructs.has(m.user)) {
            missingStructs.set(m.user, new Map());
          }
          var msu = missingStructs.get(m.user);
          if (!msu.has(m.clock)) {
            msu.set(m.clock, []);
          }
          var mArray = msu = msu.get(m.clock);
          mArray.push(missingEntry);
        }
      }
    }
  }

  var bits7 = 127;
  var bits8 = 255;

  /**
   * A BinaryEncoder handles the encoding to an ArrayBuffer.
   */

  var BinaryEncoder = function () {
    function BinaryEncoder() {
      classCallCheck(this, BinaryEncoder);

      // TODO: implement chained Uint8Array buffers instead of Array buffer
      // TODO: Rewrite all methods as functions!
      this.data = [];
    }

    /**
     * The current length of the encoded data.
     */


    createClass(BinaryEncoder, [{
      key: 'createBuffer',


      /**
       * Create an ArrayBuffer.
       *
       * @return {Uint8Array} A Uint8Array that represents the written data.
       */
      value: function createBuffer() {
        return Uint8Array.from(this.data).buffer;
      }

      /**
       * Write one byte as an unsigned integer.
       *
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'writeUint8',
      value: function writeUint8(num) {
        this.data.push(num & bits8);
      }

      /**
       * Write one byte as an unsigned Integer at a specific location.
       *
       * @param {number} pos The location where the data will be written.
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'setUint8',
      value: function setUint8(pos, num) {
        this.data[pos] = num & bits8;
      }

      /**
       * Write two bytes as an unsigned integer.
       *
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'writeUint16',
      value: function writeUint16(num) {
        this.data.push(num & bits8, num >>> 8 & bits8);
      }
      /**
       * Write two bytes as an unsigned integer at a specific location.
       *
       * @param {number} pos The location where the data will be written.
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'setUint16',
      value: function setUint16(pos, num) {
        this.data[pos] = num & bits8;
        this.data[pos + 1] = num >>> 8 & bits8;
      }

      /**
       * Write two bytes as an unsigned integer
       *
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'writeUint32',
      value: function writeUint32(num) {
        for (var i = 0; i < 4; i++) {
          this.data.push(num & bits8);
          num >>>= 8;
        }
      }

      /**
       * Write two bytes as an unsigned integer at a specific location.
       *
       * @param {number} pos The location where the data will be written.
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'setUint32',
      value: function setUint32(pos, num) {
        for (var i = 0; i < 4; i++) {
          this.data[pos + i] = num & bits8;
          num >>>= 8;
        }
      }

      /**
       * Write a variable length unsigned integer.
       *
       * @param {number} num The number that is to be encoded.
       */

    }, {
      key: 'writeVarUint',
      value: function writeVarUint(num) {
        while (num >= 128) {
          this.data.push(128 | bits7 & num);
          num >>>= 7;
        }
        this.data.push(bits7 & num);
      }

      /**
       * Write a variable length string.
       *
       * @param {String} str The string that is to be encoded.
       */

    }, {
      key: 'writeVarString',
      value: function writeVarString(str) {
        var encodedString = unescape(encodeURIComponent(str));
        var bytes = encodedString.split('').map(function (c) {
          return c.codePointAt();
        });
        var len = bytes.length;
        this.writeVarUint(len);
        for (var i = 0; i < len; i++) {
          this.data.push(bytes[i]);
        }
      }

      /**
       * Write an ID at the current position.
       *
       * @param {ID} id The ID that is to be written.
       */

    }, {
      key: 'writeID',
      value: function writeID(id) {
        var user = id.user;
        this.writeVarUint(user);
        if (user !== RootFakeUserID) {
          this.writeVarUint(id.clock);
        } else {
          this.writeVarString(id.name);
          this.writeVarUint(id.type);
        }
      }
    }, {
      key: 'length',
      get: function get$$1() {
        return this.data.length;
      }

      /**
       * The current write pointer (the same as {@link length}).
       */

    }, {
      key: 'pos',
      get: function get$$1() {
        return this.data.length;
      }
    }]);
    return BinaryEncoder;
  }();

  function readStateSet(decoder) {
    var ss = new Map();
    var ssLength = decoder.readUint32();
    for (var i = 0; i < ssLength; i++) {
      var user = decoder.readVarUint();
      var clock = decoder.readVarUint();
      ss.set(user, clock);
    }
    return ss;
  }

  function writeStateSet(y, encoder) {
    var lenPosition = encoder.pos;
    var len = 0;
    encoder.writeUint32(0);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = y.ss.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = slicedToArray(_step.value, 2),
            user = _step$value[0],
            clock = _step$value[1];

        encoder.writeVarUint(user);
        encoder.writeVarUint(clock);
        len++;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    encoder.setUint32(lenPosition, len);
  }

  function writeDeleteSet(y, encoder) {
    var currentUser = null;
    var currentLength = void 0;
    var lastLenPos = void 0;

    var numberOfUsers = 0;
    var laterDSLenPus = encoder.pos;
    encoder.writeUint32(0);

    y.ds.iterate(null, null, function (n) {
      var user = n._id.user;
      var clock = n._id.clock;
      var len = n.len;
      var gc = n.gc;
      if (currentUser !== user) {
        numberOfUsers++;
        // a new user was found
        if (currentUser !== null) {
          // happens on first iteration
          encoder.setUint32(lastLenPos, currentLength);
        }
        currentUser = user;
        encoder.writeVarUint(user);
        // pseudo-fill pos
        lastLenPos = encoder.pos;
        encoder.writeUint32(0);
        currentLength = 0;
      }
      encoder.writeVarUint(clock);
      encoder.writeVarUint(len);
      encoder.writeUint8(gc ? 1 : 0);
      currentLength++;
    });
    if (currentUser !== null) {
      // happens on first iteration
      encoder.setUint32(lastLenPos, currentLength);
    }
    encoder.setUint32(laterDSLenPus, numberOfUsers);
  }

  function readDeleteSet(y, decoder) {
    var dsLength = decoder.readUint32();

    var _loop = function _loop(i) {
      var user = decoder.readVarUint();
      var dv = [];
      var dvLength = decoder.readUint32();
      for (var j = 0; j < dvLength; j++) {
        var from = decoder.readVarUint();
        var len = decoder.readVarUint();
        var gc = decoder.readUint8() === 1;
        dv.push([from, len, gc]);
      }
      if (dvLength > 0) {
        var pos = 0;
        var d = dv[pos];
        var deletions = [];
        y.ds.iterate(new ID(user, 0), new ID(user, Number.MAX_VALUE), function (n) {
          // cases:
          // 1. d deletes something to the right of n
          //  => go to next n (break)
          // 2. d deletes something to the left of n
          //  => create deletions
          //  => reset d accordingly
          //  *)=> if d doesn't delete anything anymore, go to next d (continue)
          // 3. not 2) and d deletes something that also n deletes
          //  => reset d so that it doesn't contain n's deletion
          //  *)=> if d does not delete anything anymore, go to next d (continue)
          while (d != null) {
            var diff = 0; // describe the diff of length in 1) and 2)
            if (n._id.clock + n.len <= d[0]) {
              // 1)
              break;
            } else if (d[0] < n._id.clock) {
              // 2)
              // delete maximum the len of d
              // else delete as much as possible
              diff = Math.min(n._id.clock - d[0], d[1]);
              // deleteItemRange(y, user, d[0], diff, true)
              deletions.push([user, d[0], diff]);
            } else {
              // 3)
              diff = n._id.clock + n.len - d[0]; // never null (see 1)
              if (d[2] && !n.gc) {
                // d marks as gc'd but n does not
                // then delete either way
                // deleteItemRange(y, user, d[0], Math.min(diff, d[1]), true)
                deletions.push([user, d[0], Math.min(diff, d[1])]);
              }
            }
            if (d[1] <= diff) {
              // d doesn't delete anything anymore
              d = dv[++pos];
            } else {
              d[0] = d[0] + diff; // reset pos
              d[1] = d[1] - diff; // reset length
            }
          }
        });
        // TODO: It would be more performant to apply the deletes in the above loop
        // Adapt the Tree implementation to support delete while iterating
        for (var _i = deletions.length - 1; _i >= 0; _i--) {
          var del = deletions[_i];
          deleteItemRange(y, del[0], del[1], del[2], true);
        }
        // for the rest.. just apply it
        for (; pos < dv.length; pos++) {
          d = dv[pos];
          deleteItemRange(y, user, d[0], d[1], true);
          // deletions.push([user, d[0], d[1], d[2]])
        }
      }
    };

    for (var i = 0; i < dsLength; i++) {
      _loop(i);
    }
  }

  function stringifySyncStep1(y, decoder, strBuilder) {
    var auth = decoder.readVarString();
    var protocolVersion = decoder.readVarUint();
    strBuilder.push('  - auth: "' + auth + '"');
    strBuilder.push('  - protocolVersion: ' + protocolVersion);
    // write SS
    var ssBuilder = [];
    var len = decoder.readUint32();
    for (var i = 0; i < len; i++) {
      var user = decoder.readVarUint();
      var clock = decoder.readVarUint();
      ssBuilder.push('(' + user + ':' + clock + ')');
    }
    strBuilder.push('  == SS: ' + ssBuilder.join(','));
  }

  function sendSyncStep1(connector, syncUser) {
    var encoder = new BinaryEncoder();
    encoder.writeVarString(connector.y.room);
    encoder.writeVarString('sync step 1');
    encoder.writeVarString(connector.authInfo || '');
    encoder.writeVarUint(connector.protocolVersion);
    writeStateSet(connector.y, encoder);
    connector.send(syncUser, encoder.createBuffer());
  }

  /**
   * @private
   * Write all Items that are not not included in ss to
   * the encoder object.
   */
  function writeStructs(y, encoder, ss) {
    var lenPos = encoder.pos;
    encoder.writeUint32(0);
    var len = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = y.ss.state.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var user = _step.value;

        var clock = ss.get(user) || 0;
        if (user !== RootFakeUserID) {
          var minBound = new ID(user, clock);
          var overlappingLeft = y.os.findPrev(minBound);
          var rightID = overlappingLeft === null ? null : overlappingLeft._id;
          if (rightID !== null && rightID.user === user && rightID.clock + overlappingLeft._length > clock) {
            var struct = overlappingLeft._clonePartial(clock - rightID.clock);
            struct._toBinary(encoder);
            len++;
          }
          y.os.iterate(minBound, new ID(user, Number.MAX_VALUE), function (struct) {
            struct._toBinary(encoder);
            len++;
          });
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    encoder.setUint32(lenPos, len);
  }

  function readSyncStep1(decoder, encoder, y, senderConn, sender) {
    var protocolVersion = decoder.readVarUint();
    // check protocol version
    if (protocolVersion !== y.connector.protocolVersion) {
      console.warn('You tried to sync with a Yjs instance that has a different protocol version\n      (You: ' + protocolVersion + ', Client: ' + protocolVersion + ').\n      ');
      y.destroy();
    }
    // write sync step 2
    encoder.writeVarString('sync step 2');
    encoder.writeVarString(y.connector.authInfo || '');
    var ss = readStateSet(decoder);
    writeStructs(y, encoder, ss);
    writeDeleteSet(y, encoder);
    y.connector.send(senderConn.uid, encoder.createBuffer());
    senderConn.receivedSyncStep2 = true;
    if (y.connector.role === 'slave') {
      sendSyncStep1(y.connector, sender);
    }
  }

  function stringifySyncStep2(y, decoder, strBuilder) {
    strBuilder.push('     - auth: ' + decoder.readVarString());
    strBuilder.push('  == OS:');
    stringifyStructs(y, decoder, strBuilder);
    // write DS to string
    strBuilder.push('  == DS:');
    var len = decoder.readUint32();
    for (var i = 0; i < len; i++) {
      var user = decoder.readVarUint();
      strBuilder.push('    User: ' + user + ': ');
      var len2 = decoder.readUint32();
      for (var j = 0; j < len2; j++) {
        var from = decoder.readVarUint();
        var to = decoder.readVarUint();
        var gc = decoder.readUint8() === 1;
        strBuilder.push('[' + from + ', ' + to + ', ' + gc + ']');
      }
    }
  }

  function readSyncStep2(decoder, encoder, y, senderConn, sender) {
    integrateRemoteStructs(y, decoder);
    readDeleteSet(y, decoder);
    y.connector._setSyncedWith(sender);
  }

  function messageToString(_ref) {
    var _ref2 = slicedToArray(_ref, 2),
        y = _ref2[0],
        buffer = _ref2[1];

    var decoder = new BinaryDecoder(buffer);
    decoder.readVarString(); // read roomname
    var type = decoder.readVarString();
    var strBuilder = [];
    strBuilder.push('\n === ' + type + ' ===');
    if (type === 'update') {
      stringifyStructs(y, decoder, strBuilder);
    } else if (type === 'sync step 1') {
      stringifySyncStep1(y, decoder, strBuilder);
    } else if (type === 'sync step 2') {
      stringifySyncStep2(y, decoder, strBuilder);
    } else {
      strBuilder.push('-- Unknown message type - probably an encoding issue!!!');
    }
    return strBuilder.join('\n');
  }

  function messageToRoomname(buffer) {
    var decoder = new BinaryDecoder(buffer);
    decoder.readVarString(); // roomname
    return decoder.readVarString(); // messageType
  }

  function logID(id) {
    if (id !== null && id._id != null) {
      id = id._id;
    }
    if (id === null) {
      return '()';
    } else if (id instanceof ID) {
      return '(' + id.user + ',' + id.clock + ')';
    } else if (id instanceof RootID) {
      return '(' + id.name + ',' + id.type + ')';
    } else if (id.constructor === Y) {
      return 'y';
    } else {
      throw new Error('This is not a valid ID!');
    }
  }

  /**
   * Helper utility to convert an item to a readable format.
   *
   * @param {String} name The name of the item class (YText, ItemString, ..).
   * @param {Item} item The item instance.
   * @param {String} [append] Additional information to append to the returned
   *                          string.
   * @return {String} A readable string that represents the item object.
   *
   * @private
   */
  function logItemHelper(name, item, append) {
    var left = item._left !== null ? item._left._lastId : null;
    var origin = item._origin !== null ? item._origin._lastId : null;
    return name + '(id:' + logID(item._id) + ',left:' + logID(left) + ',origin:' + logID(origin) + ',right:' + logID(item._right) + ',parent:' + logID(item._parent) + ',parentSub:' + item._parentSub + (append !== undefined ? ' - ' + append : '') + ')';
  }

  /**
   * @private
   * Delete all items in an ID-range
   * TODO: implement getItemCleanStartNode for better performance (only one lookup)
   */
  function deleteItemRange(y, user, clock, range, gcChildren) {
    var createDelete = y.connector !== null && y.connector._forwardAppliedStructs;
    var item = y.os.getItemCleanStart(new ID(user, clock));
    if (item !== null) {
      if (!item._deleted) {
        item._splitAt(y, range);
        item._delete(y, createDelete, true);
      }
      var itemLen = item._length;
      range -= itemLen;
      clock += itemLen;
      if (range > 0) {
        var node = y.os.findNode(new ID(user, clock));
        while (node !== null && node.val !== null && range > 0 && node.val._id.equals(new ID(user, clock))) {
          var nodeVal = node.val;
          if (!nodeVal._deleted) {
            nodeVal._splitAt(y, range);
            nodeVal._delete(y, createDelete, gcChildren);
          }
          var nodeLen = nodeVal._length;
          range -= nodeLen;
          clock += nodeLen;
          node = node.next();
        }
      }
    }
  }

  /**
   * @private
   * A Delete change is not a real Item, but it provides the same interface as an
   * Item. The only difference is that it will not be saved in the ItemStore
   * (OperationStore), but instead it is safed in the DeleteStore.
   */

  var Delete = function () {
    function Delete() {
      classCallCheck(this, Delete);

      this._target = null;
      this._length = null;
    }

    /**
     * @private
     * Read the next Item in a Decoder and fill this Item with the read data.
     *
     * This is called when data is received from a remote peer.
     *
     * @param {Y} y The Yjs instance that this Item belongs to.
     * @param {BinaryDecoder} decoder The decoder object to read data from.
     */


    createClass(Delete, [{
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        // TODO: set target, and add it to missing if not found
        // There is an edge case in p2p networks!
        var targetID = decoder.readID();
        this._targetID = targetID;
        this._length = decoder.readVarUint();
        if (y.os.getItem(targetID) === null) {
          return [targetID];
        } else {
          return [];
        }
      }

      /**
       * @private
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        encoder.writeUint8(getStructReference(this.constructor));
        encoder.writeID(this._targetID);
        encoder.writeVarUint(this._length);
      }

      /**
       * @private
       * Integrates this Item into the shared structure.
       *
       * This method actually applies the change to the Yjs instance. In the case of
       * Delete it marks the delete target as deleted.
       *
       * * If created remotely (a remote user deleted something),
       *   this Delete is applied to all structs in id-range.
       * * If created lokally (e.g. when y-array deletes a range of elements),
       *   this struct is broadcasted only (it is already executed)
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        var locallyCreated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!locallyCreated) {
          // from remote
          var id = this._targetID;
          deleteItemRange(y, id.user, id.clock, this._length, false);
        } else if (y.connector !== null) {
          // from local
          y.connector.broadcastStruct(this);
        }
        if (y.persistence !== null) {
          y.persistence.saveStruct(y, this);
        }
      }

      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return 'Delete - target: ' + logID(this._targetID) + ', len: ' + this._length;
      }
    }]);
    return Delete;
  }();

  /**
   * A transaction is created for every change on the Yjs model. It is possible
   * to bundle changes on the Yjs model in a single transaction to
   * minimize the number on messages sent and the number of observer calls.
   * If possible the user of this library should bundle as many changes as
   * possible. Here is an example to illustrate the advantages of bundling:
   *
   * @example
   * const map = y.define('map', YMap)
   * // Log content when change is triggered
   * map.observe(function () {
   *   console.log('change triggered')
   * })
   * // Each change on the map type triggers a log message:
   * map.set('a', 0) // => "change triggered"
   * map.set('b', 0) // => "change triggered"
   * // When put in a transaction, it will trigger the log after the transaction:
   * y.transact(function () {
   *   map.set('a', 1)
   *   map.set('b', 1)
   * }) // => "change triggered"
   *
   */
  var Transaction = function Transaction(y) {
    classCallCheck(this, Transaction);

    /**
     * @type {Y} The Yjs instance.
     */
    this.y = y;
    /**
     * All new types that are added during a transaction.
     * @type {Set<Item>}
     */
    this.newTypes = new Set();
    /**
     * All types that were directly modified (property added or child
     * inserted/deleted). New types are not included in this Set.
     * Maps from type to parentSubs (`item._parentSub = null` for YArray)
     * @type {Set<YType,String>}
     */
    this.changedTypes = new Map();
    // TODO: rename deletedTypes
    /**
     * Set of all deleted Types and Structs.
     * @type {Set<Item>}
     */
    this.deletedStructs = new Set();
    /**
     * Saves the old state set of the Yjs instance. If a state was modified,
     * the original value is saved here.
     * @type {Map<Number,Number>}
     */
    this.beforeState = new Map();
    /**
     * Stores the events for the types that observe also child elements.
     * It is mainly used by `observeDeep`.
     * @type {Map<YType,Array<YEvent>>}
     */
    this.changedParentTypes = new Map();
  };
  function transactionTypeChanged(y, type, sub) {
    if (type !== y && !type._deleted && !y._transaction.newTypes.has(type)) {
      var changedTypes = y._transaction.changedTypes;
      var subs = changedTypes.get(type);
      if (subs === undefined) {
        // create if it doesn't exist yet
        subs = new Set();
        changedTypes.set(type, subs);
      }
      subs.add(sub);
    }
  }

  /**
   * @private
   * Helper utility to split an Item (see {@link Item#_splitAt})
   * - copies all properties from a to b
   * - connects a to b
   * - assigns the correct _id
   * - saves b to os
   */
  function splitHelper(y, a, b, diff) {
    var aID = a._id;
    b._id = new ID(aID.user, aID.clock + diff);
    b._origin = a;
    b._left = a;
    b._right = a._right;
    if (b._right !== null) {
      b._right._left = b;
    }
    b._right_origin = a._right_origin;
    // do not set a._right_origin, as this will lead to problems when syncing
    a._right = b;
    b._parent = a._parent;
    b._parentSub = a._parentSub;
    b._deleted = a._deleted;
    // now search all relevant items to the right and update origin
    // if origin is not it foundOrigins, we don't have to search any longer
    var foundOrigins = new Set();
    foundOrigins.add(a);
    var o = b._right;
    while (o !== null && foundOrigins.has(o._origin)) {
      if (o._origin === a) {
        o._origin = b;
      }
      foundOrigins.add(o);
      o = o._right;
    }
    y.os.put(b);
    if (y._transaction.newTypes.has(a)) {
      y._transaction.newTypes.add(b);
    } else if (y._transaction.deletedStructs.has(a)) {
      y._transaction.deletedStructs.add(b);
    }
  }

  /**
   * Abstract class that represents any content.
   */

  var Item = function () {
    function Item() {
      classCallCheck(this, Item);

      /**
       * The uniqe identifier of this type.
       * @type {ID}
       */
      this._id = null;
      /**
       * The item that was originally to the left of this item.
       * @type {Item}
       */
      this._origin = null;
      /**
       * The item that is currently to the left of this item.
       * @type {Item}
       */
      this._left = null;
      /**
       * The item that is currently to the right of this item.
       * @type {Item}
       */
      this._right = null;
      /**
       * The item that was originally to the right of this item.
       * @type {Item}
       */
      this._right_origin = null;
      /**
       * The parent type.
       * @type {Y|YType}
       */
      this._parent = null;
      /**
       * If the parent refers to this item with some kind of key (e.g. YMap, the
       * key is specified here. The key is then used to refer to the list in which
       * to insert this item. If `parentSub = null` type._start is the list in
       * which to insert to. Otherwise it is `parent._start`.
       * @type {String}
       */
      this._parentSub = null;
      /**
       * Whether this item was deleted or not.
       * @type {Boolean}
       */
      this._deleted = false;
      /**
       * If this type's effect is reundone this type refers to the type that undid
       * this operation.
       * @type {Item}
       */
      this._redone = null;
    }

    /**
     * Creates an Item with the same effect as this Item (without position effect)
     *
     * @private
     */


    createClass(Item, [{
      key: '_copy',
      value: function _copy() {
        return new this.constructor();
      }

      /**
       * Redoes the effect of this operation.
       *
       * @param {Y} y The Yjs instance.
       *
       * @private
       */

    }, {
      key: '_redo',
      value: function _redo(y, redoitems) {
        if (this._redone !== null) {
          return this._redone;
        }
        var struct = this._copy();
        var left = this._left;
        var right = this;
        var parent = this._parent;
        // make sure that parent is redone
        if (parent._deleted === true && parent._redone === null) {
          // try to undo parent if it will be undone anyway
          if (!redoitems.has(parent) || !parent._redo(y, redoitems)) {
            return false;
          }
        }
        if (parent._redone !== null) {
          parent = parent._redone;
          // find next cloned items
          while (left !== null) {
            if (left._redone !== null && left._redone._parent === parent) {
              left = left._redone;
              break;
            }
            left = left._left;
          }
          while (right !== null) {
            if (right._redone !== null && right._redone._parent === parent) {
              right = right._redone;
            }
            right = right._right;
          }
        }
        struct._origin = left;
        struct._left = left;
        struct._right = right;
        struct._right_origin = right;
        struct._parent = parent;
        struct._parentSub = this._parentSub;
        struct._integrate(y);
        this._redone = struct;
        return true;
      }

      /**
       * Computes the last content address of this Item.
       *
       * @private
       */

    }, {
      key: '_splitAt',


      /**
       * Splits this Item so that another Items can be inserted in-between.
       * This must be overwritten if _length > 1
       * Returns right part after split
       * * diff === 0 => this
       * * diff === length => this._right
       * * otherwise => split _content and return right part of split
       * (see {@link ItemJSON}/{@link ItemString} for implementation)
       *
       * @private
       */
      value: function _splitAt(y, diff) {
        if (diff === 0) {
          return this;
        }
        return this._right;
      }

      /**
       * Mark this Item as deleted.
       *
       * @param {Y} y The Yjs instance
       * @param {boolean} createDelete Whether to propagate a message that this
       *                               Type was deleted.
       *
       * @private
       */

    }, {
      key: '_delete',
      value: function _delete(y) {
        var createDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (!this._deleted) {
          this._deleted = true;
          y.ds.mark(this._id, this._length, false);
          var del = new Delete();
          del._targetID = this._id;
          del._length = this._length;
          if (createDelete) {
            // broadcast and persists Delete
            del._integrate(y, true);
          } else if (y.persistence !== null) {
            // only persist Delete
            y.persistence.saveStruct(y, del);
          }
          transactionTypeChanged(y, this._parent, this._parentSub);
          y._transaction.deletedStructs.add(this);
        }
      }
    }, {
      key: '_gcChildren',
      value: function _gcChildren(y) {}
    }, {
      key: '_gc',
      value: function _gc(y) {
        var gc = new GC();
        gc._id = this._id;
        gc._length = this._length;
        y.os.delete(this._id);
        gc._integrate(y);
      }

      /**
       * This is called right before this Item receives any children.
       * It can be overwritten to apply pending changes before applying remote changes
       *
       * @private
       */

    }, {
      key: '_beforeChange',
      value: function _beforeChange() {}
      // nop


      /**
       * Integrates this Item into the shared structure.
       *
       * This method actually applies the change to the Yjs instance. In case of
       * Item it connects _left and _right to this Item and calls the
       * {@link Item#beforeChange} method.
       *
       * * Integrate the struct so that other types/structs can see it
       * * Add this struct to y.os
       * * Check if this is struct deleted
       *
       * @private
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        y._transaction.newTypes.add(this);
        var parent = this._parent;
        var selfID = this._id;
        var user = selfID === null ? y.userID : selfID.user;
        var userState = y.ss.getState(user);
        if (selfID === null) {
          this._id = y.ss.getNextID(this._length);
        } else if (selfID.user === RootFakeUserID) ; else if (selfID.clock < userState) {
          // already applied..
          return [];
        } else if (selfID.clock === userState) {
          y.ss.setState(selfID.user, userState + this._length);
        } else {
          // missing content from user
          throw new Error('Can not apply yet!');
        }
        if (!parent._deleted && !y._transaction.changedTypes.has(parent) && !y._transaction.newTypes.has(parent)) {
          // this is the first time parent is updated
          // or this types is new
          this._parent._beforeChange();
        }

        /*
        # $this has to find a unique position between origin and the next known character
        # case 1: $origin equals $o.origin: the $creator parameter decides if left or right
        #         let $OL= [o1,o2,o3,o4], whereby $this is to be inserted between o1 and o4
        #         o2,o3 and o4 origin is 1 (the position of o2)
        #         there is the case that $this.creator < o2.creator, but o3.creator < $this.creator
        #         then o2 knows o3. Since on another client $OL could be [o1,o3,o4] the problem is complex
        #         therefore $this would be always to the right of o3
        # case 2: $origin < $o.origin
        #         if current $this insert_position > $o origin: $this ins
        #         else $insert_position will not change
        #         (maybe we encounter case 1 later, then this will be to the right of $o)
        # case 3: $origin > $o.origin
        #         $this insert_position is to the left of $o (forever!)
        */
        // handle conflicts
        var o = void 0;
        // set o to the first conflicting item
        if (this._left !== null) {
          o = this._left._right;
        } else if (this._parentSub !== null) {
          o = this._parent._map.get(this._parentSub) || null;
        } else {
          o = this._parent._start;
        }
        var conflictingItems = new Set();
        var itemsBeforeOrigin = new Set();
        // Let c in conflictingItems, b in itemsBeforeOrigin
        // ***{origin}bbbb{this}{c,b}{c,b}{o}***
        // Note that conflictingItems is a subset of itemsBeforeOrigin
        while (o !== null && o !== this._right) {
          itemsBeforeOrigin.add(o);
          conflictingItems.add(o);
          if (this._origin === o._origin) {
            // case 1
            if (o._id.user < this._id.user) {
              this._left = o;
              conflictingItems.clear();
            }
          } else if (itemsBeforeOrigin.has(o._origin)) {
            // case 2
            if (!conflictingItems.has(o._origin)) {
              this._left = o;
              conflictingItems.clear();
            }
          } else {
            break;
          }
          // TODO: try to use right_origin instead.
          // Then you could basically omit conflictingItems!
          // Note: you probably can't use right_origin in every case.. only when setting _left
          o = o._right;
        }
        // reconnect left/right + update parent map/start if necessary
        var parentSub = this._parentSub;
        if (this._left === null) {
          var right = void 0;
          if (parentSub !== null) {
            var pmap = parent._map;
            right = pmap.get(parentSub) || null;
            pmap.set(parentSub, this);
          } else {
            right = parent._start;
            parent._start = this;
          }
          this._right = right;
          if (right !== null) {
            right._left = this;
          }
        } else {
          var left = this._left;
          var _right = left._right;
          this._right = _right;
          left._right = this;
          if (_right !== null) {
            _right._left = this;
          }
        }
        if (parent._deleted) {
          this._delete(y, false);
        }
        y.os.put(this);
        transactionTypeChanged(y, parent, parentSub);
        if (this._id.user !== RootFakeUserID) {
          if (y.connector !== null && (y.connector._forwardAppliedStructs || this._id.user === y.userID)) {
            y.connector.broadcastStruct(this);
          }
          if (y.persistence !== null) {
            y.persistence.saveStruct(y, this);
          }
        }
      }

      /**
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       *
       * @private
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        encoder.writeUint8(getStructReference(this.constructor));
        var info = 0;
        if (this._origin !== null) {
          info += 1; // origin is defined
        }
        // TODO: remove
        /* no longer send _left
        if (this._left !== this._origin) {
          info += 0b10 // do not copy origin to left
        }
        */
        if (this._right_origin !== null) {
          info += 4;
        }
        if (this._parentSub !== null) {
          info += 8;
        }
        encoder.writeUint8(info);
        encoder.writeID(this._id);
        if (info & 1) {
          encoder.writeID(this._origin._lastId);
        }
        // TODO: remove
        /* see above
        if (info & 0b10) {
          encoder.writeID(this._left._lastId)
        }
        */
        if (info & 4) {
          encoder.writeID(this._right_origin._id);
        }
        if ((info & 5) === 0) {
          // neither origin nor right is defined
          encoder.writeID(this._parent._id);
        }
        if (info & 8) {
          encoder.writeVarString(JSON.stringify(this._parentSub));
        }
      }

      /**
       * Read the next Item in a Decoder and fill this Item with the read data.
       *
       * This is called when data is received from a remote peer.
       *
       * @param {Y} y The Yjs instance that this Item belongs to.
       * @param {BinaryDecoder} decoder The decoder object to read data from.
       *
       * @private
       */

    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = [];
        var info = decoder.readUint8();
        var id = decoder.readID();
        this._id = id;
        // read origin
        if (info & 1) {
          // origin != null
          var originID = decoder.readID();
          // we have to query for left again because it might have been split/merged..
          var origin = y.os.getItemCleanEnd(originID);
          if (origin === null) {
            missing.push(originID);
          } else {
            this._origin = origin;
            this._left = this._origin;
          }
        }
        // read right
        if (info & 4) {
          // right != null
          var rightID = decoder.readID();
          // we have to query for right again because it might have been split/merged..
          var right = y.os.getItemCleanStart(rightID);
          if (right === null) {
            missing.push(rightID);
          } else {
            this._right = right;
            this._right_origin = right;
          }
        }
        // read parent
        if ((info & 5) === 0) {
          // neither origin nor right is defined
          var parentID = decoder.readID();
          // parent does not change, so we don't have to search for it again
          if (this._parent === null) {
            var parent = void 0;
            if (parentID.constructor === RootID) {
              parent = y.os.get(parentID);
            } else {
              parent = y.os.getItem(parentID);
            }
            if (parent === null) {
              missing.push(parentID);
            } else {
              this._parent = parent;
            }
          }
        } else if (this._parent === null) {
          if (this._origin !== null) {
            if (this._origin.constructor === GC) {
              // if origin is a gc, set parent also gc'd
              this._parent = this._origin;
            } else {
              this._parent = this._origin._parent;
            }
          } else if (this._right_origin !== null) {
            // if origin is a gc, set parent also gc'd
            if (this._right_origin.constructor === GC) {
              this._parent = this._right_origin;
            } else {
              this._parent = this._right_origin._parent;
            }
          }
        }
        if (info & 8) {
          // TODO: maybe put this in read parent condition (you can also read parentsub from left/right)
          this._parentSub = JSON.parse(decoder.readVarString());
        }
        if (y.ss.getState(id.user) < id.clock) {
          missing.push(new ID(id.user, id.clock - 1));
        }
        return missing;
      }
    }, {
      key: '_lastId',
      get: function get$$1() {
        return new ID(this._id.user, this._id.clock + this._length - 1);
      }

      /**
       * Computes the length of this Item.
       *
       * @private
       */

    }, {
      key: '_length',
      get: function get$$1() {
        return 1;
      }

      /**
       * Should return false if this Item is some kind of meta information
       * (e.g. format information).
       *
       * * Whether this Item should be addressable via `yarray.get(i)`
       * * Whether this Item should be counted when computing yarray.length
       *
       * @private
       */

    }, {
      key: '_countable',
      get: function get$$1() {
        return true;
      }
    }]);
    return Item;
  }();

  /**
   * General event handler implementation.
   */
  var EventHandler = function () {
    function EventHandler() {
      classCallCheck(this, EventHandler);

      this.eventListeners = [];
    }

    /**
     * To prevent memory leaks, call this method when the eventListeners won't be
     * used anymore.
     */


    createClass(EventHandler, [{
      key: "destroy",
      value: function destroy() {
        this.eventListeners = null;
      }

      /**
       * Adds an event listener that is called when
       * {@link EventHandler#callEventListeners} is called.
       *
       * @param {Function} f The event handler.
       */

    }, {
      key: "addEventListener",
      value: function addEventListener(f) {
        this.eventListeners.push(f);
      }

      /**
       * Removes an event listener.
       *
       * @param {Function} f The event handler that was added with
       *                     {@link EventHandler#addEventListener}
       */

    }, {
      key: "removeEventListener",
      value: function removeEventListener(f) {
        this.eventListeners = this.eventListeners.filter(function (g) {
          return f !== g;
        });
      }

      /**
       * Removes all event listeners.
       */

    }, {
      key: "removeAllEventListeners",
      value: function removeAllEventListeners() {
        this.eventListeners = [];
      }

      /**
       * Call all event listeners that were added via
       * {@link EventHandler#addEventListener}.
       *
       * @param {Transaction} transaction The transaction object // TODO: do we need this?
       * @param {YEvent} event An event object that describes the change on a type.
       */

    }, {
      key: "callEventListeners",
      value: function callEventListeners(transaction, event) {
        for (var i = 0; i < this.eventListeners.length; i++) {
          try {
            var f = this.eventListeners[i];
            f(event);
          } catch (e) {
            /*
              Your observer threw an error. This error was caught so that Yjs
              can ensure data consistency! In order to debug this error you
              have to check "Pause On Caught Exceptions" in developer tools.
            */
            console.error(e);
          }
        }
      }
    }]);
    return EventHandler;
  }();

  // restructure children as if they were inserted one after another
  function integrateChildren(y, start) {
    var right = void 0;
    do {
      right = start._right;
      start._right = null;
      start._right_origin = null;
      start._origin = start._left;
      start._integrate(y);
      start = right;
    } while (right !== null);
  }

  function gcChildren(y, item) {
    while (item !== null) {
      item._delete(y, false, true);
      item._gc(y);
      item = item._right;
    }
  }

  /**
   * Abstract Yjs Type class
   */

  var Type = function (_Item) {
    inherits(Type, _Item);

    function Type() {
      classCallCheck(this, Type);

      var _this = possibleConstructorReturn(this, (Type.__proto__ || Object.getPrototypeOf(Type)).call(this));

      _this._map = new Map();
      _this._start = null;
      _this._y = null;
      _this._eventHandler = new EventHandler();
      _this._deepEventHandler = new EventHandler();
      return _this;
    }

    /**
     * Compute the path from this type to the specified target.
     *
     * @example
     * It should be accessible via `this.get(result[0]).get(result[1])..`
     * const path = type.getPathTo(child)
     * // assuming `type instanceof YArray`
     * console.log(path) // might look like => [2, 'key1']
     * child === type.get(path[0]).get(path[1])
     *
     * @param {YType} type Type target
     * @return {Array<string>} Path to the target
     */


    createClass(Type, [{
      key: 'getPathTo',
      value: function getPathTo(type) {
        if (type === this) {
          return [];
        }
        var path = [];
        var y = this._y;
        while (type !== this && type !== y) {
          var parent = type._parent;
          if (type._parentSub !== null) {
            path.unshift(type._parentSub);
          } else {
            // parent is array-ish
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = parent[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = slicedToArray(_step.value, 2),
                    i = _step$value[0],
                    child = _step$value[1];

                if (child === type) {
                  path.unshift(i);
                  break;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
          type = parent;
        }
        if (type !== this) {
          throw new Error('The type is not a child of this node');
        }
        return path;
      }

      /**
       * @private
       * Call event listeners with an event. This will also add an event to all
       * parents (for `.observeDeep` handlers).
       */

    }, {
      key: '_callEventHandler',
      value: function _callEventHandler(transaction, event) {
        var changedParentTypes = transaction.changedParentTypes;
        this._eventHandler.callEventListeners(transaction, event);
        var type = this;
        while (type !== this._y) {
          var events = changedParentTypes.get(type);
          if (events === undefined) {
            events = [];
            changedParentTypes.set(type, events);
          }
          events.push(event);
          type = type._parent;
        }
      }

      /**
       * @private
       * Helper method to transact if the y instance is available.
       *
       * TODO: Currently event handlers are not thrown when a type is not registered
       *       with a Yjs instance.
       */

    }, {
      key: '_transact',
      value: function _transact(f) {
        var y = this._y;
        if (y !== null) {
          y.transact(f);
        } else {
          f(y);
        }
      }

      /**
       * Observe all events that are created on this type.
       *
       * @param {Function} f Observer function
       */

    }, {
      key: 'observe',
      value: function observe(f) {}
      //this._eventHandler.addEventListener(function (e) {
      //    console.log('eeeeeeeeeeeeeeeeeeeeeee');
      //    console.log(e);
      //});


      /**
       * Observe all events that are created by this type and its children.
       *
       * @param {Function} f Observer function
       */

    }, {
      key: 'observeDeep',
      value: function observeDeep(f) {
        this._deepEventHandler.addEventListener(f);
      }

      /**
       * Unregister an observer function.
       *
       * @param {Function} f Observer function
       */

    }, {
      key: 'unobserve',
      value: function unobserve(f) {
        this._eventHandler.removeEventListener(f);
      }

      /**
       * Unregister an observer function.
       *
       * @param {Function} f Observer function
       */

    }, {
      key: 'unobserveDeep',
      value: function unobserveDeep(f) {
        this._deepEventHandler.removeEventListener(f);
      }

      /**
       * @private
       * Integrate this type into the Yjs instance.
       *
       * * Save this struct in the os
       * * This type is sent to other client
       * * Observer functions are fired
       *
       * @param {Y} y The Yjs instance
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        get(Type.prototype.__proto__ || Object.getPrototypeOf(Type.prototype), '_integrate', this).call(this, y);
        this._y = y;
        // when integrating children we must make sure to
        // integrate start
        var start = this._start;
        if (start !== null) {
          this._start = null;
          integrateChildren(y, start);
        }
        // integrate map children
        var map = this._map;
        this._map = new Map();
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = map.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var t = _step2.value;

            // TODO make sure that right elements are deleted!
            integrateChildren(y, t);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }, {
      key: '_gcChildren',
      value: function _gcChildren(y) {
        gcChildren(y, this._start);
        this._start = null;
        this._map.forEach(function (item) {
          gcChildren(y, item);
        });
        this._map = new Map();
      }
    }, {
      key: '_gc',
      value: function _gc(y) {
        this._gcChildren(y);
        get(Type.prototype.__proto__ || Object.getPrototypeOf(Type.prototype), '_gc', this).call(this, y);
      }

      /**
       * @private
       * Mark this Item as deleted.
       *
       * @param {Y} y The Yjs instance
       * @param {boolean} createDelete Whether to propagate a message that this
       *                               Type was deleted.
       * @param {boolean} [gcChildren=y._hasUndoManager===false] Whether to garbage
       *                                         collect the children of this type.
       */

    }, {
      key: '_delete',
      value: function _delete(y, createDelete, gcChildren) {
        if (gcChildren === undefined || !y.gcEnabled) {
          gcChildren = y._hasUndoManager === false && y.gcEnabled;
        }
        get(Type.prototype.__proto__ || Object.getPrototypeOf(Type.prototype), '_delete', this).call(this, y, createDelete, gcChildren);
        y._transaction.changedTypes.delete(this);
        // delete map types
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this._map.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var value = _step3.value;

            if (value instanceof Item && !value._deleted) {
              value._delete(y, false, gcChildren);
            }
          }
          // delete array types
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        var t = this._start;
        while (t !== null) {
          if (!t._deleted) {
            t._delete(y, false, gcChildren);
          }
          t = t._right;
        }
        if (gcChildren) {
          this._gcChildren(y);
        }
      }
    }]);
    return Type;
  }(Item);

  var ItemJSON = function (_Item) {
    inherits(ItemJSON, _Item);

    function ItemJSON() {
      classCallCheck(this, ItemJSON);

      var _this = possibleConstructorReturn(this, (ItemJSON.__proto__ || Object.getPrototypeOf(ItemJSON)).call(this));

      _this._content = null;
      return _this;
    }

    createClass(ItemJSON, [{
      key: '_copy',
      value: function _copy() {
        var struct = get(ItemJSON.prototype.__proto__ || Object.getPrototypeOf(ItemJSON.prototype), '_copy', this).call(this);
        struct._content = this._content;
        return struct;
      }
    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(ItemJSON.prototype.__proto__ || Object.getPrototypeOf(ItemJSON.prototype), '_fromBinary', this).call(this, y, decoder);
        var len = decoder.readVarUint();
        this._content = new Array(len);
        for (var i = 0; i < len; i++) {
          var ctnt = decoder.readVarString();
          var parsed = void 0;
          if (ctnt === 'undefined') {
            parsed = undefined;
          } else {
            parsed = JSON.parse(ctnt);
          }
          this._content[i] = parsed;
        }
        return missing;
      }
    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(ItemJSON.prototype.__proto__ || Object.getPrototypeOf(ItemJSON.prototype), '_toBinary', this).call(this, encoder);
        var len = this._content.length;
        encoder.writeVarUint(len);
        for (var i = 0; i < len; i++) {
          var encoded = void 0;
          var content = this._content[i];
          if (content === undefined) {
            encoded = 'undefined';
          } else {
            encoded = JSON.stringify(content);
          }
          encoder.writeVarString(encoded);
        }
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('ItemJSON', this, 'content:' + JSON.stringify(this._content));
      }
    }, {
      key: '_splitAt',
      value: function _splitAt(y, diff) {
        if (diff === 0) {
          return this;
        } else if (diff >= this._length) {
          return this._right;
        }
        var item = new ItemJSON();
        item._content = this._content.splice(diff);
        splitHelper(y, this, item, diff);
        return item;
      }
    }, {
      key: '_length',
      get: function get$$1() {
        return this._content.length;
      }
    }]);
    return ItemJSON;
  }(Item);

  var ItemString = function (_Item) {
    inherits(ItemString, _Item);

    function ItemString() {
      classCallCheck(this, ItemString);

      var _this = possibleConstructorReturn(this, (ItemString.__proto__ || Object.getPrototypeOf(ItemString)).call(this));

      _this._content = null;
      return _this;
    }

    createClass(ItemString, [{
      key: '_copy',
      value: function _copy() {
        var struct = get(ItemString.prototype.__proto__ || Object.getPrototypeOf(ItemString.prototype), '_copy', this).call(this);
        struct._content = this._content;
        return struct;
      }
    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(ItemString.prototype.__proto__ || Object.getPrototypeOf(ItemString.prototype), '_fromBinary', this).call(this, y, decoder);
        this._content = decoder.readVarString();
        return missing;
      }
    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(ItemString.prototype.__proto__ || Object.getPrototypeOf(ItemString.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(this._content);
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('ItemString', this, 'content:"' + this._content + '"');
      }
    }, {
      key: '_splitAt',
      value: function _splitAt(y, diff) {
        if (diff === 0) {
          return this;
        } else if (diff >= this._length) {
          return this._right;
        }
        var item = new ItemString();
        item._content = this._content.slice(diff);
        this._content = this._content.slice(0, diff);
        splitHelper(y, this, item, diff);
        return item;
      }
    }, {
      key: '_length',
      get: function get$$1() {
        return this._content.length;
      }
    }]);
    return ItemString;
  }(Item);

  /**
   * YEvent describes the changes on a YType.
   */
  var YEvent = function () {
    /**
     * @param {YType} target The changed type.
     */
    function YEvent(target) {
      classCallCheck(this, YEvent);

      /**
       * The type on which this event was created on.
       * @type {YType}
       */
      this.target = target;
      /**
       * The current target on which the observe callback is called.
       * @type {YType}
       */
      this.currentTarget = target;
    }

    /**
     * Computes the path from `y` to the changed type.
     *
     * The following property holds:
     * @example
     *   let type = y
     *   event.path.forEach(function (dir) {
     *     type = type.get(dir)
     *   })
     *   type === event.target // => true
     */


    createClass(YEvent, [{
      key: "path",
      get: function get$$1() {
        return this.currentTarget.getPathTo(this.target);
      }
    }]);
    return YEvent;
  }();

  /**
   * Event that describes the changes on a YArray
   *
   * @param {YArray} yarray The changed type
   * @param {Boolean} remote Whether the changed was caused by a remote peer
   * @param {Transaction} transaction The transaction object
   */
  var YArrayEvent = function (_YEvent) {
    inherits(YArrayEvent, _YEvent);

    function YArrayEvent(yarray, remote, transaction) {
      classCallCheck(this, YArrayEvent);

      var _this = possibleConstructorReturn(this, (YArrayEvent.__proto__ || Object.getPrototypeOf(YArrayEvent)).call(this, yarray));

      _this.remote = remote;
      _this._transaction = transaction;
      _this._addedElements = null;
      _this._removedElements = null;
      return _this;
    }

    /**
     * Child elements that were added in this transaction.
     *
     * @return {Set}
     */


    createClass(YArrayEvent, [{
      key: 'addedElements',
      get: function get$$1() {
        if (this._addedElements === null) {
          var target = this.target;
          var transaction = this._transaction;
          var addedElements = new Set();
          transaction.newTypes.forEach(function (type) {
            if (type._parent === target && !transaction.deletedStructs.has(type)) {
              addedElements.add(type);
            }
          });
          this._addedElements = addedElements;
        }
        return this._addedElements;
      }

      /**
       * Child elements that were removed in this transaction.
       *
       * @return {Set}
       */

    }, {
      key: 'removedElements',
      get: function get$$1() {
        if (this._removedElements === null) {
          var target = this.target;
          var transaction = this._transaction;
          var removedElements = new Set();
          transaction.deletedStructs.forEach(function (struct) {
            if (struct._parent === target && !transaction.newTypes.has(struct)) {
              removedElements.add(struct);
            }
          });
          this._removedElements = removedElements;
        }
        return this._removedElements;
      }
    }]);
    return YArrayEvent;
  }(YEvent);

  /**
   * A shared Array implementation.
   */

  var YArray = function (_Type) {
    inherits(YArray, _Type);

    function YArray() {
      classCallCheck(this, YArray);
      return possibleConstructorReturn(this, (YArray.__proto__ || Object.getPrototypeOf(YArray)).apply(this, arguments));
    }

    createClass(YArray, [{
      key: '_callObserver',

      /**
       * @private
       * Creates YArray Event and calls observers.
       */
      value: function _callObserver(transaction, parentSubs, remote) {
        this._callEventHandler(transaction, new YArrayEvent(this, remote, transaction));
      }

      /**
       * Returns the i-th element from a YArray.
       *
       * @param {Integer} index The index of the element to return from the YArray
       */

    }, {
      key: 'get',
      value: function get$$1(index) {
        var n = this._start;
        while (n !== null) {
          if (!n._deleted && n._countable) {
            if (index < n._length) {
              if (n.constructor === ItemJSON || n.constructor === ItemString) {
                return n._content[index];
              } else {
                return n;
              }
            }
            index -= n._length;
          }
          n = n._right;
        }
      }

      /**
       * Transforms this YArray to a JavaScript Array.
       *
       * @return {Array}
       */

    }, {
      key: 'toArray',
      value: function toArray$$1() {
        return this.map(function (c) {
          return c;
        });
      }

      /**
       * Transforms this Shared Type to a JSON object.
       *
       * @return {Array}
       */

    }, {
      key: 'toJSON',
      value: function toJSON() {
        return this.map(function (c) {
          if (c instanceof Type) {
            if (c.toJSON !== null) {
              return c.toJSON();
            } else {
              return c.toString();
            }
          }
          return c;
        });
      }

      /**
       * Returns an Array with the result of calling a provided function on every
       * element of this YArray.
       *
       * @param {Function} f Function that produces an element of the new Array
       * @return {Array} A new array with each element being the result of the
       *                 callback function
       */

    }, {
      key: 'map',
      value: function map(f) {
        var _this3 = this;

        var res = [];
        this.forEach(function (c, i) {
          res.push(f(c, i, _this3));
        });
        return res;
      }

      /**
       * Executes a provided function on once on overy element of this YArray.
       *
       * @param {Function} f A function to execute on every element of this YArray.
       */

    }, {
      key: 'forEach',
      value: function forEach(f) {
        var index = 0;
        var n = this._start;
        while (n !== null) {
          if (!n._deleted && n._countable) {
            if (n instanceof Type) {
              f(n, index++, this);
            } else {
              var content = n._content;
              var contentLen = content.length;
              for (var i = 0; i < contentLen; i++) {
                index++;
                f(content[i], index, this);
              }
            }
          }
          n = n._right;
        }
      }

      /**
       * Computes the length of this YArray.
       */

    }, {
      key: Symbol.iterator,
      value: function value() {
        return {
          next: function next() {
            while (this._item !== null && (this._item._deleted || this._item._length <= this._itemElement)) {
              // item is deleted or itemElement does not exist (is deleted)
              this._item = this._item._right;
              this._itemElement = 0;
            }
            if (this._item === null) {
              return {
                done: true
              };
            }
            var content = void 0;
            if (this._item instanceof Type) {
              content = this._item;
            } else {
              content = this._item._content[this._itemElement++];
            }
            return {
              value: content,
              done: false
            };
          },
          _item: this._start,
          _itemElement: 0,
          _count: 0
        };
      }

      /**
       * Deletes elements starting from an index.
       *
       * @param {Integer} index Index at which to start deleting elements
       * @param {Integer} length The number of elements to remove. Defaults to 1.
       */

    }, {
      key: 'delete',
      value: function _delete(index) {
        var _this4 = this;

        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

        this._y.transact(function () {
          var item = _this4._start;
          var count = 0;
          while (item !== null && length > 0) {
            if (!item._deleted && item._countable) {
              if (count <= index && index < count + item._length) {
                var diffDel = index - count;
                item = item._splitAt(_this4._y, diffDel);
                item._splitAt(_this4._y, length);
                length -= item._length;
                item._delete(_this4._y);
                count += diffDel;
              } else {
                count += item._length;
              }
            }
            item = item._right;
          }
        });
        if (length > 0) {
          throw new Error('Delete exceeds the range of the YArray');
        }
      }

      /**
       * @private
       * Inserts content after an element container.
       *
       * @param {Item} left The element container to use as a reference.
       * @param {Array} content The Array of content to insert (see {@see insert})
       */

    }, {
      key: 'insertAfter',
      value: function insertAfter(left, content) {
        var _this5 = this;

        this._transact(function (y) {
          var right = void 0;
          if (left === null) {
            right = _this5._start;
          } else {
            right = left._right;
          }
          var prevJsonIns = null;
          for (var i = 0; i < content.length; i++) {
            var c = content[i];
            if (typeof c === 'function') {
              c = new c(); // eslint-disable-line new-cap
            }
            if (c instanceof Type) {
              if (prevJsonIns !== null) {
                if (y !== null) {
                  prevJsonIns._integrate(y);
                }
                left = prevJsonIns;
                prevJsonIns = null;
              }
              c._origin = left;
              c._left = left;
              c._right = right;
              c._right_origin = right;
              c._parent = _this5;
              if (y !== null) {
                c._integrate(y);
              } else if (left === null) {
                _this5._start = c;
              } else {
                left._right = c;
              }
              left = c;
            } else {
              if (prevJsonIns === null) {
                prevJsonIns = new ItemJSON();
                prevJsonIns._origin = left;
                prevJsonIns._left = left;
                prevJsonIns._right = right;
                prevJsonIns._right_origin = right;
                prevJsonIns._parent = _this5;
                prevJsonIns._content = [];
              }
              prevJsonIns._content.push(c);
            }
          }
          if (prevJsonIns !== null) {
            if (y !== null) {
              prevJsonIns._integrate(y);
            } else if (prevJsonIns._left === null) {
              _this5._start = prevJsonIns;
            }
          }
        });
        return content;
      }

      /**
       * Inserts new content at an index.
       *
       * Important: This function expects an array of content. Not just a content
       * object. The reason for this "weirdness" is that inserting several elements
       * is very efficient when it is done as a single operation.
       *
       * @example
       *  // Insert character 'a' at position 0
       *  yarray.insert(0, ['a'])
       *  // Insert numbers 1, 2 at position 1
       *  yarray.insert(2, [1, 2])
       *
       * @param {Integer} index The index to insert content at.
       * @param {Array} content The array of content
       */

    }, {
      key: 'insert',
      value: function insert(index, content) {
        var _this6 = this;

        this._transact(function () {
          var left = null;
          var right = _this6._start;
          var count = 0;
          var y = _this6._y;
          while (right !== null) {
            var rightLen = right._deleted ? 0 : right._length - 1;
            if (count <= index && index <= count + rightLen) {
              var splitDiff = index - count;
              right = right._splitAt(y, splitDiff);
              left = right._left;
              count += splitDiff;
              break;
            }
            if (!right._deleted) {
              count += right._length;
            }
            left = right;
            right = right._right;
          }
          if (index > count) {
            throw new Error('Index exceeds array range!');
          }
          _this6.insertAfter(left, content);
        });
      }

      /**
       * Appends content to this YArray.
       *
       * @param {Array} content Array of content to append.
       */

    }, {
      key: 'push',
      value: function push(content) {
        var n = this._start;
        var lastUndeleted = null;
        while (n !== null) {
          if (!n._deleted) {
            lastUndeleted = n;
          }
          n = n._right;
        }
        this.insertAfter(lastUndeleted, content);
      }

      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('YArray', this, 'start:' + logID(this._start) + '"');
      }
    }, {
      key: 'length',
      get: function get$$1() {
        var length = 0;
        var n = this._start;
        while (n !== null) {
          if (!n._deleted && n._countable) {
            length += n._length;
          }
          n = n._right;
        }
        return length;
      }
    }]);
    return YArray;
  }(Type);

  /**
   * Event that describes the changes on a YMap.
   *
   * @param {YMap} ymap The YArray that changed.
   * @param {Set<any>} subs The keys that changed.
   * @param {boolean} remote Whether the change was created by a remote peer.
   */
  var YMapEvent = function (_YEvent) {
    inherits(YMapEvent, _YEvent);

    function YMapEvent(ymap, subs, remote) {
      classCallCheck(this, YMapEvent);

      var _this = possibleConstructorReturn(this, (YMapEvent.__proto__ || Object.getPrototypeOf(YMapEvent)).call(this, ymap));

      _this.keysChanged = subs;
      _this.remote = remote;
      return _this;
    }

    return YMapEvent;
  }(YEvent);

  /**
   * A shared Map implementation.
   */

  var YMap = function (_Type) {
    inherits(YMap, _Type);

    /**
     * @private
     * Creates YMap Event and calls observers.
     */
    function YMap() {
      classCallCheck(this, YMap);

      var _this2 = possibleConstructorReturn(this, (YMap.__proto__ || Object.getPrototypeOf(YMap)).call(this));

      console.log('constructedddddddddddddddddddd');
      _this2._eventHandler.addEventListener(function (e) {
        console.log('ffffffffffffffffffffffff');
        console.log(e);
        var x = 9999999999999;
        console.log(x);
      });
      return _this2;
    }

    createClass(YMap, [{
      key: '_callObserver',
      value: function _callObserver(transaction, parentSubs, remote) {
        this._callEventHandler(transaction, new YMapEvent(this, parentSubs, remote));
      }

      /**
       * Transforms this Shared Type to a JSON object.
       *
       * @return {Object}
       */

    }, {
      key: 'toJSON',
      value: function toJSON() {
        var map = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._map[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = slicedToArray(_step.value, 2),
                key = _step$value[0],
                item = _step$value[1];

            if (!item._deleted) {
              var res = void 0;
              if (item instanceof Type) {
                if (item.toJSON !== undefined) {
                  res = item.toJSON();
                } else {
                  res = item.toString();
                }
              } else {
                res = item._content[0];
              }
              map[key] = res;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return map;
      }

      /**
       * Returns the keys for each element in the YMap Type.
       *
       * @return {Array}
       */

    }, {
      key: 'keys',
      value: function keys() {
        // TODO: Should return either Iterator or Set!
        var keys = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this._map[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _step2$value = slicedToArray(_step2.value, 2),
                key = _step2$value[0],
                value = _step2$value[1];

            if (!value._deleted) {
              keys.push(key);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return keys;
      }

      /**
       * Remove a specified element from this YMap.
       *
       * @param {encodable} key The key of the element to remove.
       */

    }, {
      key: 'delete',
      value: function _delete(key) {
        var _this3 = this;

        this._transact(function (y) {
          var c = _this3._map.get(key);
          if (y !== null && c !== undefined) {
            c._delete(y);
          }
        });
      }

      /**
       * Adds or updates an element with a specified key and value.
       *
       * @param {encodable} key The key of the element to add to this YMap.
       * @param {encodable | YType} value The value of the element to add to this
       *                                  YMap.
       */

    }, {
      key: 'set',
      value: function set$$1(key, value) {
        var _this4 = this;

        this._transact(function (y) {
          var old = _this4._map.get(key) || null;
          if (old !== null) {
            if (old.constructor === ItemJSON && !old._deleted && old._content[0] === value) {
              // Trying to overwrite with same value
              // break here
              return value;
            }
            if (y !== null) {
              old._delete(y);
            }
          }
          var v = void 0;
          if (typeof value === 'function') {
            v = new value(); // eslint-disable-line new-cap
            value = v;
          } else if (value instanceof Item) {
            v = value;
          } else {
            v = new ItemJSON();
            v._content = [value];
          }
          v._right = old;
          v._right_origin = old;
          v._parent = _this4;
          v._parentSub = key;
          if (y !== null) {
            v._integrate(y);
          } else {
            _this4._map.set(key, v);
          }
        });
        return value;
      }

      /**
       * Returns a specified element from this YMap.
       *
       * @param {encodable} key The key of the element to return.
       */

    }, {
      key: 'get',
      value: function get$$1(key) {
        var v = this._map.get(key);
        if (v === undefined || v._deleted) {
          return undefined;
        }
        if (v instanceof Type) {
          return v;
        } else {
          return v._content[v._content.length - 1];
        }
      }

      /**
       * Returns a boolean indicating whether the specified key exists or not.
       *
       * @param {encodable} key The key to test.
       */

    }, {
      key: 'has',
      value: function has(key) {
        var v = this._map.get(key);
        if (v === undefined || v._deleted) {
          return false;
        } else {
          return true;
        }
      }

      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('YMap', this, 'mapSize:' + this._map.size);
      }
    }]);
    return YMap;
  }(Type);

  var ItemEmbed = function (_Item) {
    inherits(ItemEmbed, _Item);

    function ItemEmbed() {
      classCallCheck(this, ItemEmbed);

      var _this = possibleConstructorReturn(this, (ItemEmbed.__proto__ || Object.getPrototypeOf(ItemEmbed)).call(this));

      _this.embed = null;
      return _this;
    }

    createClass(ItemEmbed, [{
      key: '_copy',
      value: function _copy(undeleteChildren, copyPosition) {
        var struct = get(ItemEmbed.prototype.__proto__ || Object.getPrototypeOf(ItemEmbed.prototype), '_copy', this).call(this, undeleteChildren, copyPosition);
        struct.embed = this.embed;
        return struct;
      }
    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(ItemEmbed.prototype.__proto__ || Object.getPrototypeOf(ItemEmbed.prototype), '_fromBinary', this).call(this, y, decoder);
        this.embed = JSON.parse(decoder.readVarString());
        return missing;
      }
    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(ItemEmbed.prototype.__proto__ || Object.getPrototypeOf(ItemEmbed.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(JSON.stringify(this.embed));
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('ItemEmbed', this, 'embed:' + JSON.stringify(this.embed));
      }
    }, {
      key: '_length',
      get: function get$$1() {
        return 1;
      }
    }]);
    return ItemEmbed;
  }(Item);

  var ItemFormat = function (_Item) {
    inherits(ItemFormat, _Item);

    function ItemFormat() {
      classCallCheck(this, ItemFormat);

      var _this = possibleConstructorReturn(this, (ItemFormat.__proto__ || Object.getPrototypeOf(ItemFormat)).call(this));

      _this.key = null;
      _this.value = null;
      return _this;
    }

    createClass(ItemFormat, [{
      key: '_copy',
      value: function _copy(undeleteChildren, copyPosition) {
        var struct = get(ItemFormat.prototype.__proto__ || Object.getPrototypeOf(ItemFormat.prototype), '_copy', this).call(this, undeleteChildren, copyPosition);
        struct.key = this.key;
        struct.value = this.value;
        return struct;
      }
    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(ItemFormat.prototype.__proto__ || Object.getPrototypeOf(ItemFormat.prototype), '_fromBinary', this).call(this, y, decoder);
        this.key = decoder.readVarString();
        this.value = JSON.parse(decoder.readVarString());
        return missing;
      }
    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(ItemFormat.prototype.__proto__ || Object.getPrototypeOf(ItemFormat.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(this.key);
        encoder.writeVarString(JSON.stringify(this.value));
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('ItemFormat', this, 'key:' + JSON.stringify(this.key) + ',value:' + JSON.stringify(this.value));
      }
    }, {
      key: '_length',
      get: function get$$1() {
        return 1;
      }
    }, {
      key: '_countable',
      get: function get$$1() {
        return false;
      }
    }]);
    return ItemFormat;
  }(Item);

  /**
   * @private
   */
  function integrateItem(item, parent, y, left, right) {
    item._origin = left;
    item._left = left;
    item._right = right;
    item._right_origin = right;
    item._parent = parent;
    if (y !== null) {
      item._integrate(y);
    } else if (left === null) {
      parent._start = item;
    } else {
      left._right = item;
    }
  }

  /**
   * @private
   */
  function findNextPosition(currentAttributes, parent, left, right, count) {
    while (right !== null && count > 0) {
      switch (right.constructor) {
        case ItemEmbed:
        case ItemString:
          var rightLen = right._deleted ? 0 : right._length - 1;
          if (count <= rightLen) {
            right = right._splitAt(parent._y, count);
            left = right._left;
            return [left, right, currentAttributes];
          }
          if (right._deleted === false) {
            count -= right._length;
          }
          break;
        case ItemFormat:
          if (right._deleted === false) {
            updateCurrentAttributes(currentAttributes, right);
          }
          break;
      }
      left = right;
      right = right._right;
    }
    return [left, right, currentAttributes];
  }

  /**
   * @private
   */
  function findPosition(parent, index) {
    var currentAttributes = new Map();
    var left = null;
    var right = parent._start;
    return findNextPosition(currentAttributes, parent, left, right, index);
  }

  /**
   * Negate applied formats
   *
   * @private
   */
  function insertNegatedAttributes(y, parent, left, right, negatedAttributes) {
    // check if we really need to remove attributes
    while (right !== null && (right._deleted === true || right.constructor === ItemFormat && negatedAttributes.get(right.key) === right.value)) {
      if (right._deleted === false) {
        negatedAttributes.delete(right.key);
      }
      left = right;
      right = right._right;
    }
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = negatedAttributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = slicedToArray(_step.value, 2),
            key = _step$value[0],
            val = _step$value[1];

        var format = new ItemFormat();
        format.key = key;
        format.value = val;
        integrateItem(format, parent, y, left, right);
        left = format;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return [left, right];
  }

  /**
   * @private
   */
  function updateCurrentAttributes(currentAttributes, item) {
    var value = item.value;
    var key = item.key;
    if (value === null) {
      currentAttributes.delete(key);
    } else {
      currentAttributes.set(key, value);
    }
  }

  /**
   * @private
   */
  function minimizeAttributeChanges(left, right, currentAttributes, attributes) {
    // go right while attributes[right.key] === right.value (or right is deleted)
    while (true) {
      if (right === null) {
        break;
      } else if (right._deleted === true) ; else if (right.constructor === ItemFormat && (attributes[right.key] || null) === right.value) {
        // found a format, update currentAttributes and continue
        updateCurrentAttributes(currentAttributes, right);
      } else {
        break;
      }
      left = right;
      right = right._right;
    }
    return [left, right];
  }

  /**
   * @private
   */
  function insertAttributes(y, parent, left, right, attributes, currentAttributes) {
    var negatedAttributes = new Map();
    // insert format-start items
    for (var key in attributes) {
      var val = attributes[key];
      var currentVal = currentAttributes.get(key);
      if (currentVal !== val) {
        // save negated attribute (set null if currentVal undefined)
        negatedAttributes.set(key, currentVal || null);
        var format = new ItemFormat();
        format.key = key;
        format.value = val;
        integrateItem(format, parent, y, left, right);
        left = format;
      }
    }
    return [left, right, negatedAttributes];
  }

  /**
   * @private
   */
  function insertText(y, text, parent, left, right, currentAttributes, attributes) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = currentAttributes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _step2$value = slicedToArray(_step2.value, 1),
            key = _step2$value[0];

        if (attributes[key] === undefined) {
          attributes[key] = null;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var _minimizeAttributeCha = minimizeAttributeChanges(left, right, currentAttributes, attributes);

    var _minimizeAttributeCha2 = slicedToArray(_minimizeAttributeCha, 2);

    left = _minimizeAttributeCha2[0];
    right = _minimizeAttributeCha2[1];

    var negatedAttributes = void 0;

    // insert content
    var _insertAttributes = insertAttributes(y, parent, left, right, attributes, currentAttributes);

    var _insertAttributes2 = slicedToArray(_insertAttributes, 3);

    left = _insertAttributes2[0];
    right = _insertAttributes2[1];
    negatedAttributes = _insertAttributes2[2];
    var item = void 0;
    if (text.constructor === String) {
      item = new ItemString();
      item._content = text;
    } else {
      item = new ItemEmbed();
      item.embed = text;
    }
    integrateItem(item, parent, y, left, right);
    left = item;
    return insertNegatedAttributes(y, parent, left, right, negatedAttributes);
  }

  /**
   * @private
   */
  function formatText(y, length, parent, left, right, currentAttributes, attributes) {
    var _minimizeAttributeCha3 = minimizeAttributeChanges(left, right, currentAttributes, attributes);

    var _minimizeAttributeCha4 = slicedToArray(_minimizeAttributeCha3, 2);

    left = _minimizeAttributeCha4[0];
    right = _minimizeAttributeCha4[1];

    var negatedAttributes = void 0;

    // iterate until first non-format or null is found
    // delete all formats with attributes[format.key] != null
    var _insertAttributes3 = insertAttributes(y, parent, left, right, attributes, currentAttributes);

    var _insertAttributes4 = slicedToArray(_insertAttributes3, 3);

    left = _insertAttributes4[0];
    right = _insertAttributes4[1];
    negatedAttributes = _insertAttributes4[2];
    while (length > 0 && right !== null) {
      if (right._deleted === false) {
        switch (right.constructor) {
          case ItemFormat:
            var attr = attributes[right.key];
            if (attr !== undefined) {
              if (attr === right.value) {
                negatedAttributes.delete(right.key);
              } else {
                negatedAttributes.set(right.key, right.value);
              }
              right._delete(y);
            }
            updateCurrentAttributes(currentAttributes, right);
            break;
          case ItemEmbed:
          case ItemString:
            right._splitAt(y, length);
            length -= right._length;
            break;
        }
      }
      left = right;
      right = right._right;
    }
    return insertNegatedAttributes(y, parent, left, right, negatedAttributes);
  }

  /**
   * @private
   */
  function deleteText(y, length, parent, left, right, currentAttributes) {
    while (length > 0 && right !== null) {
      if (right._deleted === false) {
        switch (right.constructor) {
          case ItemFormat:
            updateCurrentAttributes(currentAttributes, right);
            break;
          case ItemEmbed:
          case ItemString:
            right._splitAt(y, length);
            length -= right._length;
            right._delete(y);
            break;
        }
      }
      left = right;
      right = right._right;
    }
    return [left, right];
  }

  // TODO: In the quill delta representation we should also use the format {ops:[..]}
  /**
   * The Quill Delta format represents changes on a text document with
   * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}
   *
   * @example
   *   {
   *     ops: [
   *       { insert: 'Gandalf', attributes: { bold: true } },
   *       { insert: ' the ' },
   *       { insert: 'Grey', attributes: { color: '#cccccc' } }
   *     ]
   *   }
   *
   * @typedef {Array<Object>} Delta
   */

  /**
    * Attributes that can be assigned to a selection of text.
    *
    * @example
    *   {
    *     bold: true,
    *     font-size: '40px'
    *   }
    *
    * @typedef {Object} TextAttributes
    */

  /**
   * Event that describes the changes on a YText type.
   *
   * @private
   */

  var YTextEvent = function (_YArrayEvent) {
    inherits(YTextEvent, _YArrayEvent);

    function YTextEvent(ytext, remote, transaction) {
      classCallCheck(this, YTextEvent);

      var _this = possibleConstructorReturn(this, (YTextEvent.__proto__ || Object.getPrototypeOf(YTextEvent)).call(this, ytext, remote, transaction));

      _this._delta = null;
      return _this;
    }
    // TODO: Should put this in a separate function. toDelta shouldn't be included
    //       in every Yjs distribution
    /**
     * Compute the changes in the delta format.
     *
     * @return {Delta} A {@link https://quilljs.com/docs/delta/|Quill Delta}) that
     *                 represents the changes on the document.
     *
     * @public
     */


    createClass(YTextEvent, [{
      key: 'delta',
      get: function get$$1() {
        var _this2 = this;

        if (this._delta === null) {
          var y = this.target._y;
          y.transact(function () {
            var item = _this2.target._start;
            var delta = [];
            var added = _this2.addedElements;
            var removed = _this2.removedElements;
            _this2._delta = delta;
            var action = null;
            var attributes = {}; // counts added or removed new attributes for retain
            var currentAttributes = new Map(); // saves all current attributes for insert
            var oldAttributes = new Map();
            var insert = '';
            var retain = 0;
            var deleteLen = 0;
            var addOp = function addOp() {
              if (action !== null) {
                var op = void 0;
                switch (action) {
                  case 'delete':
                    op = { delete: deleteLen };
                    deleteLen = 0;
                    break;
                  case 'insert':
                    op = { insert: insert };
                    if (currentAttributes.size > 0) {
                      op.attributes = {};
                      var _iteratorNormalCompletion3 = true;
                      var _didIteratorError3 = false;
                      var _iteratorError3 = undefined;

                      try {
                        for (var _iterator3 = currentAttributes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                          var _step3$value = slicedToArray(_step3.value, 2),
                              key = _step3$value[0],
                              value = _step3$value[1];

                          if (value !== null) {
                            op.attributes[key] = value;
                          }
                        }
                      } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                          }
                        } finally {
                          if (_didIteratorError3) {
                            throw _iteratorError3;
                          }
                        }
                      }
                    }
                    insert = '';
                    break;
                  case 'retain':
                    op = { retain: retain };
                    if (Object.keys(attributes).length > 0) {
                      op.attributes = {};
                      for (var key in attributes) {
                        op.attributes[key] = attributes[key];
                      }
                    }
                    retain = 0;
                    break;
                }
                delta.push(op);
                action = null;
              }
            };
            while (item !== null) {
              switch (item.constructor) {
                case ItemEmbed:
                  if (added.has(item)) {
                    addOp();
                    action = 'insert';
                    insert = item.embed;
                    addOp();
                  } else if (removed.has(item)) {
                    if (action !== 'delete') {
                      addOp();
                      action = 'delete';
                    }
                    deleteLen += 1;
                  } else if (item._deleted === false) {
                    if (action !== 'retain') {
                      addOp();
                      action = 'retain';
                    }
                    retain += 1;
                  }
                  break;
                case ItemString:
                  if (added.has(item)) {
                    if (action !== 'insert') {
                      addOp();
                      action = 'insert';
                    }
                    insert += item._content;
                  } else if (removed.has(item)) {
                    if (action !== 'delete') {
                      addOp();
                      action = 'delete';
                    }
                    deleteLen += item._length;
                  } else if (item._deleted === false) {
                    if (action !== 'retain') {
                      addOp();
                      action = 'retain';
                    }
                    retain += item._length;
                  }
                  break;
                case ItemFormat:
                  if (added.has(item)) {
                    var curVal = currentAttributes.get(item.key) || null;
                    if (curVal !== item.value) {
                      if (action === 'retain') {
                        addOp();
                      }
                      if (item.value === (oldAttributes.get(item.key) || null)) {
                        delete attributes[item.key];
                      } else {
                        attributes[item.key] = item.value;
                      }
                    } else {
                      item._delete(y);
                    }
                  } else if (removed.has(item)) {
                    oldAttributes.set(item.key, item.value);
                    var _curVal = currentAttributes.get(item.key) || null;
                    if (_curVal !== item.value) {
                      if (action === 'retain') {
                        addOp();
                      }
                      attributes[item.key] = _curVal;
                    }
                  } else if (item._deleted === false) {
                    oldAttributes.set(item.key, item.value);
                    var attr = attributes[item.key];
                    if (attr !== undefined) {
                      if (attr !== item.value) {
                        if (action === 'retain') {
                          addOp();
                        }
                        if (item.value === null) {
                          attributes[item.key] = item.value;
                        } else {
                          delete attributes[item.key];
                        }
                      } else {
                        item._delete(y);
                      }
                    }
                  }
                  if (item._deleted === false) {
                    if (action === 'insert') {
                      addOp();
                    }
                    updateCurrentAttributes(currentAttributes, item);
                  }
                  break;
              }
              item = item._right;
            }
            addOp();
            while (_this2._delta.length > 0) {
              var lastOp = _this2._delta[_this2._delta.length - 1];
              if (lastOp.retain !== undefined && lastOp.attributes === undefined) {
                // retain delta's if they don't assign attributes
                _this2._delta.pop();
              } else {
                break;
              }
            }
          });
        }
        return this._delta;
      }
    }]);
    return YTextEvent;
  }(YArrayEvent);

  /**
   * Type that represents text with formatting information.
   *
   * This type replaces y-richtext as this implementation is able to handle
   * block formats (format information on a paragraph), embeds (complex elements
   * like pictures and videos), and text formats (**bold**, *italic*).
   *
   * @param {String} string The initial value of the YText.
   */


  var YText = function (_YArray) {
    inherits(YText, _YArray);

    function YText(string) {
      classCallCheck(this, YText);

      var _this3 = possibleConstructorReturn(this, (YText.__proto__ || Object.getPrototypeOf(YText)).call(this));

      if (typeof string === 'string') {
        var start = new ItemString();
        start._parent = _this3;
        start._content = string;
        _this3._start = start;
      }
      return _this3;
    }

    /**
     * @private
     * Creates YMap Event and calls observers.
     */


    createClass(YText, [{
      key: '_callObserver',
      value: function _callObserver(transaction, parentSubs, remote) {
        this._callEventHandler(transaction, new YTextEvent(this, remote, transaction));
      }

      /**
       * Returns the unformatted string representation of this YText type.
       *
       * @public
       */

    }, {
      key: 'toString',
      value: function toString() {
        var str = '';
        var n = this._start;
        while (n !== null) {
          if (!n._deleted && n._countable) {
            str += n._content;
          }
          n = n._right;
        }
        return str;
      }

      /**
       * Apply a {@link Delta} on this shared YText type.
       *
       * @param {Delta} delta The changes to apply on this element.
       *
       * @public
       */

    }, {
      key: 'applyDelta',
      value: function applyDelta(delta) {
        var _this4 = this;

        this._transact(function (y) {
          var left = null;
          var right = _this4._start;
          var currentAttributes = new Map();
          for (var i = 0; i < delta.length; i++) {
            var op = delta[i];
            if (op.insert !== undefined) {
              var _insertText = insertText(y, op.insert, _this4, left, right, currentAttributes, op.attributes || {});

              var _insertText2 = slicedToArray(_insertText, 2);

              left = _insertText2[0];
              right = _insertText2[1];
            } else if (op.retain !== undefined) {
              var _formatText = formatText(y, op.retain, _this4, left, right, currentAttributes, op.attributes || {});

              var _formatText2 = slicedToArray(_formatText, 2);

              left = _formatText2[0];
              right = _formatText2[1];
            } else if (op.delete !== undefined) {
              var _deleteText = deleteText(y, op.delete, _this4, left, right, currentAttributes);

              var _deleteText2 = slicedToArray(_deleteText, 2);

              left = _deleteText2[0];
              right = _deleteText2[1];
            }
          }
        });
      }

      /**
       * Returns the Delta representation of this YText type.
       *
       * @return {Delta} The Delta representation of this type.
       *
       * @public
       */

    }, {
      key: 'toDelta',
      value: function toDelta() {
        var ops = [];
        var currentAttributes = new Map();
        var str = '';
        var n = this._start;
        function packStr() {
          if (str.length > 0) {
            // pack str with attributes to ops
            var attributes = {};
            var addAttributes = false;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = currentAttributes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _step4$value = slicedToArray(_step4.value, 2),
                    key = _step4$value[0],
                    value = _step4$value[1];

                addAttributes = true;
                attributes[key] = value;
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            var op = { insert: str };
            if (addAttributes) {
              op.attributes = attributes;
            }
            ops.push(op);
            str = '';
          }
        }
        while (n !== null) {
          if (!n._deleted) {
            switch (n.constructor) {
              case ItemString:
                str += n._content;
                break;
              case ItemFormat:
                packStr();
                updateCurrentAttributes(currentAttributes, n);
                break;
            }
          }
          n = n._right;
        }
        packStr();
        return ops;
      }

      /**
       * Insert text at a given index.
       *
       * @param {Integer} index The index at which to start inserting.
       * @param {String} text The text to insert at the specified position.
       * @param {TextAttributes} attributes Optionally define some formatting
       *                                    information to apply on the inserted
       *                                    Text.
       *
       * @public
       */

    }, {
      key: 'insert',
      value: function insert(index, text) {
        var _this5 = this;

        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (text.length <= 0) {
          return;
        }
        this._transact(function (y) {
          var _findPosition = findPosition(_this5, index),
              _findPosition2 = slicedToArray(_findPosition, 3),
              left = _findPosition2[0],
              right = _findPosition2[1],
              currentAttributes = _findPosition2[2];

          insertText(y, text, _this5, left, right, currentAttributes, attributes);
        });
      }

      /**
       * Inserts an embed at a index.
       *
       * @param {Integer} index The index to insert the embed at.
       * @param {Object} embed The Object that represents the embed.
       * @param {TextAttributes} attributes Attribute information to apply on the
       *                                    embed
       *
       * @public
       */

    }, {
      key: 'insertEmbed',
      value: function insertEmbed(index, embed) {
        var _this6 = this;

        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (embed.constructor !== Object) {
          throw new Error('Embed must be an Object');
        }
        this._transact(function (y) {
          var _findPosition3 = findPosition(_this6, index),
              _findPosition4 = slicedToArray(_findPosition3, 3),
              left = _findPosition4[0],
              right = _findPosition4[1],
              currentAttributes = _findPosition4[2];

          insertText(y, embed, _this6, left, right, currentAttributes, attributes);
        });
      }

      /**
       * Deletes text starting from an index.
       *
       * @param {Integer} index Index at which to start deleting.
       * @param {Integer} length The number of characters to remove. Defaults to 1.
       *
       * @public
       */

    }, {
      key: 'delete',
      value: function _delete(index, length) {
        var _this7 = this;

        if (length === 0) {
          return;
        }
        this._transact(function (y) {
          var _findPosition5 = findPosition(_this7, index),
              _findPosition6 = slicedToArray(_findPosition5, 3),
              left = _findPosition6[0],
              right = _findPosition6[1],
              currentAttributes = _findPosition6[2];

          deleteText(y, length, _this7, left, right, currentAttributes);
        });
      }

      /**
       * Assigns properties to a range of text.
       *
       * @param {Integer} index The position where to start formatting.
       * @param {Integer} length The amount of characters to assign properties to.
       * @param {TextAttributes} attributes Attribute information to apply on the
       *                                    text.
       *
       * @public
       */

    }, {
      key: 'format',
      value: function format(index, length, attributes) {
        var _this8 = this;

        this._transact(function (y) {
          var _findPosition7 = findPosition(_this8, index),
              _findPosition8 = slicedToArray(_findPosition7, 3),
              left = _findPosition8[0],
              right = _findPosition8[1],
              currentAttributes = _findPosition8[2];

          if (right === null) {
            return;
          }
          formatText(y, length, _this8, left, right, currentAttributes, attributes);
        });
      }
      // TODO: De-duplicate code. The following code is in every type.
      /**
       * Transform this YText to a readable format.
       * Useful for logging as all Items implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('YText', this);
      }
    }]);
    return YText;
  }(YArray);

  /**
   * You can manage binding to a custom type with YXmlHook.
   *
   * @public
   */

  var YXmlHook = function (_YMap) {
    inherits(YXmlHook, _YMap);

    /**
     * @param {String} hookName nodeName of the Dom Node.
     */
    function YXmlHook(hookName) {
      classCallCheck(this, YXmlHook);

      var _this = possibleConstructorReturn(this, (YXmlHook.__proto__ || Object.getPrototypeOf(YXmlHook)).call(this));

      _this.hookName = null;
      if (hookName !== undefined) {
        _this.hookName = hookName;
      }
      return _this;
    }

    /**
     * Creates an Item with the same effect as this Item (without position effect)
     *
     * @private
     */


    createClass(YXmlHook, [{
      key: '_copy',
      value: function _copy() {
        var struct = get(YXmlHook.prototype.__proto__ || Object.getPrototypeOf(YXmlHook.prototype), '_copy', this).call(this);
        struct.hookName = this.hookName;
        return struct;
      }

      /**
       * Creates a Dom Element that mirrors this YXmlElement.
       *
       * @param {Document} [_document=document] The document object (you must define
       *                                        this when calling this method in
       *                                        nodejs)
       * @param {Object<key:hookDefinition>} [hooks] Optional property to customize how hooks
       *                                             are presented in the DOM
       * @param {DomBinding} [binding] You should not set this property. This is
       *                               used if DomBinding wants to create a
       *                               association to the created DOM type
       * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
       *
       * @public
       */

    }, {
      key: 'toDom',
      value: function toDom() {

        var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var binding = arguments[2];

        var hook = hooks[this.hookName];
        var dom = void 0;
        if (hook !== undefined) {
          dom = hook.createDom(this);
        } else {
          dom = document.createElement(this.hookName);
        }
        dom.setAttribute('data-yjs-hook', this.hookName);
        createAssociation(binding, dom, this);
        return dom;
      }

      /**
       * Read the next Item in a Decoder and fill this Item with the read data.
       *
       * This is called when data is received from a remote peer.
       *
       * @param {Y} y The Yjs instance that this Item belongs to.
       * @param {BinaryDecoder} decoder The decoder object to read data from.
       *
       * @private
       */

    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(YXmlHook.prototype.__proto__ || Object.getPrototypeOf(YXmlHook.prototype), '_fromBinary', this).call(this, y, decoder);
        this.hookName = decoder.readVarString();
        return missing;
      }

      /**
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       *
       * @private
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(YXmlHook.prototype.__proto__ || Object.getPrototypeOf(YXmlHook.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(this.hookName);
      }

      /**
       * Integrate this type into the Yjs instance.
       *
       * * Save this struct in the os
       * * This type is sent to other client
       * * Observer functions are fired
       *
       * @param {Y} y The Yjs instance
       *
       * @private
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        if (this.hookName === null) {
          throw new Error('hookName must be defined!');
        }
        get(YXmlHook.prototype.__proto__ || Object.getPrototypeOf(YXmlHook.prototype), '_integrate', this).call(this, y);
      }
    }]);
    return YXmlHook;
  }(YMap);

  /**
   * Define the elements to which a set of CSS queries apply.
   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}
   *
   * @example
   *   query = '.classSelector'
   *   query = 'nodeSelector'
   *   query = '#idSelector'
   *
   * @typedef {string} CSS_Selector
   */

  /**
   * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a
   * position within them.
   *
   * Can be created with {@link YXmlFragment#createTreeWalker}
   *
   * @public
   */

  var YXmlTreeWalker = function () {
    function YXmlTreeWalker(root, f) {
      classCallCheck(this, YXmlTreeWalker);

      this._filter = f || function () {
        return true;
      };
      this._root = root;
      this._currentNode = root;
      this._firstCall = true;
    }

    createClass(YXmlTreeWalker, [{
      key: Symbol.iterator,
      value: function value() {
        return this;
      }
      /**
       * Get the next node.
       *
       * @return {YXmlElement} The next node.
       *
       * @public
       */

    }, {
      key: 'next',
      value: function next() {
        var n = this._currentNode;
        if (this._firstCall) {
          this._firstCall = false;
          if (!n._deleted && this._filter(n)) {
            return { value: n, done: false };
          }
        }
        do {
          if (!n._deleted && (n.constructor === YXmlFragment._YXmlElement || n.constructor === YXmlFragment) && n._start !== null) {
            // walk down in the tree
            n = n._start;
          } else {
            // walk right or up in the tree
            while (n !== this._root) {
              if (n._right !== null) {
                n = n._right;
                break;
              }
              n = n._parent;
            }
            if (n === this._root) {
              n = null;
            }
          }
          if (n === this._root) {
            break;
          }
        } while (n !== null && (n._deleted || !this._filter(n)));
        this._currentNode = n;
        if (n === null) {
          return { done: true };
        } else {
          return { value: n, done: false };
        }
      }
    }]);
    return YXmlTreeWalker;
  }();

  /**
   * An Event that describes changes on a YXml Element or Yxml Fragment
   *
   * @protected
   */

  var YXmlEvent = function (_YEvent) {
    inherits(YXmlEvent, _YEvent);

    /**
     * @param {YType} target The target on which the event is created.
     * @param {Set} subs The set of changed attributes. `null` is included if the
     *                   child list changed.
     * @param {Boolean} remote Whether this change was created by a remote peer.
     * @param {Transaction} transaction The transaction instance with wich the
     *                                  change was created.
     */
    function YXmlEvent(target, subs, remote, transaction) {
      classCallCheck(this, YXmlEvent);

      /**
       * The transaction instance for the computed change.
       * @type {Transaction}
       */
      var _this = possibleConstructorReturn(this, (YXmlEvent.__proto__ || Object.getPrototypeOf(YXmlEvent)).call(this, target));

      _this._transaction = transaction;
      /**
       * Whether the children changed.
       * @type {Boolean}
       */
      _this.childListChanged = false;
      /**
       * Set of all changed attributes.
       * @type {Set}
       */
      _this.attributesChanged = new Set();
      /**
       * Whether this change was created by a remote peer.
       * @type {Boolean}
       */
      _this.remote = remote;
      subs.forEach(function (sub) {
        if (sub === null) {
          _this.childListChanged = true;
        } else {
          _this.attributesChanged.add(sub);
        }
      });
      return _this;
    }

    return YXmlEvent;
  }(YEvent);

  /**
   * Dom filter function.
   *
   * @callback domFilter
   * @param {string} nodeName The nodeName of the element
   * @param {Map} attributes The map of attributes.
   * @return {boolean} Whether to include the Dom node in the YXmlElement.
   */

  /**
   * Define the elements to which a set of CSS queries apply.
   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}
   *
   * @example
   *   query = '.classSelector'
   *   query = 'nodeSelector'
   *   query = '#idSelector'
   *
   * @typedef {string} CSS_Selector
   */

  /**
   * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.
   * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a
   * nodeName and it does not have attributes. Though it can be bound to a DOM
   * element - in this case the attributes and the nodeName are not shared.
   *
   * @public
   */

  var YXmlFragment = function (_YArray) {
    inherits(YXmlFragment, _YArray);

    function YXmlFragment() {
      classCallCheck(this, YXmlFragment);
      return possibleConstructorReturn(this, (YXmlFragment.__proto__ || Object.getPrototypeOf(YXmlFragment)).apply(this, arguments));
    }

    createClass(YXmlFragment, [{
      key: 'createTreeWalker',

      /**
       * Create a subtree of childNodes.
       *
       * @example
       * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')
       * for (let node in walker) {
       *   // `node` is a div node
       *   nop(node)
       * }
       *
       * @param {Function} filter Function that is called on each child element and
       *                          returns a Boolean indicating whether the child
       *                          is to be included in the subtree.
       * @return {TreeWalker} A subtree and a position within it.
       *
       * @public
       */
      value: function createTreeWalker(filter) {
        return new YXmlTreeWalker(this, filter);
      }

      /**
       * Returns the first YXmlElement that matches the query.
       * Similar to DOM's {@link querySelector}.
       *
       * Query support:
       *   - tagname
       * TODO:
       *   - id
       *   - attribute
       *
       * @param {CSS_Selector} query The query on the children.
       * @return {?YXmlElement} The first element that matches the query or null.
       *
       * @public
       */

    }, {
      key: 'querySelector',
      value: function querySelector(query) {
        query = query.toUpperCase();
        var iterator = new YXmlTreeWalker(this, function (element) {
          return element.nodeName === query;
        });
        var next = iterator.next();
        if (next.done) {
          return null;
        } else {
          return next.value;
        }
      }

      /**
       * Returns all YXmlElements that match the query.
       * Similar to Dom's {@link querySelectorAll}.
       *
       * TODO: Does not yet support all queries. Currently only query by tagName.
       *
       * @param {CSS_Selector} query The query on the children
       * @return {Array<YXmlElement>} The elements that match this query.
       *
       * @public
       */

    }, {
      key: 'querySelectorAll',
      value: function querySelectorAll(query) {
        query = query.toUpperCase();
        return Array.from(new YXmlTreeWalker(this, function (element) {
          return element.nodeName === query;
        }));
      }

      /**
       * Creates YArray Event and calls observers.
       *
       * @private
       */

    }, {
      key: '_callObserver',
      value: function _callObserver(transaction, parentSubs, remote) {
        this._callEventHandler(transaction, new YXmlEvent(this, parentSubs, remote, transaction));
      }

      /**
       * Get the string representation of all the children of this YXmlFragment.
       *
       * @return {string} The string representation of all children.
       */

    }, {
      key: 'toString',
      value: function toString() {
        return this.map(function (xml) {
          return xml.toString();
        }).join('');
      }

      /**
       * @private
       * Unbind from Dom and mark this Item as deleted.
       *
       * @param {Y} y The Yjs instance
       * @param {boolean} createDelete Whether to propagate a message that this
       *                               Type was deleted.
       * @param {boolean} [gcChildren=y._hasUndoManager===false] Whether to garbage
       *                                         collect the children of this type.
       *
       * @private
       */

    }, {
      key: '_delete',
      value: function _delete(y, createDelete, gcChildren) {
        get(YXmlFragment.prototype.__proto__ || Object.getPrototypeOf(YXmlFragment.prototype), '_delete', this).call(this, y, createDelete, gcChildren);
      }

      /**
       * Creates a Dom Element that mirrors this YXmlElement.
       *
       * @param {Document} [_document=document] The document object (you must define
       *                                        this when calling this method in
       *                                        nodejs)
       * @param {Object<key:hookDefinition>} [hooks={}] Optional property to customize how hooks
       *                                             are presented in the DOM
       * @param {DomBinding} [binding] You should not set this property. This is
       *                               used if DomBinding wants to create a
       *                               association to the created DOM type
       * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
       *
       * @public
       */

    }, {
      key: 'toDom',
      value: function toDom() {
        var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

        var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var binding = arguments[2];

        var fragment = _document.createDocumentFragment();
        createAssociation(binding, fragment, this);
        this.forEach(function (xmlType) {
          fragment.insertBefore(xmlType.toDom(_document, hooks, binding), null);
        });
        return fragment;
      }
      /**
       * Transform this YXml Type to a readable format.
       * Useful for logging as all Items and Delete implement this method.
       *
       * @private
       */

    }, {
      key: '_logString',
      value: function _logString() {
        return logItemHelper('YXml', this);
      }
    }]);
    return YXmlFragment;
  }(YArray);

  /**
   * An YXmlElement imitates the behavior of a
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.
   *
   * * An YXmlElement has attributes (key value pairs)
   * * An YXmlElement has childElements that must inherit from YXmlElement
   *
   * @param {String} nodeName Node name
   */

  var YXmlElement = function (_YXmlFragment) {
    inherits(YXmlElement, _YXmlFragment);

    function YXmlElement() {
      var nodeName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'UNDEFINED';
      classCallCheck(this, YXmlElement);

      var _this = possibleConstructorReturn(this, (YXmlElement.__proto__ || Object.getPrototypeOf(YXmlElement)).call(this));

      _this.nodeName = nodeName.toUpperCase();
      return _this;
    }

    /**
     * @private
     * Creates an Item with the same effect as this Item (without position effect)
     */


    createClass(YXmlElement, [{
      key: '_copy',
      value: function _copy() {
        var struct = get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), '_copy', this).call(this);
        struct.nodeName = this.nodeName;
        return struct;
      }

      /**
       * @private
       * Read the next Item in a Decoder and fill this Item with the read data.
       *
       * This is called when data is received from a remote peer.
       *
       * @param {Y} y The Yjs instance that this Item belongs to.
       * @param {BinaryDecoder} decoder The decoder object to read data from.
       */

    }, {
      key: '_fromBinary',
      value: function _fromBinary(y, decoder) {
        var missing = get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), '_fromBinary', this).call(this, y, decoder);
        this.nodeName = decoder.readVarString();
        return missing;
      }

      /**
       * Transform the properties of this type to binary and write it to an
       * BinaryEncoder.
       *
       * This is called when this Item is sent to a remote peer.
       *
       * @param {BinaryEncoder} encoder The encoder to write data to.
       *
       * @private
       */

    }, {
      key: '_toBinary',
      value: function _toBinary(encoder) {
        get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), '_toBinary', this).call(this, encoder);
        encoder.writeVarString(this.nodeName);
      }

      /**
       * Integrates this Item into the shared structure.
       *
       * This method actually applies the change to the Yjs instance. In case of
       * Item it connects _left and _right to this Item and calls the
       * {@link Item#beforeChange} method.
       *
       * * Checks for nodeName
       * * Sets domFilter
       *
       * @param {Y} y The Yjs instance
       *
       * @private
       */

    }, {
      key: '_integrate',
      value: function _integrate(y) {
        if (this.nodeName === null) {
          throw new Error('nodeName must be defined!');
        }
        get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), '_integrate', this).call(this, y);
      }

      /**
       * Returns the string representation of this YXmlElement.
       * The attributes are ordered by attribute-name, so you can easily use this
       * method to compare YXmlElements
       *
       * @return {String} The string representation of this type.
       *
       * @public
       */

    }, {
      key: 'toString',
      value: function toString() {
        var attrs = this.getAttributes();
        var stringBuilder = [];
        var keys = [];
        for (var key in attrs) {
          keys.push(key);
        }
        keys.sort();
        var keysLen = keys.length;
        for (var i = 0; i < keysLen; i++) {
          var _key = keys[i];
          stringBuilder.push(_key + '="' + attrs[_key] + '"');
        }
        var nodeName = this.nodeName.toLocaleLowerCase();
        var attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';
        return '<' + nodeName + attrsString + '>' + get(YXmlElement.prototype.__proto__ || Object.getPrototypeOf(YXmlElement.prototype), 'toString', this).call(this) + '</' + nodeName + '>';
      }

      /**
       * Removes an attribute from this YXmlElement.
       *
       * @param {String} attributeName The attribute name that is to be removed.
       *
       * @public
       */

    }, {
      key: 'removeAttribute',
      value: function removeAttribute(attributeName) {
        return YMap.prototype.delete.call(this, attributeName);
      }

      /**
       * Sets or updates an attribute.
       *
       * @param {String} attributeName The attribute name that is to be set.
       * @param {String} attributeValue The attribute value that is to be set.
       *
       * @public
       */

    }, {
      key: 'setAttribute',
      value: function setAttribute(attributeName, attributeValue) {
        return YMap.prototype.set.call(this, attributeName, attributeValue);
      }

      /**
       * Returns an attribute value that belongs to the attribute name.
       *
       * @param {String} attributeName The attribute name that identifies the
       *                               queried value.
       * @return {String} The queried attribute value.
       *
       * @public
       */

    }, {
      key: 'getAttribute',
      value: function getAttribute(attributeName) {
        return YMap.prototype.get.call(this, attributeName);
      }

      /**
       * Returns all attribute name/value pairs in a JSON Object.
       *
       * @return {Object} A JSON Object that describes the attributes.
       *
       * @public
       */

    }, {
      key: 'getAttributes',
      value: function getAttributes() {
        var obj = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._map[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = slicedToArray(_step.value, 2),
                key = _step$value[0],
                value = _step$value[1];

            if (!value._deleted) {
              obj[key] = value._content[0];
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return obj;
      }
      // TODO: outsource the binding property.
      /**
       * Creates a Dom Element that mirrors this YXmlElement.
       *
       * @param {Document} [_document=document] The document object (you must define
       *                                        this when calling this method in
       *                                        nodejs)
       * @param {Object<key:hookDefinition>} [hooks={}] Optional property to customize how hooks
       *                                             are presented in the DOM
       * @param {DomBinding} [binding] You should not set this property. This is
       *                               used if DomBinding wants to create a
       *                               association to the created DOM type.
       * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
       *
       * @public
       */

    }, {
      key: 'toDom',
      value: function toDom() {
        var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

        var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var binding = arguments[2];

        var dom = _document.createElement(this.nodeName);
        var attrs = this.getAttributes();
        for (var key in attrs) {
          dom.setAttribute(key, attrs[key]);
        }
        this.forEach(function (yxml) {
          dom.appendChild(yxml.toDom(_document, hooks, binding));
        });
        createAssociation(binding, dom, this);
        return dom;
      }
    }]);
    return YXmlElement;
  }(YXmlFragment);


  YXmlFragment._YXmlElement = YXmlElement;

  /**
   * Check if `parent` is a parent of `child`.
   *
   * @param {Type} parent
   * @param {Type} child
   * @return {Boolean} Whether `parent` is a parent of `child`.
   *
   * @public
   */
  function isParentOf(parent, child) {
    child = child._parent;
    while (child !== null) {
      if (child === parent) {
        return true;
      }
      child = child._parent;
    }
    return false;
  }

  /**
   * Default filter method (does nothing).
   *
   * @param {String} nodeName The nodeName of the element
   * @param {Map} attrs Map of key-value pairs that are attributes of the node.
   * @return {Map | null} The allowed attributes or null, if the element should be
   *                      filtered.
   */
  function defaultFilter(nodeName, attrs) {
    // TODO: implement basic filter that filters out dangerous properties!
    return attrs;
  }

  /**
   *
   */
  function filterDomAttributes(dom, filter) {
    var attrs = new Map();
    for (var i = dom.attributes.length - 1; i >= 0; i--) {
      var attr = dom.attributes[i];
      attrs.set(attr.name, attr.value);
    }
    return filter(dom.nodeName, attrs);
  }

  /**
   * Applies a filter on a type.
   *
   * @param {Y} y The Yjs instance.
   * @param {DomBinding} binding The DOM binding instance that has the dom filter.
   * @param {YXmlElement | YXmlFragment } type The type to apply the filter to.
   *
   * @private
   */
  function applyFilterOnType(y, binding, type) {
    if (isParentOf(binding.type, type)) {
      var nodeName = type.nodeName;
      var attributes = new Map();
      if (type.getAttributes !== undefined) {
        var attrs = type.getAttributes();
        for (var key in attrs) {
          attributes.set(key, attrs[key]);
        }
      }
      var filteredAttributes = binding.filter(nodeName, new Map(attributes));
      if (filteredAttributes === null) {
        type._delete(y);
      } else {
        // iterate original attributes
        attributes.forEach(function (value, key) {
          // delete all attributes that are not in filteredAttributes
          if (filteredAttributes.has(key) === false) {
            type.removeAttribute(key);
          }
        });
      }
    }
  }

  /**
   * Creates a Yjs type (YXml) based on the contents of a DOM Element.
   *
   * @param {Element|TextNode} element The DOM Element
   * @param {?Document} _document Optional. Provide the global document object
   * @param {Hooks} [hooks = {}] Optional. Set of Yjs Hooks
   * @param {Filter} [filter=defaultFilter] Optional. Dom element filter
   * @param {?DomBinding} binding Warning: This property is for internal use only!
   * @return {YXmlElement | YXmlText}
   */
  function domToType(element) {
    var _document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

    var hooks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var filter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultFilter;
    var binding = arguments[4];

    var type = void 0;
    switch (element.nodeType) {
      case _document.ELEMENT_NODE:
        var hookName = null;
        var hook = void 0;
        // configure `hookName !== undefined` if element is a hook.
        if (element.hasAttribute('data-yjs-hook')) {
          hookName = element.getAttribute('data-yjs-hook');
          hook = hooks[hookName];
          if (hook === undefined) {
            console.error('Unknown hook "' + hookName + '". Deleting yjsHook dataset property.');
            delete element.removeAttribute('data-yjs-hook');
            hookName = null;
          }
        }
        if (hookName === null) {
          // Not a hook
          var attrs = filterDomAttributes(element, filter);
          if (attrs === null) {
            type = false;
          } else {
            type = new YXmlElement(element.nodeName);
            attrs.forEach(function (val, key) {
              type.setAttribute(key, val);
            });
            type.insert(0, domsToTypes(element.childNodes, document, hooks, filter, binding));
          }
        } else {
          // Is a hook
          type = new YXmlHook(hookName);
          hook.fillType(element, type);
        }
        break;
      case _document.TEXT_NODE:
        type = new YXmlText();
        type.insert(0, element.nodeValue);
        break;
      default:
        throw new Error('Can\'t transform this node type to a YXml type!');
    }
    createAssociation(binding, element, type);
    return type;
  }

  /**
   * Iterates items until an undeleted item is found.
   *
   * @private
   */
  function iterateUntilUndeleted(item) {
    while (item !== null && item._deleted) {
      item = item._right;
    }
    return item;
  }

  /**
   * Removes an association (the information that a DOM element belongs to a
   * type).
   *
   * @param {DomBinding} domBinding The binding object
   * @param {Element} dom The dom that is to be associated with type
   * @param {YXmlElement|YXmlHook} type The type that is to be associated with dom
   *
   */
  function removeAssociation(domBinding, dom, type) {
    domBinding.domToType.delete(dom);
    domBinding.typeToDom.delete(type);
  }

  /**
   * Creates an association (the information that a DOM element belongs to a
   * type).
   *
   * @param {DomBinding} domBinding The binding object
   * @param {Element} dom The dom that is to be associated with type
   * @param {YXmlElement|YXmlHook} type The type that is to be associated with dom
   *
   */
  function createAssociation(domBinding, dom, type) {
    if (domBinding !== undefined) {
      domBinding.domToType.set(dom, type);
      domBinding.typeToDom.set(type, dom);
    }
  }

  /**
   * If oldDom is associated with a type, associate newDom with the type and
   * forget about oldDom. If oldDom is not associated with any type, nothing happens.
   *
   * @param {DomBinding} domBinding The binding object
   * @param {Element} oldDom The existing dom
   * @param {Element} newDom The new dom object
   */
  function switchAssociation(domBinding, oldDom, newDom) {
    if (domBinding !== undefined) {
      var type = domBinding.domToType.get(oldDom);
      if (type !== undefined) {
        removeAssociation(domBinding, oldDom, type);
        createAssociation(domBinding, newDom, type);
      }
    }
  }

  /**
   * Insert Dom Elements after one of the children of this YXmlFragment.
   * The Dom elements will be bound to a new YXmlElement and inserted at the
   * specified position.
   *
   * @param {YXmlElement} type The type in which to insert DOM elements.
   * @param {YXmlElement|null} prev The reference node. New YxmlElements are
   *                           inserted after this node. Set null to insert at
   *                           the beginning.
   * @param {Array<Element>} doms The Dom elements to insert.
   * @param {?Document} _document Optional. Provide the global document object.
   * @param {DomBinding} binding The dom binding
   * @return {Array<YXmlElement>} The YxmlElements that are inserted.
   *
   * @private
   */
  function insertDomElementsAfter(type, prev, doms, _document, binding) {
    var types = domsToTypes(doms, _document, binding.opts.hooks, binding.filter, binding);
    return type.insertAfter(prev, types);
  }

  function domsToTypes(doms, _document, hooks, filter, binding) {
    var types = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = doms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var dom = _step.value;

        var t = domToType(dom, _document, hooks, filter, binding);
        if (t !== false) {
          types.push(t);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return types;
  }

  /**
   * @private
   */
  function insertNodeHelper(yxml, prevExpectedNode, child, _document, binding) {
    var insertedNodes = insertDomElementsAfter(yxml, prevExpectedNode, [child], _document, binding);
    if (insertedNodes.length > 0) {
      return insertedNodes[0];
    } else {
      return prevExpectedNode;
    }
  }

  /**
   * Remove children until `elem` is found.
   *
   * @param {Element} parent The parent of `elem` and `currentChild`.
   * @param {Element} currentChild Start removing elements with `currentChild`. If
   *                               `currentChild` is `elem` it won't be removed.
   * @param {Element|null} elem The elemnt to look for.
   *
   * @private
   */
  function removeDomChildrenUntilElementFound(parent, currentChild, elem) {
    while (currentChild !== elem) {
      var del = currentChild;
      currentChild = currentChild.nextSibling;
      parent.removeChild(del);
    }
  }

  /**
   * Represents text in a Dom Element. In the future this type will also handle
   * simple formatting information like bold and italic.
   *
   * @param {String} arg1 Initial value.
   */

  var YXmlText = function (_YText) {
    inherits(YXmlText, _YText);

    function YXmlText() {
      classCallCheck(this, YXmlText);
      return possibleConstructorReturn(this, (YXmlText.__proto__ || Object.getPrototypeOf(YXmlText)).apply(this, arguments));
    }

    createClass(YXmlText, [{
      key: 'toDom',

      /**
       * Creates a Dom Element that mirrors this YXmlText.
       *
       * @param {Document} [_document=document] The document object (you must define
       *                                        this when calling this method in
       *                                        nodejs)
       * @param {Object<key:hookDefinition>} [hooks] Optional property to customize how hooks
       *                                             are presented in the DOM
       * @param {DomBinding} [binding] You should not set this property. This is
       *                               used if DomBinding wants to create a
       *                               association to the created DOM type.
       * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
       *
       * @public
       */
      value: function toDom() {
        var _document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;
        var binding = arguments[2];

        var dom = _document.createTextNode(this.toString());
        createAssociation(binding, dom, this);
        return dom;
      }

      /**
       * Mark this Item as deleted.
       *
       * @param {Y} y The Yjs instance
       * @param {boolean} createDelete Whether to propagate a message that this
       *                               Type was deleted.
       * @param {boolean} [gcChildren=y._hasUndoManager===false] Whether to garbage
       *                                         collect the children of this type.
       *
       * @private
       */

    }, {
      key: '_delete',
      value: function _delete(y, createDelete, gcChildren) {
        get(YXmlText.prototype.__proto__ || Object.getPrototypeOf(YXmlText.prototype), '_delete', this).call(this, y, createDelete, gcChildren);
      }
    }]);
    return YXmlText;
  }(YText);

  var structs = new Map();
  var references = new Map();

  /**
   * Register a new Yjs types. The same type must be defined with the same
   * reference on all clients!
   *
   * @param {Number} reference
   * @param {class} structConstructor
   *
   * @public
   */
  function registerStruct(reference, structConstructor) {
    structs.set(reference, structConstructor);
    references.set(structConstructor, reference);
  }

  /**
   * @private
   */
  function getStruct(reference) {
    return structs.get(reference);
  }

  /**
   * @private
   */
  function getStructReference(typeConstructor) {
    return references.get(typeConstructor);
  }

  // TODO: reorder (Item* should have low numbers)
  registerStruct(0, ItemJSON);
  registerStruct(1, ItemString);
  registerStruct(10, ItemFormat);
  registerStruct(11, ItemEmbed);
  registerStruct(2, Delete);

  registerStruct(3, YArray);
  registerStruct(4, YMap);
  registerStruct(5, YText);
  registerStruct(6, YXmlFragment);
  registerStruct(7, YXmlElement);
  registerStruct(8, YXmlText);
  registerStruct(9, YXmlHook);

  registerStruct(12, GC);

  var RootFakeUserID = 0xFFFFFF;

  var RootID = function () {
    function RootID(name, typeConstructor) {
      classCallCheck(this, RootID);

      this.user = RootFakeUserID;
      this.name = name;
      this.type = getStructReference(typeConstructor);
    }

    createClass(RootID, [{
      key: 'equals',
      value: function equals(id) {
        return id !== null && id.user === this.user && id.name === this.name && id.type === this.type;
      }
    }, {
      key: 'lessThan',
      value: function lessThan(id) {
        if (id.constructor === RootID) {
          return this.user < id.user || this.user === id.user && (this.name < id.name || this.name === id.name && this.type < id.type);
        } else {
          return true;
        }
      }
    }]);
    return RootID;
  }();

  var OperationStore = function (_Tree) {
    inherits(OperationStore, _Tree);

    function OperationStore(y) {
      classCallCheck(this, OperationStore);

      var _this = possibleConstructorReturn(this, (OperationStore.__proto__ || Object.getPrototypeOf(OperationStore)).call(this));

      _this.y = y;
      return _this;
    }

    createClass(OperationStore, [{
      key: 'logTable',
      value: function logTable() {
        var items = [];
        this.iterate(null, null, function (item) {
          if (item.constructor === GC) {
            items.push({
              id: logID(item),
              content: item._length,
              deleted: 'GC'
            });
          } else {
            items.push({
              id: logID(item),
              origin: logID(item._origin === null ? null : item._origin._lastId),
              left: logID(item._left === null ? null : item._left._lastId),
              right: logID(item._right),
              right_origin: logID(item._right_origin),
              parent: logID(item._parent),
              parentSub: item._parentSub,
              deleted: item._deleted,
              content: JSON.stringify(item._content)
            });
          }
        });
        console.table(items);
      }
    }, {
      key: 'get',
      value: function get$$1(id) {
        var struct = this.find(id);
        if (struct === null && id instanceof RootID) {
          var Constr = getStruct(id.type);
          var y = this.y;
          struct = new Constr();
          struct._id = id;
          struct._parent = y;
          y.transact(function () {
            struct._integrate(y);
          });
          this.put(struct);
        }
        return struct;
      }
      // Use getItem for structs with _length > 1

    }, {
      key: 'getItem',
      value: function getItem(id) {
        var item = this.findWithUpperBound(id);
        if (item === null) {
          return null;
        }
        var itemID = item._id;
        if (id.user === itemID.user && id.clock < itemID.clock + item._length) {
          return item;
        } else {
          return null;
        }
      }
      // Return an insertion such that id is the first element of content
      // This function manipulates an item, if necessary

    }, {
      key: 'getItemCleanStart',
      value: function getItemCleanStart(id) {
        var ins = this.getItem(id);
        if (ins === null || ins._length === 1) {
          return ins;
        }
        var insID = ins._id;
        if (insID.clock === id.clock) {
          return ins;
        } else {
          return ins._splitAt(this.y, id.clock - insID.clock);
        }
      }
      // Return an insertion such that id is the last element of content
      // This function manipulates an operation, if necessary

    }, {
      key: 'getItemCleanEnd',
      value: function getItemCleanEnd(id) {
        var ins = this.getItem(id);
        if (ins === null || ins._length === 1) {
          return ins;
        }
        var insID = ins._id;
        if (insID.clock + ins._length - 1 === id.clock) {
          return ins;
        } else {
          ins._splitAt(this.y, id.clock - insID.clock + 1);
          return ins;
        }
      }
    }]);
    return OperationStore;
  }(Tree);

  var StateStore = function () {
    function StateStore(y) {
      classCallCheck(this, StateStore);

      this.y = y;
      this.state = new Map();
    }

    createClass(StateStore, [{
      key: 'logTable',
      value: function logTable() {
        var entries = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = slicedToArray(_step.value, 2),
                user = _step$value[0],
                state = _step$value[1];

            entries.push({
              user: user, state: state
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        console.table(entries);
      }
    }, {
      key: 'getNextID',
      value: function getNextID(len) {
        var user = this.y.userID;
        var state = this.getState(user);
        this.setState(user, state + len);
        return new ID(user, state);
      }
    }, {
      key: 'updateRemoteState',
      value: function updateRemoteState(struct) {
        var user = struct._id.user;
        var userState = this.state.get(user);
        while (struct !== null && struct._id.clock === userState) {
          userState += struct._length;
          struct = this.y.os.get(new ID(user, userState));
        }
        this.state.set(user, userState);
      }
    }, {
      key: 'getState',
      value: function getState(user) {
        var state = this.state.get(user);
        if (state == null) {
          return 0;
        }
        return state;
      }
    }, {
      key: 'setState',
      value: function setState(user, state) {
        // TODO: modify missingi structs here
        var beforeState = this.y._transaction.beforeState;
        if (!beforeState.has(user)) {
          beforeState.set(user, this.getState(user));
        }
        this.state.set(user, state);
      }
    }]);
    return StateStore;
  }();

  /* global crypto */

  function generateRandomUint32() {
    if (typeof crypto !== 'undefined' && crypto.getRandomValue != null) {
      // browser
      var arr = new Uint32Array(1);
      crypto.getRandomValues(arr);
      return arr[0];
    } else if (typeof crypto !== 'undefined' && crypto.randomBytes != null) {
      // node
      var buf = crypto.randomBytes(4);
      return new Uint32Array(buf.buffer)[0];
    } else {
      return Math.ceil(Math.random() * 0xFFFFFFFF);
    }
  }

  /**
   * Handles named events.
   */
  var NamedEventHandler = function () {
    function NamedEventHandler() {
      classCallCheck(this, NamedEventHandler);

      this._eventListener = new Map();
      this._stateListener = new Map();
    }

    /**
     * @private
     * Returns all listeners that listen to a specified name.
     *
     * @param {String} name The query event name.
     */


    createClass(NamedEventHandler, [{
      key: '_getListener',
      value: function _getListener(name) {
        var listeners = this._eventListener.get(name);
        if (listeners === undefined) {
          listeners = {
            once: new Set(),
            on: new Set()
          };
          this._eventListener.set(name, listeners);
        }
        return listeners;
      }

      /**
       * Adds a named event listener. The listener is removed after it has been
       * called once.
       *
       * @param {String} name The event name to listen to.
       * @param {Function} f The function that is executed when the event is fired.
       */

    }, {
      key: 'once',
      value: function once(name, f) {
        var listeners = this._getListener(name);
        listeners.once.add(f);
      }

      /**
       * Adds a named event listener.
       *
       * @param {String} name The event name to listen to.
       * @param {Function} f The function that is executed when the event is fired.
       */

    }, {
      key: 'on',
      value: function on(name, f) {
        var listeners = this._getListener(name);
        listeners.on.add(f);
      }

      /**
       * @private
       * Init the saved state for an event name.
       */

    }, {
      key: '_initStateListener',
      value: function _initStateListener(name) {
        var state = this._stateListener.get(name);
        if (state === undefined) {
          state = {};
          state.promise = new Promise(function (resolve) {
            state.resolve = resolve;
          });
          this._stateListener.set(name, state);
        }
        return state;
      }

      /**
       * Returns a Promise that is resolved when the event name is called.
       * The Promise is immediately resolved when the event name was called in the
       * past.
       */

    }, {
      key: 'when',
      value: function when(name) {
        return this._initStateListener(name).promise;
      }

      /**
       * Remove an event listener that was registered with either
       * {@link EventHandler#on} or {@link EventHandler#once}.
       */

    }, {
      key: 'off',
      value: function off(name, f) {
        if (name == null || f == null) {
          throw new Error('You must specify event name and function!');
        }
        var listener = this._eventListener.get(name);
        if (listener !== undefined) {
          listener.on.delete(f);
          listener.once.delete(f);
        }
      }

      /**
       * Emit a named event. All registered event listeners that listen to the
       * specified name will receive the event.
       *
       * @param {String} name The event name.
       * @param {Array} args The arguments that are applied to the event listener.
       */

    }, {
      key: 'emit',
      value: function emit(name) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        this._initStateListener(name).resolve();
        var listener = this._eventListener.get(name);
        if (listener !== undefined) {
          listener.on.forEach(function (f) {
            return f.apply(null, args);
          });
          listener.once.forEach(function (f) {
            return f.apply(null, args);
          });
          listener.once = new Set();
        } else if (name === 'error') {
          console.error(args[0]);
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this._eventListener = null;
      }
    }]);
    return NamedEventHandler;
  }();

  // TODO: Implement function to describe ranges

  /**
   * A relative position that is based on the Yjs model. In contrast to an
   * absolute position (position by index), the relative position can be
   * recomputed when remote changes are received. For example:
   *
   * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the cursor position.
   *
   * A relative cursor position can be obtained with the function
   * {@link getRelativePosition} and it can be transformed to an absolute position
   * with {@link fromRelativePosition}.
   *
   * Pro tip: Use this to implement shared cursor locations in YText or YXml!
   * The relative position is {@link encodable}, so you can send it to other
   * clients.
   *
   * @example
   * // Current cursor position is at position 10
   * let relativePosition = getRelativePosition(yText, 10)
   * // modify yText
   * yText.insert(0, 'abc')
   * yText.delete(3, 10)
   * // Compute the cursor position
   * let absolutePosition = fromRelativePosition(y, relativePosition)
   * absolutePosition.type // => yText
   * console.log('cursor location is ' + absolutePosition.offset) // => cursor location is 3
   *
   * @typedef {encodable} RelativePosition
   */

  /**
   * Create a relativePosition based on a absolute position.
   *
   * @param {YType} type The base type (e.g. YText or YArray).
   * @param {Integer} offset The absolute position.
   */
  function getRelativePosition(type, offset) {
    // TODO: rename to createRelativePosition
    var t = type._start;
    while (t !== null) {
      if (t._deleted === false) {
        if (t._length > offset) {
          return [t._id.user, t._id.clock + offset];
        }
        offset -= t._length;
      }
      t = t._right;
    }
    return ['endof', type._id.user, type._id.clock || null, type._id.name || null, type._id.type || null];
  }

  /**
   * @typedef {Object} AbsolutePosition The result of {@link fromRelativePosition}
   * @property {YType} type The type on which to apply the absolute position.
   * @property {Integer} offset The absolute offset.r
   */

  /**
   * Transforms a relative position back to a relative position.
   *
   * @param {Y} y The Yjs instance in which to query for the absolute position.
   * @param {RelativePosition} rpos The relative position.
   * @return {AbsolutePosition} The absolute position in the Yjs model
   *                            (type + offset).
   */
  function fromRelativePosition(y, rpos) {
    if (rpos[0] === 'endof') {
      var id = void 0;
      if (rpos[3] === null) {
        id = new ID(rpos[1], rpos[2]);
      } else {
        id = new RootID(rpos[3], rpos[4]);
      }
      var type = y.os.get(id);
      while (type._redone !== null) {
        type = type._redone;
      }
      if (type === null || type.constructor === GC) {
        return null;
      }
      return {
        type: type,
        offset: type.length
      };
    } else {
      var offset = 0;
      var struct = y.os.findNodeWithUpperBound(new ID(rpos[0], rpos[1])).val;
      var diff = rpos[1] - struct._id.clock;
      while (struct._redone !== null) {
        struct = struct._redone;
      }
      var parent = struct._parent;
      if (struct.constructor === GC || parent._deleted) {
        return null;
      }
      if (!struct._deleted) {
        offset = diff;
      }
      struct = struct._left;
      while (struct !== null) {
        if (!struct._deleted) {
          offset += struct._length;
        }
        struct = struct._left;
      }
      return {
        type: parent,
        offset: offset
      };
    }
  }

  // TODO: rename mutex

  /**
   * Creates a mutual exclude function with the following property:
   *
   * @example
   * const mutualExclude = createMutualExclude()
   * mutualExclude(function () {
   *   // This function is immediately executed
   *   mutualExclude(function () {
   *     // This function is never executed, as it is called with the same
   *     // mutualExclude
   *   })
   * })
   *
   * @return {Function} A mutual exclude function
   * @public
   */
  function createMutualExclude() {
    var token = true;
    return function mutualExclude(f) {
      if (token) {
        token = false;
        try {
          f();
        } catch (e) {
          console.error(e);
        }
        token = true;
      }
    };
  }

  /**
   * Abstract class for bindings.
   *
   * A binding handles data binding from a Yjs type to a data object. For example,
   * you can bind a Quill editor instance to a YText instance with the `QuillBinding` class.
   *
   * It is expected that a concrete implementation accepts two parameters
   * (type and binding target).
   *
   * @example
   *   const quill = new Quill(document.createElement('div'))
   *   const type = y.define('quill', Y.Text)
   *   const binding = new Y.QuillBinding(quill, type)
   *
   */

  var Binding = function () {
    /**
     * @param {YType} type Yjs type.
     * @param {any} target Binding Target.
     */
    function Binding(type, target) {
      classCallCheck(this, Binding);

      /**
       * The Yjs type that is bound to `target`
       * @type {YType}
       */
      this.type = type;
      /**
       * The target that `type` is bound to.
       * @type {*}
       */
      this.target = target;
      /**
       * @private
       */
      this._mutualExclude = createMutualExclude();
    }
    /**
     * Remove all data observers (both from the type and the target).
     */


    createClass(Binding, [{
      key: 'destroy',
      value: function destroy() {
        this.type = null;
        this.target = null;
      }
    }]);
    return Binding;
  }();

  /* globals getSelection */

  var relativeSelection = null;

  function _getCurrentRelativeSelection(domBinding) {
    var _getSelection = getSelection(),
        baseNode = _getSelection.baseNode,
        baseOffset = _getSelection.baseOffset,
        extentNode = _getSelection.extentNode,
        extentOffset = _getSelection.extentOffset;

    var baseNodeType = domBinding.domToType.get(baseNode);
    var extentNodeType = domBinding.domToType.get(extentNode);
    if (baseNodeType !== undefined && extentNodeType !== undefined) {
      return {
        from: getRelativePosition(baseNodeType, baseOffset),
        to: getRelativePosition(extentNodeType, extentOffset)
      };
    }
    return null;
  }

  var getCurrentRelativeSelection = typeof getSelection !== 'undefined' ? _getCurrentRelativeSelection : function () {
    return null;
  };

  function beforeTransactionSelectionFixer(domBinding, remote) {
    if (remote) {
      relativeSelection = getCurrentRelativeSelection(domBinding);
    }
  }

  /**
   * @private
   */
  function afterTransactionSelectionFixer(domBinding, remote) {
    if (relativeSelection !== null && remote) {
      domBinding.restoreSelection(relativeSelection);
    }
  }

  /* global getSelection */

  function findScrollReference(scrollingElement) {
    if (scrollingElement !== null) {
      var anchor = getSelection().anchorNode;
      if (anchor == null) {
        var children = scrollingElement.children; // only iterate through non-text nodes
        for (var i = 0; i < children.length; i++) {
          var elem = children[i];
          var rect = elem.getBoundingClientRect();
          if (rect.top >= 0) {
            return { elem: elem, top: rect.top };
          }
        }
      } else {
        if (anchor.nodeType === document.TEXT_NODE) {
          anchor = anchor.parentElement;
        }
        var top = anchor.getBoundingClientRect().top;
        return { elem: anchor, top: top };
      }
    }
    return null;
  }

  function fixScroll(scrollingElement, ref) {
    if (ref !== null) {
      var elem = ref.elem,
          top = ref.top;

      var currentTop = elem.getBoundingClientRect().top;
      var newScroll = scrollingElement.scrollTop + currentTop - top;
      if (newScroll >= 0) {
        scrollingElement.scrollTop = newScroll;
      }
    }
  }

  /**
   * @private
   */
  function typeObserver(events) {
    var _this = this;

    this._mutualExclude(function () {
      var scrollRef = findScrollReference(_this.scrollingElement);
      events.forEach(function (event) {
        var yxml = event.target;
        var dom = _this.typeToDom.get(yxml);
        if (dom !== undefined && dom !== false) {
          if (yxml.constructor === YXmlText) {
            dom.nodeValue = yxml.toString();
          } else if (event.attributesChanged !== undefined) {
            // update attributes
            event.attributesChanged.forEach(function (attributeName) {
              var value = yxml.getAttribute(attributeName);
              if (value === undefined) {
                dom.removeAttribute(attributeName);
              } else {
                dom.setAttribute(attributeName, value);
              }
            });
            /*
             * TODO: instead of hard-checking the types, it would be best to
             *       specify the type's features. E.g.
             *         - _yxmlHasAttributes
             *         - _yxmlHasChildren
             *       Furthermore, the features shouldn't be encoded in the types,
             *       only in the attributes (above)
             */
            if (event.childListChanged && yxml.constructor !== YXmlHook) {
              var currentChild = dom.firstChild;
              yxml.forEach(function (childType) {
                var childNode = _this.typeToDom.get(childType);
                switch (childNode) {
                  case undefined:
                    // Does not exist. Create it.
                    var node = childType.toDom(_this.opts.document, _this.opts.hooks, _this);
                    dom.insertBefore(node, currentChild);
                    break;
                  case false:
                    // nop
                    break;
                  default:
                    // Is already attached to the dom.
                    // Find it and remove all dom nodes in-between.
                    removeDomChildrenUntilElementFound(dom, currentChild, childNode);
                    currentChild = childNode.nextSibling;
                    break;
                }
              });
              removeDomChildrenUntilElementFound(dom, currentChild, null);
            }
          }
        }
      });
      fixScroll(_this.scrollingElement, scrollRef);
    });
  }

  /**
   * A SimpleDiff describes a change on a String.
   *
   * @example
   * console.log(a) // the old value
   * console.log(b) // the updated value
   * // Apply changes of diff (pseudocode)
   * a.remove(diff.pos, diff.remove) // Remove `diff.remove` characters
   * a.insert(diff.pos, diff.insert) // Insert `diff.insert`
   * a === b // values match
   *
   * @typedef {Object} SimpleDiff
   * @property {Number} pos The index where changes were applied
   * @property {Number} delete The number of characters to delete starting
   *                                  at `index`.
   * @property {String} insert The new text to insert at `index` after applying
   *                           `delete`
   */

  /**
   * Create a diff between two strings. This diff implementation is highly
   * efficient, but not very sophisticated.
   *
   * @public
   * @param {String} a The old version of the string
   * @param {String} b The updated version of the string
   * @return {SimpleDiff} The diff description.
   */
  function simpleDiff(a, b) {
    var left = 0; // number of same characters counting from left
    var right = 0; // number of same characters counting from right
    while (left < a.length && left < b.length && a[left] === b[left]) {
      left++;
    }
    if (left !== a.length || left !== b.length) {
      // Only check right if a !== b
      while (right + left < a.length && right + left < b.length && a[a.length - right - 1] === b[b.length - right - 1]) {
        right++;
      }
    }
    return {
      pos: left, // TODO: rename to index (also in type above)
      remove: a.length - left - right,
      insert: b.slice(left, b.length - right)
    };
  }

  /**
   * 1. Check if any of the nodes was deleted
   * 2. Iterate over the children.
   *    2.1 If a node exists that is not yet bound to a type, insert a new node
   *    2.2 If _contents.length < dom.childNodes.length, fill the
   *        rest of _content with childNodes
   *    2.3 If a node was moved, delete it and
   *       recreate a new yxml element that is bound to that node.
   *       You can detect that a node was moved because expectedId
   *       !== actualId in the list
   * @private
   */
  function applyChangesFromDom(binding, dom, yxml, _document) {
    if (yxml == null || yxml === false || yxml.constructor === YXmlHook) {
      return;
    }
    var y = yxml._y;
    var knownChildren = new Set();
    for (var i = dom.childNodes.length - 1; i >= 0; i--) {
      var type = binding.domToType.get(dom.childNodes[i]);
      if (type !== undefined && type !== false) {
        knownChildren.add(type);
      }
    }
    // 1. Check if any of the nodes was deleted
    yxml.forEach(function (childType) {
      if (knownChildren.has(childType) === false) {
        childType._delete(y);
        removeAssociation(binding, binding.typeToDom.get(childType), childType);
      }
    });
    // 2. iterate
    var childNodes = dom.childNodes;
    var len = childNodes.length;
    var prevExpectedType = null;
    var expectedType = iterateUntilUndeleted(yxml._start);
    for (var domCnt = 0; domCnt < len; domCnt++) {
      var childNode = childNodes[domCnt];
      var childType = binding.domToType.get(childNode);
      if (childType !== undefined) {
        if (childType === false) {
          // should be ignored or is going to be deleted
          continue;
        }
        if (expectedType !== null) {
          if (expectedType !== childType) {
            // 2.3 Not expected node
            if (childType._parent !== yxml) {
              // child was moved from another parent
              // childType is going to be deleted by its previous parent
              removeAssociation(binding, childNode, childType);
            } else {
              // child was moved to a different position.
              removeAssociation(binding, childNode, childType);
              childType._delete(y);
            }
            prevExpectedType = insertNodeHelper(yxml, prevExpectedType, childNode, _document, binding);
          } else {
            // Found expected node. Continue.
            prevExpectedType = expectedType;
            expectedType = iterateUntilUndeleted(expectedType._right);
          }
        } else {
          // 2.2 Fill _content with child nodes
          prevExpectedType = insertNodeHelper(yxml, prevExpectedType, childNode, _document, binding);
        }
      } else {
        // 2.1 A new node was found
        prevExpectedType = insertNodeHelper(yxml, prevExpectedType, childNode, _document, binding);
      }
    }
  }

  /**
   * @private
   */
  function domObserver(mutations, _document) {
    var _this = this;

    this._mutualExclude(function () {
      _this.type._y.transact(function () {
        var diffChildren = new Set();
        mutations.forEach(function (mutation) {
          var dom = mutation.target;
          var yxml = _this.domToType.get(dom);
          if (yxml === undefined) {
            // In case yxml is undefined, we double check if we forgot to bind the dom
            var parent = dom;
            var yParent = void 0;
            do {
              parent = parent.parentElement;
              yParent = _this.domToType.get(parent);
            } while (yParent === undefined && parent !== null);
            if (yParent !== false && yParent !== undefined && yParent.constructor !== YXmlHook) {
              diffChildren.add(parent);
            }
            return;
          } else if (yxml === false || yxml.constructor === YXmlHook) {
            // dom element is filtered / a dom hook
            return;
          }
          switch (mutation.type) {
            case 'characterData':
              var change = simpleDiff(yxml.toString(), dom.nodeValue);
              yxml.delete(change.pos, change.remove);
              yxml.insert(change.pos, change.insert);
              break;
            case 'attributes':
              if (yxml.constructor === YXmlFragment) {
                break;
              }
              var name = mutation.attributeName;
              var val = dom.getAttribute(name);
              // check if filter accepts attribute
              var attributes = new Map();
              attributes.set(name, val);
              if (yxml.constructor !== YXmlFragment && _this.filter(dom.nodeName, attributes).size > 0) {
                if (yxml.getAttribute(name) !== val) {
                  if (val == null) {
                    yxml.removeAttribute(name);
                  } else {
                    yxml.setAttribute(name, val);
                  }
                }
              }
              break;
            case 'childList':
              diffChildren.add(mutation.target);
              break;
          }
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = diffChildren[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var dom = _step.value;

            var yxml = _this.domToType.get(dom);
            applyChangesFromDom(_this, dom, yxml, _document);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });
    });
  }

  /* global MutationObserver, getSelection */

  /**
   * A binding that binds the children of a YXmlFragment to a DOM element.
   *
   * This binding is automatically destroyed when its parent is deleted.
   *
   * @example
   * const div = document.createElement('div')
   * const type = y.define('xml', Y.XmlFragment)
   * const binding = new Y.QuillBinding(type, div)
   *
   */

  var DomBinding = function (_Binding) {
    inherits(DomBinding, _Binding);

    /**
     * @param {YXmlFragment} type The bind source. This is the ultimate source of
     *                            truth.
     * @param {Element} target The bind target. Mirrors the target.
     * @param {Object} [opts] Optional configurations
      * @param {FilterFunction} [opts.filter=defaultFilter] The filter function to use.
     */
    function DomBinding(type, target) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      classCallCheck(this, DomBinding);

      var _this = possibleConstructorReturn(this, (DomBinding.__proto__ || Object.getPrototypeOf(DomBinding)).call(this, type, target));
      // Binding handles textType as this.type and domTextarea as this.target


      _this.opts = opts;
      opts.document = opts.document || document;
      opts.hooks = opts.hooks || {};
      _this.scrollingElement = opts.scrollingElement || null;
      /**
       * Maps each DOM element to the type that it is associated with.
       * @type {Map}
       */
      _this.domToType = new Map();
      /**
       * Maps each YXml type to the DOM element that it is associated with.
       * @type {Map}
       */
      _this.typeToDom = new Map();
      /**
       * Defines which DOM attributes and elements to filter out.
       * Also filters remote changes.
       * @type {FilterFunction}
       */
      _this.filter = opts.filter || defaultFilter;
      // set initial value
      target.innerHTML = '';
      type.forEach(function (child) {
        target.insertBefore(child.toDom(opts.document, opts.hooks, _this), null);
      });
      _this._typeObserver = typeObserver.bind(_this);
      _this._domObserver = function (mutations) {
        domObserver.call(_this, mutations, opts.document);
      };
      type.observeDeep(_this._typeObserver);
      _this._mutationObserver = new MutationObserver(_this._domObserver);
      _this._mutationObserver.observe(target, {
        childList: true,
        attributes: true,
        characterData: true,
        subtree: true
      });
      _this._currentSel = null;
      document.addEventListener('selectionchange', function () {
        _this._currentSel = getCurrentRelativeSelection(_this);
      });
      var y = type._y;
      _this.y = y;
      // Force flush dom changes before Type changes are applied (they might
      // modify the dom)
      _this._beforeTransactionHandler = function (y, transaction, remote) {
        _this._domObserver(_this._mutationObserver.takeRecords());
        _this._mutualExclude(function () {
          beforeTransactionSelectionFixer(_this, remote);
        });
      };
      y.on('beforeTransaction', _this._beforeTransactionHandler);
      _this._afterTransactionHandler = function (y, transaction, remote) {
        _this._mutualExclude(function () {
          afterTransactionSelectionFixer(_this, remote);
        });
        // remove associations
        // TODO: this could be done more efficiently
        // e.g. Always delete using the following approach, or removeAssociation
        // in dom/type-observer..
        transaction.deletedStructs.forEach(function (type) {
          var dom = _this.typeToDom.get(type);
          if (dom !== undefined) {
            removeAssociation(_this, dom, type);
          }
        });
      };
      y.on('afterTransaction', _this._afterTransactionHandler);
      // Before calling observers, apply dom filter to all changed and new types.
      _this._beforeObserverCallsHandler = function (y, transaction) {
        // Apply dom filter to new and changed types
        transaction.changedTypes.forEach(function (subs, type) {
          // Only check attributes. New types are filtered below.
          if (subs.size > 1 || subs.size === 1 && subs.has(null) === false) {
            applyFilterOnType(y, _this, type);
          }
        });
        transaction.newTypes.forEach(function (type) {
          applyFilterOnType(y, _this, type);
        });
      };
      y.on('beforeObserverCalls', _this._beforeObserverCallsHandler);
      createAssociation(_this, target, type);
      return _this;
    }

    /**
     * NOTE: currently does not apply filter to existing elements!
     * @param {FilterFunction} filter The filter function to use from now on.
     */


    createClass(DomBinding, [{
      key: 'setFilter',
      value: function setFilter(filter) {
        this.filter = filter;
        // TODO: apply filter to all elements
      }
    }, {
      key: '_getUndoStackInfo',
      value: function _getUndoStackInfo() {
        return this.getSelection();
      }
    }, {
      key: '_restoreUndoStackInfo',
      value: function _restoreUndoStackInfo(info) {
        this.restoreSelection(info);
      }
    }, {
      key: 'getSelection',
      value: function getSelection() {
        return this._currentSel;
      }
    }, {
      key: 'restoreSelection',
      value: function restoreSelection(selection) {
        if (selection !== null) {
          var to = selection.to,
              from = selection.from;

          var shouldUpdate = false;
          /**
           * There is little information on the difference between anchor/focus and base/extent.
           * MDN doesn't even mention base/extent anymore.. though you still have to call
           * setBaseAndExtent to change the selection..
           * I can observe that base/extend refer to notes higher up in the xml hierachy.
           * Espesially for undo/redo this is preferred. If this becomes a problem in the future,
           * we should probably go back to anchor/focus.
           */
          var browserSelection = getSelection();
          var baseNode = browserSelection.baseNode,
              baseOffset = browserSelection.baseOffset,
              extentNode = browserSelection.extentNode,
              extentOffset = browserSelection.extentOffset;

          if (from !== null) {
            var sel = fromRelativePosition(this.y, from);
            if (sel !== null) {
              var node = this.typeToDom.get(sel.type);
              var offset = sel.offset;
              if (node !== baseNode || offset !== baseOffset) {
                baseNode = node;
                baseOffset = offset;
                shouldUpdate = true;
              }
            }
          }
          if (to !== null) {
            var _sel = fromRelativePosition(this.y, to);
            if (_sel !== null) {
              var _node = this.typeToDom.get(_sel.type);
              var _offset = _sel.offset;
              if (_node !== extentNode || _offset !== extentOffset) {
                extentNode = _node;
                extentOffset = _offset;
                shouldUpdate = true;
              }
            }
          }
          if (shouldUpdate) {
            browserSelection.setBaseAndExtent(baseNode, baseOffset, extentNode, extentOffset);
          }
        }
      }

      /**
       * Remove all properties that are handled by this class.
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.domToType = null;
        this.typeToDom = null;
        this.type.unobserveDeep(this._typeObserver);
        this._mutationObserver.disconnect();
        var y = this.type._y;
        y.off('beforeTransaction', this._beforeTransactionHandler);
        y.off('beforeObserverCalls', this._beforeObserverCallsHandler);
        y.off('afterTransaction', this._afterTransactionHandler);
        get(DomBinding.prototype.__proto__ || Object.getPrototypeOf(DomBinding.prototype), 'destroy', this).call(this);
      }
    }]);
    return DomBinding;
  }(Binding);

  /**
   * Anything that can be encoded with `JSON.stringify` and can be decoded with
   * `JSON.parse`.
   *
   * The following property should hold:
   * `JSON.parse(JSON.stringify(key))===key`
   *
   * At the moment the only safe values are number and string.
   *
   * @typedef {(number|string)} encodable
   */

  /**
   * A Yjs instance handles the state of shared data.
   *
   * @param {string} room Users in the same room share the same content
   * @param {Object} opts Connector definition
   * @param {AbstractPersistence} persistence Persistence adapter instance
   */

  var Y = function (_NamedEventHandler) {
    inherits(Y, _NamedEventHandler);

    function Y(room, opts, persistence) {
      var conf = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      classCallCheck(this, Y);

      var _this = possibleConstructorReturn(this, (Y.__proto__ || Object.getPrototypeOf(Y)).call(this));

      _this.gcEnabled = conf.gc || false;
      /**
       * The room name that this Yjs instance connects to.
       * @type {String}
       */
      _this.room = room;
      if (opts != null) {
        opts.connector.room = room;
      }
      _this._contentReady = false;
      _this._opts = opts;
      if (typeof opts.userID !== 'number') {
        _this.userID = generateRandomUint32();
      } else {
        _this.userID = opts.userID;
      }
      // TODO: This should be a Map so we can use encodables as keys
      _this.share = {};
      _this.ds = new DeleteStore(_this);
      _this.os = new OperationStore(_this);
      _this.ss = new StateStore(_this);
      _this._missingStructs = new Map();
      _this._readyToIntegrate = [];
      _this._transaction = null;
      /**
       * The {@link AbstractConnector}.that is used by this Yjs instance.
       * @type {AbstractConnector}
       */
      _this.connector = null;
      _this.connected = false;
      var initConnection = function initConnection() {
        if (opts != null) {
          _this.connector = new Y[opts.connector.name](_this, opts.connector);
          _this.connected = true;
          _this.emit('connectorReady');
        }
      };
      /**
       * The {@link AbstractPersistence} that is used by this Yjs instance.
       * @type {AbstractPersistence}
       */
      _this.persistence = null;
      if (persistence != null) {
        _this.persistence = persistence;
        persistence._init(_this).then(initConnection);
      } else {
        initConnection();
      }
      // for compatibility with isParentOf
      _this._parent = null;
      _this._hasUndoManager = false;
      return _this;
    }

    createClass(Y, [{
      key: '_setContentReady',
      value: function _setContentReady() {
        if (!this._contentReady) {
          this._contentReady = true;
          this.emit('content');
        }
      }
    }, {
      key: 'whenContentReady',
      value: function whenContentReady() {
        var _this2 = this;

        if (this._contentReady) {
          return Promise.resolve();
        } else {
          return new Promise(function (resolve) {
            _this2.once('content', resolve);
          });
        }
      }
    }, {
      key: '_beforeChange',
      value: function _beforeChange() {}
      /**
       * Changes that happen inside of a transaction are bundled. This means that
       * the observer fires _after_ the transaction is finished and that all changes
       * that happened inside of the transaction are sent as one message to the
       * other peers.
       *
       * @param {Function} f The function that should be executed as a transaction
       * @param {?Boolean} remote Optional. Whether this transaction is initiated by
       *                          a remote peer. This should not be set manually!
       *                          Defaults to false.
       */

    }, {
      key: 'transact',
      value: function transact(f) {
        var remote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var initialCall = this._transaction === null;
        if (initialCall) {
          this._transaction = new Transaction(this);
          this.emit('beforeTransaction', this, this._transaction, remote);
        }
        try {
          f(this);
        } catch (e) {
          console.error(e);
        }
        if (initialCall) {
          this.emit('beforeObserverCalls', this, this._transaction, remote);
          var transaction = this._transaction;
          this._transaction = null;
          // emit change events on changed types
          transaction.changedTypes.forEach(function (subs, type) {
            if (!type._deleted) {
              type._callObserver(transaction, subs, remote);
            }
          });
          transaction.changedParentTypes.forEach(function (events, type) {
            if (!type._deleted) {
              events = events.filter(function (event) {
                return !event.target._deleted;
              });
              events.forEach(function (event) {
                event.currentTarget = type;
              });
              // we don't have to check for events.length
              // because there is no way events is empty..
              type._deepEventHandler.callEventListeners(transaction, events);
            }
          });
          // when all changes & events are processed, emit afterTransaction event
          this.emit('afterTransaction', this, transaction, remote);
        }
      }

      /**
       * @private
       * Fake _start for root properties (y.set('name', type))
       */

    }, {
      key: 'define',


      /**
       * Define a shared data type.
       *
       * Multiple calls of `y.define(name, TypeConstructor)` yield the same result
       * and do not overwrite each other. I.e.
       * `y.define(name, type) === y.define(name, type)`
       *
       * After this method is called, the type is also available on `y.share[name]`.
       *
       * *Best Practices:*
       * Either define all types right after the Yjs instance is created or always
       * use `y.define(..)` when accessing a type.
       *
       * @example
       *   // Option 1
       *   const y = new Y(..)
       *   y.define('myArray', YArray)
       *   y.define('myMap', YMap)
       *   // .. when accessing the type use y.share[name]
       *   y.share.myArray.insert(..)
       *   y.share.myMap.set(..)
       *
       *   // Option2
       *   const y = new Y(..)
       *   // .. when accessing the type use `y.define(..)`
       *   y.define('myArray', YArray).insert(..)
       *   y.define('myMap', YMap).set(..)
       *
       * @param {String} name
       * @param {YType Constructor} TypeConstructor The constructor of the type definition
       * @returns {YType} The created type
       */
      value: function define(name, TypeConstructor) {
        var id = new RootID(name, TypeConstructor);
        var type = this.os.get(id);
        if (this.share[name] === undefined) {
          this.share[name] = type;
        } else if (this.share[name] !== type) {
          throw new Error('Type is already defined with a different constructor');
        }
        return type;
      }

      /**
       * Get a defined type. The type must be defined locally. First define the
       * type with {@link define}.
       *
       * This returns the same value as `y.share[name]`
       *
       * @param {String} name The typename
       */

    }, {
      key: 'get',
      value: function get$$1(name) {
        return this.share[name];
      }

      /**
       * Disconnect this Yjs Instance from the network. The connector will
       * unsubscribe from the room and document updates are not shared anymore.
       */

    }, {
      key: 'disconnect',
      value: function disconnect() {
        if (this.connected) {
          this.connected = false;
          return this.connector.disconnect();
        } else {
          return Promise.resolve();
        }
      }

      /**
       * If disconnected, tell the connector to reconnect to the room.
       */

    }, {
      key: 'reconnect',
      value: function reconnect() {
        if (!this.connected) {
          this.connected = true;
          return this.connector.reconnect();
        } else {
          return Promise.resolve();
        }
      }

      /**
       * Disconnect from the room, and destroy all traces of this Yjs instance.
       * Persisted data will remain until removed by the persistence adapter.
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        get(Y.prototype.__proto__ || Object.getPrototypeOf(Y.prototype), 'destroy', this).call(this);
        this.share = null;
        if (this.connector != null) {
          if (this.connector.destroy != null) {
            this.connector.destroy();
          } else {
            this.connector.disconnect();
          }
        }
        if (this.persistence !== null) {
          this.persistence.deinit(this);
          this.persistence = null;
        }
        this.os = null;
        this.ds = null;
        this.ss = null;
      }
    }, {
      key: '_start',
      get: function get$$1() {
        return null;
      }

      /**
       * @private
       * Fake _start for root properties (y.set('name', type))
       */
      ,
      set: function set$$1(start) {
        return null;
      }
    }]);
    return Y;
  }(NamedEventHandler);


  Y.extend = function extendYjs() {
    for (var i = 0; i < arguments.length; i++) {
      var f = arguments[i];
      if (typeof f === 'function') {
        f(Y);
      } else {
        throw new Error('Expected a function!');
      }
    }
  };

  var ReverseOperation = function ReverseOperation(y, transaction, bindingInfos) {
    var _this = this;

    classCallCheck(this, ReverseOperation);

    this.created = new Date();
    var beforeState = transaction.beforeState;
    if (beforeState.has(y.userID)) {
      this.toState = new ID(y.userID, y.ss.getState(y.userID) - 1);
      this.fromState = new ID(y.userID, beforeState.get(y.userID));
    } else {
      this.toState = null;
      this.fromState = null;
    }
    this.deletedStructs = new Set();
    transaction.deletedStructs.forEach(function (struct) {
      _this.deletedStructs.add({
        from: struct._id,
        len: struct._length
      });
    });
    /**
     * Maps from binding to binding information (e.g. cursor information)
     */
    this.bindingInfos = bindingInfos;
  };

  function applyReverseOperation(y, scope, reverseBuffer) {
    var performedUndo = false;
    var undoOp = void 0;
    y.transact(function () {
      var _loop = function _loop() {
        undoOp = reverseBuffer.pop();
        // make sure that it is possible to iterate {from}-{to}
        if (undoOp.fromState !== null) {
          y.os.getItemCleanStart(undoOp.fromState);
          y.os.getItemCleanEnd(undoOp.toState);
          y.os.iterate(undoOp.fromState, undoOp.toState, function (op) {
            while (op._deleted && op._redone !== null) {
              op = op._redone;
            }
            if (op._deleted === false && isParentOf(scope, op)) {
              performedUndo = true;
              op._delete(y);
            }
          });
        }
        var redoitems = new Set();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = undoOp.deletedStructs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var del = _step.value;

            var fromState = del.from;
            var toState = new ID(fromState.user, fromState.clock + del.len - 1);
            y.os.getItemCleanStart(fromState);
            y.os.getItemCleanEnd(toState);
            y.os.iterate(fromState, toState, function (op) {
              if (isParentOf(scope, op) && op._parent !== y && (op._id.user !== y.userID || undoOp.fromState === null || op._id.clock < undoOp.fromState.clock || op._id.clock > undoOp.toState.clock)) {
                redoitems.add(op);
              }
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        redoitems.forEach(function (op) {
          var opUndone = op._redo(y, redoitems);
          performedUndo = performedUndo || opUndone;
        });
      };

      while (!performedUndo && reverseBuffer.length > 0) {
        _loop();
      }
    });
    if (performedUndo) {
      // should be performed after the undo transaction
      undoOp.bindingInfos.forEach(function (info, binding) {
        binding._restoreUndoStackInfo(info);
      });
    }
    return performedUndo;
  }

  /**
   * Saves a history of locally applied operations. The UndoManager handles the
   * undoing and redoing of locally created changes.
   */

  var UndoManager = function () {
    /**
     * @param {YType} scope The scope on which to listen for changes.
     * @param {Object} options Optionally provided configuration.
     */
    function UndoManager(scope) {
      var _this2 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      classCallCheck(this, UndoManager);

      this.options = options;
      this._bindings = new Set(options.bindings);
      options.captureTimeout = options.captureTimeout == null ? 500 : options.captureTimeout;
      this._undoBuffer = [];
      this._redoBuffer = [];
      this._scope = scope;
      this._undoing = false;
      this._redoing = false;
      this._lastTransactionWasUndo = false;
      var y = scope._y;
      this.y = y;
      y._hasUndoManager = true;
      var bindingInfos = void 0;
      y.on('beforeTransaction', function (y, transaction, remote) {
        if (!remote) {
          // Store binding information before transaction is executed
          // By restoring the binding information, we can make sure that the state
          // before the transaction can be recovered
          bindingInfos = new Map();
          _this2._bindings.forEach(function (binding) {
            bindingInfos.set(binding, binding._getUndoStackInfo());
          });
        }
      });
      y.on('afterTransaction', function (y, transaction, remote) {
        if (!remote && transaction.changedParentTypes.has(scope)) {
          var reverseOperation = new ReverseOperation(y, transaction, bindingInfos);
          if (!_this2._undoing) {
            var lastUndoOp = _this2._undoBuffer.length > 0 ? _this2._undoBuffer[_this2._undoBuffer.length - 1] : null;
            if (_this2._redoing === false && _this2._lastTransactionWasUndo === false && lastUndoOp !== null && (options.captureTimeout < 0 || reverseOperation.created - lastUndoOp.created <= options.captureTimeout)) {
              lastUndoOp.created = reverseOperation.created;
              if (reverseOperation.toState !== null) {
                lastUndoOp.toState = reverseOperation.toState;
                if (lastUndoOp.fromState === null) {
                  lastUndoOp.fromState = reverseOperation.fromState;
                }
              }
              reverseOperation.deletedStructs.forEach(lastUndoOp.deletedStructs.add, lastUndoOp.deletedStructs);
            } else {
              _this2._lastTransactionWasUndo = false;
              _this2._undoBuffer.push(reverseOperation);
            }
            if (!_this2._redoing) {
              _this2._redoBuffer = [];
            }
          } else {
            _this2._lastTransactionWasUndo = true;
            _this2._redoBuffer.push(reverseOperation);
          }
        }
      });
    }

    /**
     * Enforce that the next change is created as a separate item in the undo stack
     */


    createClass(UndoManager, [{
      key: 'flushChanges',
      value: function flushChanges() {
        this._lastTransactionWasUndo = true;
      }

      /**
       * Undo the last locally created change.
       */

    }, {
      key: 'undo',
      value: function undo() {
        this._undoing = true;
        var performedUndo = applyReverseOperation(this.y, this._scope, this._undoBuffer);
        this._undoing = false;
        return performedUndo;
      }

      /**
       * Redo the last locally created change.
       */

    }, {
      key: 'redo',
      value: function redo() {
        this._redoing = true;
        var performedRedo = applyReverseOperation(this.y, this._scope, this._redoBuffer);
        this._redoing = false;
        return performedRedo;
      }
    }]);
    return UndoManager;
  }();

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var index = function index(val, options) {
    options = options || {};
    var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + 'd';
    }
    if (ms >= h) {
      return Math.round(ms / h) + 'h';
    }
    if (ms >= m) {
      return Math.round(ms / m) + 'm';
    }
    if (ms >= s) {
      return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  var debug = createCommonjsModule(function (module, exports) {
    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     *
     * Expose `debug()` as the module.
     */

    exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = index;

    /**
     * The currently active debug mode names, and names to skip.
     */

    exports.names = [];
    exports.skips = [];

    /**
     * Map of special "%n" handling functions, for the debug "format" argument.
     *
     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
     */

    exports.formatters = {};

    /**
     * Previous log timestamp.
     */

    var prevTime;

    /**
     * Select a color.
     * @param {String} namespace
     * @return {Number}
     * @api private
     */

    function selectColor(namespace) {
      var hash = 0,
          i;

      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }

      return exports.colors[Math.abs(hash) % exports.colors.length];
    }

    /**
     * Create a debugger with the given `namespace`.
     *
     * @param {String} namespace
     * @return {Function}
     * @api public
     */

    function createDebug(namespace) {

      function debug() {
        // disabled?
        if (!debug.enabled) return;

        var self = debug;

        // set `diff` timestamp
        var curr = +new Date();
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;

        // turn the `arguments` into a proper Array
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        args[0] = exports.coerce(args[0]);

        if ('string' !== typeof args[0]) {
          // anything else let's inspect with %O
          args.unshift('%O');
        }

        // apply any `formatters` transformations
        var index$$1 = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
          // if we encounter an escaped % then don't increase the array index
          if (match === '%%') return match;
          index$$1++;
          var formatter = exports.formatters[format];
          if ('function' === typeof formatter) {
            var val = args[index$$1];
            match = formatter.call(self, val);

            // now we need to remove `args[index]` since it's inlined in the `format`
            args.splice(index$$1, 1);
            index$$1--;
          }
          return match;
        });

        // apply env-specific formatting (colors, etc.)
        exports.formatArgs.call(self, args);

        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self, args);
      }

      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);

      // env-specific initialization logic for debug instances
      if ('function' === typeof exports.init) {
        exports.init(debug);
      }

      return debug;
    }

    /**
     * Enables a debug mode by namespaces. This can include modes
     * separated by a colon and wildcards.
     *
     * @param {String} namespaces
     * @api public
     */

    function enable(namespaces) {
      exports.save(namespaces);

      exports.names = [];
      exports.skips = [];

      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;

      for (var i = 0; i < len; i++) {
        if (!split[i]) continue; // ignore empty strings
        namespaces = split[i].replace(/\*/g, '.*?');
        if (namespaces[0] === '-') {
          exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
        } else {
          exports.names.push(new RegExp('^' + namespaces + '$'));
        }
      }
    }

    /**
     * Disable debug output.
     *
     * @api public
     */

    function disable() {
      exports.enable('');
    }

    /**
     * Returns true if the given mode name is enabled, false otherwise.
     *
     * @param {String} name
     * @return {Boolean}
     * @api public
     */

    function enabled(name) {
      var i, len;
      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Coerce `val`.
     *
     * @param {Mixed} val
     * @return {Mixed}
     * @api private
     */

    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
  });
  var debug_1 = debug.coerce;
  var debug_2 = debug.disable;
  var debug_3 = debug.enable;
  var debug_4 = debug.enabled;
  var debug_5 = debug.humanize;
  var debug_6 = debug.names;
  var debug_7 = debug.skips;
  var debug_8 = debug.formatters;

  var browser = createCommonjsModule(function (module, exports) {
    /**
     * This is the web browser implementation of `debug()`.
     *
     * Expose `debug()` as the module.
     */

    exports = module.exports = debug;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

    /**
     * Colors.
     */

    exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    function useColors() {
      // NB: In an Electron preload script, document will be defined but not fully
      // initialized. Since we know we're in Chrome, we'll just detect this case
      // explicitly
      if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
        return true;
      }

      // is webkit? http://stackoverflow.com/a/16459606/376773
      // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
      return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
      // double check webkit in userAgent just in case we are in a worker
      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }

    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

    exports.formatters.j = function (v) {
      try {
        return JSON.stringify(v);
      } catch (err) {
        return '[UnexpectedJSONParseError]: ' + err.message;
      }
    };

    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
      var useColors = this.useColors;

      args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

      if (!useColors) return;

      var c = 'color: ' + this.color;
      args.splice(1, 0, c, 'color: inherit');

      // the final "%c" is somewhat tricky, because there could be other
      // arguments passed either before or after the %c, so we need to
      // figure out the correct index to insert the CSS into
      var index = 0;
      var lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, function (match) {
        if ('%%' === match) return;
        index++;
        if ('%c' === match) {
          // we only are interested in the *last* %c
          // (the user may have provided their own)
          lastC = index;
        }
      });

      args.splice(lastC, 0, c);
    }

    /**
     * Invokes `console.log()` when available.
     * No-op when `console.log` is not a "function".
     *
     * @api public
     */

    function log() {
      // this hackery is required for IE8/9, where
      // the `console.log` function doesn't have 'apply'
      return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */

    function save(namespaces) {
      try {
        if (null == namespaces) {
          exports.storage.removeItem('debug');
        } else {
          exports.storage.debug = namespaces;
        }
      } catch (e) {}
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */

    function load() {
      var r;
      try {
        r = exports.storage.debug;
      } catch (e) {}

      // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
      if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
      }

      return r;
    }

    /**
     * Enable namespaces listed in `localStorage.debug` initially.
     */

    exports.enable(load());

    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
      try {
        return window.localStorage;
      } catch (e) {}
    }
  });
  var browser_1 = browser.log;
  var browser_2 = browser.formatArgs;
  var browser_3 = browser.save;
  var browser_4 = browser.load;
  var browser_5 = browser.useColors;
  var browser_6 = browser.storage;
  var browser_7 = browser.colors;

  // TODO: rename Connector

  var AbstractConnector = function () {
    function AbstractConnector(y, opts) {
      classCallCheck(this, AbstractConnector);

      this.y = y;
      this.opts = opts;
      if (opts.role == null || opts.role === 'master') {
        this.role = 'master';
      } else if (opts.role === 'slave') {
        this.role = 'slave';
      } else {
        throw new Error("Role must be either 'master' or 'slave'!");
      }
      this.log = browser('y:connector');
      this.logMessage = browser('y:connector-message');
      this._forwardAppliedStructs = opts.forwardAppliedOperations || false; // TODO: rename
      this.role = opts.role;
      this.connections = new Map();
      this.isSynced = false;
      this.userEventListeners = [];
      this.whenSyncedListeners = [];
      this.currentSyncTarget = null;
      this.debug = opts.debug === true;
      this.broadcastBuffer = new BinaryEncoder();
      this.broadcastBufferSize = 0;
      this.protocolVersion = 11;
      this.authInfo = opts.auth || null;
      this.checkAuth = opts.checkAuth || function () {
        return Promise.resolve('write');
      }; // default is everyone has write access
      if (opts.maxBufferLength == null) {
        this.maxBufferLength = -1;
      } else {
        this.maxBufferLength = opts.maxBufferLength;
      }
    }

    createClass(AbstractConnector, [{
      key: 'reconnect',
      value: function reconnect() {
        this.log('reconnecting..');
      }
    }, {
      key: 'disconnect',
      value: function disconnect() {
        this.log('discronnecting..');
        this.connections = new Map();
        this.isSynced = false;
        this.currentSyncTarget = null;
        this.whenSyncedListeners = [];
        return Promise.resolve();
      }
    }, {
      key: 'onUserEvent',
      value: function onUserEvent(f) {
        this.userEventListeners.push(f);
      }
    }, {
      key: 'removeUserEventListener',
      value: function removeUserEventListener(f) {
        this.userEventListeners = this.userEventListeners.filter(function (g) {
          return f !== g;
        });
      }
    }, {
      key: 'userLeft',
      value: function userLeft(user) {
        if (this.connections.has(user)) {
          this.log('%s: User left %s', this.y.userID, user);
          this.connections.delete(user);
          // check if isSynced event can be sent now
          this._setSyncedWith(null);
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = this.userEventListeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var f = _step.value;

              f({
                action: 'userLeft',
                user: user
              });
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }
    }, {
      key: 'userJoined',
      value: function userJoined(user, role, auth) {
        if (role == null) {
          throw new Error('You must specify the role of the joined user!');
        }
        if (this.connections.has(user)) {
          throw new Error('This user already joined!');
        }
        this.log('%s: User joined %s', this.y.userID, user);
        this.connections.set(user, {
          uid: user,
          isSynced: false,
          role: role,
          processAfterAuth: [],
          processAfterSync: [],
          auth: auth || null,
          receivedSyncStep2: false
        });
        var defer = {};
        defer.promise = new Promise(function (resolve) {
          defer.resolve = resolve;
        });
        this.connections.get(user).syncStep2 = defer;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.userEventListeners[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var f = _step2.value;

            f({
              action: 'userJoined',
              user: user,
              role: role
            });
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        this._syncWithUser(user);
      }

      // Execute a function _when_ we are connected.
      // If not connected, wait until connected

    }, {
      key: 'whenSynced',
      value: function whenSynced(f) {
        if (this.isSynced) {
          f();
        } else {
          this.whenSyncedListeners.push(f);
        }
      }
    }, {
      key: '_syncWithUser',
      value: function _syncWithUser(userID) {
        if (this.role === 'slave') {
          return; // "The current sync has not finished or this is controlled by a master!"
        }
        sendSyncStep1(this, userID);
      }
    }, {
      key: '_fireIsSyncedListeners',
      value: function _fireIsSyncedListeners() {
        if (!this.isSynced) {
          this.isSynced = true;
          // It is safer to remove this!
          // call whensynced listeners
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = this.whenSyncedListeners[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var f = _step3.value;

              f();
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          this.whenSyncedListeners = [];
          this.y._setContentReady();
          this.y.emit('synced');
        }
      }
    }, {
      key: 'send',
      value: function send(uid, buffer) {
        var y = this.y;
        if (!(buffer instanceof ArrayBuffer || buffer instanceof Uint8Array)) {
          throw new Error('Expected Message to be an ArrayBuffer or Uint8Array - don\'t use this method to send custom messages');
        }
        this.log('User%s to User%s: Send \'%y\'', y.userID, uid, buffer);
        this.logMessage('User%s to User%s: Send %Y', y.userID, uid, [y, buffer]);
      }
    }, {
      key: 'broadcast',
      value: function broadcast(buffer) {
        var y = this.y;
        if (!(buffer instanceof ArrayBuffer || buffer instanceof Uint8Array)) {
          throw new Error('Expected Message to be an ArrayBuffer or Uint8Array - don\'t use this method to send custom messages');
        }
        this.log('User%s: Broadcast \'%y\'', y.userID, buffer);
        this.logMessage('User%s: Broadcast: %Y', y.userID, [y, buffer]);
      }

      /*
        Buffer operations, and broadcast them when ready.
      */

    }, {
      key: 'broadcastStruct',
      value: function broadcastStruct(struct) {
        var _this = this;

        var firstContent = this.broadcastBuffer.length === 0;
        if (firstContent) {
          this.broadcastBuffer.writeVarString(this.y.room);
          this.broadcastBuffer.writeVarString('update');
          this.broadcastBufferSize = 0;
          this.broadcastBufferSizePos = this.broadcastBuffer.pos;
          this.broadcastBuffer.writeUint32(0);
        }
        this.broadcastBufferSize++;
        struct._toBinary(this.broadcastBuffer);
        if (this.maxBufferLength > 0 && this.broadcastBuffer.length > this.maxBufferLength) {
          // it is necessary to send the buffer now
          // cache the buffer and check if server is responsive
          var buffer = this.broadcastBuffer;
          buffer.setUint32(this.broadcastBufferSizePos, this.broadcastBufferSize);
          this.broadcastBuffer = new BinaryEncoder();
          this.whenRemoteResponsive().then(function () {
            _this.broadcast(buffer.createBuffer());
          });
        } else if (firstContent) {
          // send the buffer when all transactions are finished
          // (or buffer exceeds maxBufferLength)
          setTimeout(function () {
            if (_this.broadcastBuffer.length > 0) {
              var _buffer = _this.broadcastBuffer;
              _buffer.setUint32(_this.broadcastBufferSizePos, _this.broadcastBufferSize);
              _this.broadcast(_buffer.createBuffer());
              _this.broadcastBuffer = new BinaryEncoder();
            }
          }, 0);
        }
      }

      /*
       * Somehow check the responsiveness of the remote clients/server
       * Default behavior:
       *   Wait 100ms before broadcasting the next batch of operations
       *
       * Only used when maxBufferLength is set
       *
       */

    }, {
      key: 'whenRemoteResponsive',
      value: function whenRemoteResponsive() {
        return new Promise(function (resolve) {
          setTimeout(resolve, 100);
        });
      }

      /*
        You received a raw message, and you know that it is intended for Yjs. Then call this function.
      */

    }, {
      key: 'receiveMessage',
      value: function receiveMessage(sender, buffer, skipAuth) {
        var _this2 = this;

        var y = this.y;
        var userID = y.userID;
        skipAuth = skipAuth || false;
        if (!(buffer instanceof ArrayBuffer || buffer instanceof Uint8Array)) {
          return Promise.reject(new Error('Expected Message to be an ArrayBuffer or Uint8Array!'));
        }
        if (sender === userID) {
          return Promise.resolve();
        }
        var decoder = new BinaryDecoder(buffer);
        var encoder = new BinaryEncoder();
        var roomname = decoder.readVarString(); // read room name
        encoder.writeVarString(roomname);
        var messageType = decoder.readVarString();
        var senderConn = this.connections.get(sender);
        this.log('User%s from User%s: Receive \'%s\'', userID, sender, messageType);
        this.logMessage('User%s from User%s: Receive %Y', userID, sender, [y, buffer]);
        if (senderConn == null && !skipAuth) {
          throw new Error('Received message from unknown peer!');
        }
        if (messageType === 'sync step 1' || messageType === 'sync step 2') {
          var auth = decoder.readVarUint();
          if (senderConn.auth == null) {
            senderConn.processAfterAuth.push([messageType, senderConn, decoder, encoder, sender]);
            // check auth
            return this.checkAuth(auth, y, sender).then(function (authPermissions) {
              if (senderConn.auth == null) {
                senderConn.auth = authPermissions;
                y.emit('userAuthenticated', {
                  user: senderConn.uid,
                  auth: authPermissions
                });
              }
              var messages = senderConn.processAfterAuth;
              senderConn.processAfterAuth = [];

              messages.forEach(function (m) {
                return _this2.computeMessage(m[0], m[1], m[2], m[3], m[4]);
              });
            });
          }
        }
        if ((skipAuth || senderConn.auth != null) && (messageType !== 'update' || senderConn.isSynced)) {
          this.computeMessage(messageType, senderConn, decoder, encoder, sender, skipAuth);
        } else {
          senderConn.processAfterSync.push([messageType, senderConn, decoder, encoder, sender, false]);
        }
      }
    }, {
      key: 'computeMessage',
      value: function computeMessage(messageType, senderConn, decoder, encoder, sender, skipAuth) {
        if (messageType === 'sync step 1' && (senderConn.auth === 'write' || senderConn.auth === 'read')) {
          // cannot wait for sync step 1 to finish, because we may wait for sync step 2 in sync step 1 (->lock)
          readSyncStep1(decoder, encoder, this.y, senderConn, sender);
        } else {
          var y = this.y;
          y.transact(function () {
            if (messageType === 'sync step 2' && senderConn.auth === 'write') {
              readSyncStep2(decoder, encoder, y, senderConn, sender);
            } else if (messageType === 'update' && (skipAuth || senderConn.auth === 'write')) {
              integrateRemoteStructs(y, decoder);
            } else {
              throw new Error('Unable to receive message');
            }
          }, true);
        }
      }
    }, {
      key: '_setSyncedWith',
      value: function _setSyncedWith(user) {
        var _this3 = this;

        if (user != null) {
          var userConn = this.connections.get(user);
          userConn.isSynced = true;
          var messages = userConn.processAfterSync;
          userConn.processAfterSync = [];
          messages.forEach(function (m) {
            _this3.computeMessage(m[0], m[1], m[2], m[3], m[4]);
          });
        }
        var conns = Array.from(this.connections.values());
        if (conns.length > 0 && conns.every(function (u) {
          return u.isSynced;
        })) {
          this._fireIsSyncedListeners();
        }
      }
    }]);
    return AbstractConnector;
  }();

  /**
   * Read the Decoder and fill the Yjs instance with data in the decoder.
   *
   * @param {Y} y The Yjs instance
   * @param {BinaryDecoder} decoder The BinaryDecoder to read from.
   */
  function fromBinary(y, decoder) {
    y.transact(function () {
      integrateRemoteStructs(y, decoder);
      readDeleteSet(y, decoder);
    });
  }

  /**
   * Encode the Yjs model to binary format.
   *
   * @param {Y} y The Yjs instance
   * @return {BinaryEncoder} The encoder instance that can be transformed
   *                         to ArrayBuffer or Buffer.
   */
  function toBinary(y) {
    var encoder = new BinaryEncoder();
    writeStructs(y, encoder, new Map());
    writeDeleteSet(y, encoder);
    return encoder;
  }

  function getFreshCnf() {
    var buffer = new BinaryEncoder();
    buffer.writeUint32(0);
    return {
      len: 0,
      buffer: buffer
    };
  }

  /**
   * Abstract persistence class.
   */

  var AbstractPersistence = function () {
    function AbstractPersistence(opts) {
      classCallCheck(this, AbstractPersistence);

      this.opts = opts;
      this.ys = new Map();
    }

    createClass(AbstractPersistence, [{
      key: '_init',
      value: function _init(y) {
        var _this = this;

        var cnf = this.ys.get(y);
        if (cnf === undefined) {
          cnf = getFreshCnf();
          cnf.mutualExclude = createMutualExclude();
          this.ys.set(y, cnf);
          return this.init(y).then(function () {
            y.on('afterTransaction', function (y, transaction) {
              var cnf = _this.ys.get(y);
              if (cnf.len > 0) {
                cnf.buffer.setUint32(0, cnf.len);
                _this.saveUpdate(y, cnf.buffer.createBuffer(), transaction);
                var _cnf = getFreshCnf();
                for (var key in _cnf) {
                  cnf[key] = _cnf[key];
                }
              }
            });
            return _this.retrieve(y);
          }).then(function () {
            return Promise.resolve(cnf);
          });
        } else {
          return Promise.resolve(cnf);
        }
      }
    }, {
      key: 'deinit',
      value: function deinit(y) {
        this.ys.delete(y);
        y.persistence = null;
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this.ys = null;
      }

      /**
       * Remove all persisted data that belongs to a room.
       * Automatically destroys all Yjs all Yjs instances that persist to
       * the room. If `destroyYjsInstances = false` the persistence functionality
       * will be removed from the Yjs instances.
       *
       * ** Must be overwritten! **
       */

    }, {
      key: 'removePersistedData',
      value: function removePersistedData(room) {
        var _this2 = this;

        var destroyYjsInstances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        this.ys.forEach(function (cnf, y) {
          if (y.room === room) {
            if (destroyYjsInstances) {
              y.destroy();
            } else {
              _this2.deinit(y);
            }
          }
        });
      }

      /* overwrite */

    }, {
      key: 'saveUpdate',
      value: function saveUpdate(buffer) {}

      /**
       * Save struct to update buffer.
       * saveUpdate is called when transaction ends
       */

    }, {
      key: 'saveStruct',
      value: function saveStruct(y, struct) {
        var cnf = this.ys.get(y);
        if (cnf !== undefined) {
          cnf.mutualExclude(function () {
            struct._toBinary(cnf.buffer);
            cnf.len++;
          });
        }
      }

      /* overwrite */

    }, {
      key: 'retrieve',
      value: function retrieve(y, model, updates) {
        var cnf = this.ys.get(y);
        if (cnf !== undefined) {
          cnf.mutualExclude(function () {
            y.transact(function () {
              if (model != null) {
                fromBinary(y, new BinaryDecoder(new Uint8Array(model)));
              }
              if (updates != null) {
                for (var i = 0; i < updates.length; i++) {
                  integrateRemoteStructs(y, new BinaryDecoder(new Uint8Array(updates[i])));
                }
              }
            });
            y.emit('persistenceReady');
          });
        }
      }

      /* overwrite */

    }, {
      key: 'persist',
      value: function persist(y) {
        return toBinary(y).createBuffer();
      }
    }]);
    return AbstractPersistence;
  }();

  function typeObserver$1() {
    var _this = this;

    this._mutualExclude(function () {
      var textarea = _this.target;
      var textType = _this.type;
      var relativeStart = getRelativePosition(textType, textarea.selectionStart);
      var relativeEnd = getRelativePosition(textType, textarea.selectionEnd);
      textarea.value = textType.toString();
      var start = fromRelativePosition(textType._y, relativeStart);
      var end = fromRelativePosition(textType._y, relativeEnd);
      textarea.setSelectionRange(start, end);
    });
  }

  function domObserver$1() {
    var _this2 = this;

    this._mutualExclude(function () {
      var diff = simpleDiff(_this2.type.toString(), _this2.target.value);
      _this2.type.delete(diff.pos, diff.remove);
      _this2.type.insert(diff.pos, diff.insert);
    });
  }

  /**
   * A binding that binds a YText to a dom textarea.
   *
   * This binding is automatically destroyed when its parent is deleted.
   *
   * @example
   *   const textare = document.createElement('textarea')
   *   const type = y.define('textarea', Y.Text)
   *   const binding = new Y.QuillBinding(type, textarea)
   *
   */

  var TextareaBinding = function (_Binding) {
    inherits(TextareaBinding, _Binding);

    function TextareaBinding(textType, domTextarea) {
      classCallCheck(this, TextareaBinding);

      // set initial value
      var _this3 = possibleConstructorReturn(this, (TextareaBinding.__proto__ || Object.getPrototypeOf(TextareaBinding)).call(this, textType, domTextarea));
      // Binding handles textType as this.type and domTextarea as this.target


      domTextarea.value = textType.toString();
      // Observers are handled by this class
      _this3._typeObserver = typeObserver$1.bind(_this3);
      _this3._domObserver = domObserver$1.bind(_this3);
      textType.observe(_this3._typeObserver);
      domTextarea.addEventListener('input', _this3._domObserver);
      return _this3;
    }

    createClass(TextareaBinding, [{
      key: 'destroy',
      value: function destroy() {
        // Remove everything that is handled by this class
        this.type.unobserve(this._typeObserver);
        this.target.unobserve(this._domObserver);
        get(TextareaBinding.prototype.__proto__ || Object.getPrototypeOf(TextareaBinding.prototype), 'destroy', this).call(this);
      }
    }]);
    return TextareaBinding;
  }(Binding);

  function typeObserver$2(event) {
    var quill = this.target;
    // Force flush Quill changes.
    quill.update('yjs');
    this._mutualExclude(function () {
      // Apply computed delta.
      quill.updateContents(event.delta, 'yjs');
      // Force flush Quill changes. Ignore applied changes.
      quill.update('yjs');
    });
  }

  function quillObserver(delta) {
    var _this = this;

    this._mutualExclude(function () {
      _this.type.applyDelta(delta.ops);
    });
  }

  /**
   * A Binding that binds a YText type to a Quill editor.
   *
   * @example
   * const quill = new Quill(document.createElement('div'))
   * const type = y.define('quill', Y.Text)
   * const binding = new Y.QuillBinding(quill, type)
   * // Now modifications on the DOM will be reflected in the Type, and the other
   * // way around!
   */

  var QuillBinding = function (_Binding) {
    inherits(QuillBinding, _Binding);

    /**
     * @param {YText} textType
     * @param {Quill} quill
     */
    function QuillBinding(textType, quill) {
      classCallCheck(this, QuillBinding);

      // Set initial value.
      var _this2 = possibleConstructorReturn(this, (QuillBinding.__proto__ || Object.getPrototypeOf(QuillBinding)).call(this, textType, quill));
      // Binding handles textType as this.type and quill as this.target.


      quill.setContents(textType.toDelta(), 'yjs');
      // Observers are handled by this class.
      _this2._typeObserver = typeObserver$2.bind(_this2);
      _this2._quillObserver = quillObserver.bind(_this2);
      textType.observe(_this2._typeObserver);
      quill.on('text-change', _this2._quillObserver);
      return _this2;
    }

    createClass(QuillBinding, [{
      key: 'destroy',
      value: function destroy() {
        // Remove everything that is handled by this class.
        this.type.unobserve(this._typeObserver);
        this.target.off('text-change', this._quillObserver);
        get(QuillBinding.prototype.__proto__ || Object.getPrototypeOf(QuillBinding.prototype), 'destroy', this).call(this);
      }
    }]);
    return QuillBinding;
  }(Binding);

  function typeObserver$3(event) {
    var _this = this;

    this._mutualExclude(function () {
      var codeMirror = _this.target;
      var deltas = event.delta;
      var index = 0;
      var from = codeMirror.posFromIndex(index);
      for (var i = 0; i < deltas.length; i++) {
        var delta = deltas[i];
        if (delta.retain) {
          index = delta.retain;
          from = codeMirror.posFromIndex(index);
        } else if (delta.insert) {
          codeMirror.replaceRange(delta.insert, from, from);
        } else if (delta.delete) {
          codeMirror.replaceRange('', from, codeMirror.posFromIndex(index + delta.delete));
        }
      }
    });
  }

  function codeMirrorObserver(codeMirror, deltas) {
    var _this2 = this;

    this._mutualExclude(function () {
      for (var i = 0; i < deltas.length; i++) {
        var delta = deltas[i];
        var start = codeMirror.indexFromPos(delta.from);
        // apply the delete operation first
        if (delta.removed.length > 0) {
          var delLength = 0;
          for (var j = 0; j < delta.removed.length; j++) {
            delLength += delta.removed[j].length;
          }
          // "enter" is also a character in our case
          delLength += delta.removed.length - 1;
          _this2.type.delete(start, delLength);
        }
        // apply insert operation
        _this2.type.insert(start, delta.text.join('\n'));
      }
    });
  }

  /**
   * A binding that binds a YText to a codemirror.
   *
   * This binding is automatically destroyed when its parent is deleted.
   *
   */

  var CodeMirrorBinding = function (_Binding) {
    inherits(CodeMirrorBinding, _Binding);

    function CodeMirrorBinding(textType, codeMirror) {
      classCallCheck(this, CodeMirrorBinding);

      // set initial value
      var _this3 = possibleConstructorReturn(this, (CodeMirrorBinding.__proto__ || Object.getPrototypeOf(CodeMirrorBinding)).call(this, textType, codeMirror));

      codeMirror.setValue(textType.toString());
      // Observers are handled by this class
      _this3._typeObserver = typeObserver$3.bind(_this3);
      _this3._codeMirrorObserver = codeMirrorObserver.bind(_this3);
      textType.observe(_this3._typeObserver);
      codeMirror.on('changes', _this3._codeMirrorObserver);
      return _this3;
    }

    createClass(CodeMirrorBinding, [{
      key: 'destroy',
      value: function destroy() {
        // Remove everything that is handled by this class
        this.type.unobserve(this._typeObserver);
        this.target.unobserve(this._codeMirrorObserver);
        get(CodeMirrorBinding.prototype.__proto__ || Object.getPrototypeOf(CodeMirrorBinding.prototype), 'destroy', this).call(this);
      }
    }]);
    return CodeMirrorBinding;
  }(Binding);

  // TODO: The following assignments should be moved to yjs-dist
  Y.AbstractConnector = AbstractConnector;
  Y.AbstractPersistence = AbstractPersistence;
  Y.Array = YArray;
  Y.Map = YMap;
  Y.Text = YText;
  Y.XmlElement = YXmlElement;
  Y.XmlFragment = YXmlFragment;
  Y.XmlText = YXmlText;
  Y.XmlHook = YXmlHook;

  Y.TextareaBinding = TextareaBinding;
  Y.QuillBinding = QuillBinding;
  Y.DomBinding = DomBinding;
  Y.CodeMirrorBinding = CodeMirrorBinding;

  DomBinding.domToType = domToType;
  DomBinding.domsToTypes = domsToTypes;
  DomBinding.switchAssociation = switchAssociation;

  Y.utils = {
    BinaryDecoder: BinaryDecoder,
    UndoManager: UndoManager,
    getRelativePosition: getRelativePosition,
    fromRelativePosition: fromRelativePosition,
    registerStruct: registerStruct,
    integrateRemoteStructs: integrateRemoteStructs,
    toBinary: toBinary,
    fromBinary: fromBinary
  };

  Y.debug = browser;
  browser.formatters.Y = messageToString;
  browser.formatters.y = messageToRoomname;

  return Y;

})));


}).call(this,require('_process'),require("buffer").Buffer)

},{"_process":4,"buffer":2}],8:[function(require,module,exports){
var Y = require('yjs');
window.Y = Y;
require('y-webrtc3')(Y);

var Y2 = require('yjs2');
window.Y2 = Y2;
require('y-webrtc3')(Y2);

let y = new Y('ynotebook', {
    connector: {
        name: 'webrtc',
        room: 'dinesh',
        url: 'http://finwin.io:1256'
    }
});
window.y = y;

let y2 = new Y2('ynotebook2', {
    connector: {
        name: 'webrtc',
        room: 'dinesh2',
        url: 'http://finwin.io:1257'
    }
});
window.y2 = y2;

function load_ynotebook(y) {
    function load_ynotebook2(y) {
        if (typeof Jupyter !== 'undefined') {
            if (typeof Jupyter.notebook !== 'undefined') {
                load_ynotebook3(y);
            } else {
                setTimeout(load_ynotebook2, 0, y);
            }
        } else {
            setTimeout(load_ynotebook2, 0, y);
        }
    }

    function load_ynotebook3(y) {
        var ymap = y.define('ymap', Y.Map);
        Jupyter.notebook.y = y;
        Jupyter.notebook.ymap = ymap;
        ymap.observe(function (e) {
            console.log(e);
            for (let index of e.keysChanged) {
                let data = ymap.get(index);
                var cell = Jupyter.notebook.insert_cell_at_index(data.cell_data.cell_type, index);
                new Y.CodeMirrorBinding(y.define('ycodemirror'+data.id, Y.Text), cell.code_mirror);
                if (y.connector.sockets === 0) {
                    cell.fromJSON(data.cell_data);
                }
                if (data.cell_data.cell_type !== 'markdown') {
                    new Y.DomBinding(y.define('yxml'+data.id, Y.XmlFragment), cell.output_area.element[0]);
                }
                console.log(index);
            }
        });

        if (y.connector.sockets === 0) {
            Jupyter.notebook.is_first = true;
            Jupyter.notebook.load_notebook(Jupyter.notebook.notebook_path);
        } else {
            Jupyter.notebook.is_first = false;
            Jupyter.notebook.load_notebook(Jupyter.notebook.notebook_path);
        }
    }

    load_ynotebook2(y);
}

function load_ynotebook4(y) {
    if (y.connector.sockets >= 0) {
        load_ynotebook(y);
    } else {
        setTimeout(load_ynotebook4, 0, y);
    }
}

//load_ynotebook4(y);

},{"y-webrtc3":5,"yjs":6,"yjs2":7}]},{},[8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
